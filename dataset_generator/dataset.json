[{"type": "mutation", "name": "uploadImage($input: UploadImageInput!)", "content": "{\n    uploadImage(input: $input)\n  }"}, {"type": "mutation", "name": "deleteChannel($channelId: ID!)", "content": "{\n    deleteChannel(channelId: $channelId)\n  }"}, {"type": "mutation", "name": "editChannel($input: EditChannelInput!)", "content": "{\n    editChannel(input: $input) {\n      ...channelInfo\n    }\n  }\n  ${channelInfoFragment}"}, {"type": "mutation", "name": "deleteCommunity($communityId: ID!)", "content": "{\n    deleteCommunity(communityId: $communityId)\n  }"}, {"type": "mutation", "name": "editCommunity($input: EditCommunityInput!)", "content": "{\n    editCommunity(input: $input) {\n      ...communityInfo\n    }\n  }\n  ${communityInfoFragment}"}, {"type": "mutation", "name": "toggleCommunityNoindex($communityId: ID!)", "content": "{\n    toggleCommunityNoindex(communityId: $communityId) {\n      id\n      slug\n      noindex\n    }\n  }"}, {"type": "mutation", "name": "toggleCommunityRedirect($communityId: ID!)", "content": "{\n    toggleCommunityRedirect(communityId: $communityId) {\n      id\n      slug\n      redirect\n    }\n  }"}, {"type": "mutation", "name": "deleteMessage($id: ID!)", "content": "{\n    deleteMessage(id: $id)\n  }"}, {"type": "mutation", "name": "deleteThread($threadId: ID!)", "content": "{\n    deleteThread(threadId: $threadId)\n  }"}, {"type": "mutation", "name": "banUser($input: BanUserInput!)", "content": "{\n    banUser(input: $input)\n  }"}, {"type": "mutation", "name": "deleteCurrentUser", "content": "{\n    deleteCurrentUser\n  }"}, {"type": "mutation", "name": "editUser($input: EditUserInput!)", "content": "{\n    editUser(input: $input) {\n      ...userInfo\n    }\n  }\n  ${userInfoFragment}"}, {"type": "query", "name": "getChannelById($id: ID)", "content": "{\n    channel(id: $id) {\n      ...channelInfo\n    }\n  }\n  ${channelInfoFragment}"}, {"type": "query", "name": "getChannelBySlugAndCommunitySlug(\n    $channelSlug: LowercaseString\n    $communitySlug: LowercaseString\n  )", "content": "{\n    channel(channelSlug: $channelSlug, communitySlug: $communitySlug) {\n      ...channelInfo\n    }\n  }\n  ${channelInfoFragment}"}, {"type": "query", "name": "getChannelMemberConnection($id: ID, $first: Int, $after: String)", "content": "{\n    channel(id: $id) {\n      ...channelInfo\n      ...channelMemberConnection\n    }\n  }\n  ${channelInfoFragment}\n  ${channelMemberConnectionFragment}"}, {"type": "query", "name": "loadMoreChannelMembers($id: ID, $first: Int, $after: String)", "content": "{\n    channel(id: $id) {\n      ...channelInfo\n      ...channelMemberConnection\n    }\n  }\n  ${channelInfoFragment}\n  ${channelMemberConnectionFragment}"}, {"type": "query", "name": "getChannelSettings($id: ID)", "content": "{\n    channel(id: $id) {\n      ...channelInfo\n      joinSettings {\n        tokenJoinEnabled\n        token\n      }\n    }\n  }\n  ${channelInfoFragment}"}, {"type": "query", "name": "getChannelThreadConnection($id: ID, $after: String)", "content": "{\n    channel(id: $id) {\n      ...channelInfo\n      ...channelThreadConnection\n    }\n  }\n  ${channelInfoFragment}\n  ${channelThreadConnectionFragment}"}, {"type": "query", "name": "loadMoreChannelThreads($id: ID, $after: String)", "content": "{\n    channel(id: $id) {\n      ...channelInfo\n      ...channelThreadConnection\n    }\n  }\n  ${channelInfoFragment}\n  ${channelThreadConnectionFragment}"}, {"type": "query", "name": "getCommunitiesByIds($ids: [ID])", "content": "{\n    communities(ids: $ids) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "getCommunitiesBySlugs($slugs: [LowercaseString])", "content": "{\n    communities(slugs: $slugs) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "getCommunitiesCollection($curatedContentType: String)", "content": "{\n    communities(curatedContentType: $curatedContentType) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "getCommunityById($id: ID)", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "getCommunityBySlug($slug: LowercaseString)", "content": "{\n    community(slug: $slug) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "getCommunityByMatch($slug: LowercaseString)", "content": "{\n    community(slug: $slug) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "getCommunityChannels($id: ID)", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityChannelConnection\n    }\n  }\n  ${communityInfoFragment}\n  ${communityChannelConnectionFragment}"}, {"type": "query", "name": "loadMoreCommunityMembers(\n    $id: ID\n    $after: String\n    $first: Int\n    $filter: MembersFilter\n  )", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n      ...communityMembers\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}\n  ${communityMembersFragment}"}, {"type": "query", "name": "getCommunityMembers(\n    $id: ID\n    $after: String\n    $first: Int\n    $filter: MembersFilter\n  )", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n      ...communityMembers\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}\n  ${communityMembersFragment}"}, {"type": "query", "name": "getCommunitySettingsById($id: ID)", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n      ...communitySettings\n    }\n  }\n  ${communityInfoFragment}\n  ${communitySettingsFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "getCommunitySettingsByMatch($slug: LowercaseString)", "content": "{\n    community(slug: $slug) {\n      ...communityInfo\n      ...communityMetaData\n      ...communitySettings\n    }\n  }\n  ${communityInfoFragment}\n  ${communitySettingsFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "loadMoreCommunityThreads(\n    $after: String\n    $id: ID\n    $sort: CommunityThreadConnectionSort\n  )", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityThreadConnection\n    }\n  }\n  ${threadInfoFragment}\n  ${communityInfoFragment}\n  ${communityThreadConnectionFragment}"}, {"type": "query", "name": "getCommunityThreadConnection(\n    $id: ID\n    $after: String\n    $sort: CommunityThreadConnectionSort\n  )", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityThreadConnection\n    }\n  }\n  ${threadInfoFragment}\n  ${communityInfoFragment}\n  ${communityThreadConnectionFragment}"}, {"type": "query", "name": "getCommunityMember($userId: ID!, $communityId: ID!)", "content": "{\n    communityMember(userId: $userId, communityId: $communityId) {\n      id\n      isPending\n    }\n  }"}, {"type": "query", "name": "getComposerCommunitiesAndChannels", "content": "{\n    user: currentUser {\n      ...userInfo\n      communityConnection {\n        edges {\n          node {\n            id\n            name\n            slug\n            profilePhoto\n            communityPermissions {\n              isMember\n              isBlocked\n              isOwner\n              isModerator\n            }\n          }\n        }\n      }\n      channelConnection {\n        edges {\n          node {\n            id\n            name\n            slug\n            isDefault\n            isPrivate\n            isArchived\n            community {\n              id\n            }\n            channelPermissions {\n              isMember\n              isPending\n              isBlocked\n              isOwner\n              isModerator\n            }\n          }\n        }\n      }\n    }\n  }\n  ${userInfoFragment}"}, {"type": "query", "name": "loadMoreDirectMessageThreads($after: String)", "content": "{\n    user: currentUser {\n      ...userInfo\n      ...userDirectMessageThreadConnection\n    }\n  }\n  ${userInfoFragment}\n  ${userDirectMessageThreadsConnectionFragment}"}, {"type": "query", "name": "currentUserDirectMessageThreads($after: String)", "content": "{\n    user: currentUser {\n      ...userInfo\n      ...userDirectMessageThreadConnection\n    }\n  }\n  ${userInfoFragment}\n  ${userDirectMessageThreadsConnectionFragment}"}, {"type": "query", "name": "getDirectMessageThread($id: ID!)", "content": "{\n    directMessageThread(id: $id) {\n      ...directMessageThreadInfo\n    }\n  }\n  ${directMessageThreadInfoFragment}"}, {"type": "query", "name": "getDirectMessageThreadByUserIds($userIds: [ID!])", "content": "{\n    directMessageThreadByUserIds(userIds: $userIds) {\n      ...directMessageThreadInfo\n    }\n  }\n  ${directMessageThreadInfoFragment}"}, {"type": "query", "name": "loadMoreMessages($id: ID!, $after: String)", "content": "{\n    directMessageThread(id: $id) {\n      ...directMessageThreadInfo\n      ...directMessageThreadMessageConnection\n    }\n  }\n  ${directMessageThreadInfoFragment}\n  ${directMessageThreadMessageConnectionFragment}"}, {"type": "query", "name": "getDirectMessageThreadMessages($id: ID!, $after: String)", "content": "{\n    directMessageThread(id: $id) {\n      ...directMessageThreadInfo\n      ...directMessageThreadMessageConnection\n    }\n  }\n  ${directMessageThreadInfoFragment}\n  ${directMessageThreadMessageConnectionFragment}"}, {"type": "query", "name": "getMediaMessagesForThread($threadId: ID!)", "content": "{\n    getMediaMessagesForThread(threadId: $threadId) {\n      id\n      content {\n        body\n      }\n    }\n  }"}, {"type": "query", "name": "getMessageById($id: ID!)", "content": "{\n    message(id: $id) {\n      ...messageInfo\n    }\n  }\n  ${messageInfoFragment}"}, {"type": "query", "name": "getThreadById($id: ID!)", "content": "{\n    thread(id: $id) {\n      ...threadInfo\n    }\n  }\n  ${threadInfoFragment}"}, {"type": "query", "name": "getThreadByMatch($id: ID!)", "content": "{\n    thread(id: $id) {\n      ...threadInfo\n    }\n  }\n  ${threadInfoFragment}"}, {"type": "query", "name": "getThreadMessages(\n    $id: ID!\n    $after: String\n    $first: Int\n    $before: String\n    $last: Int\n  )", "content": "{\n    thread(id: $id) {\n      ...threadInfo\n      ...threadMessageConnection\n    }\n  }\n  ${threadInfoFragment}\n  ${threadMessageConnectionFragment}"}, {"type": "query", "name": "loadMoreEverythingThreads($after: String)", "content": "{\n    user: currentUser {\n      id\n      ...userEverythingConnection\n    }\n  }\n  ${userEverythingConnectionFragment}"}, {"type": "query", "name": "getEverythingThreads($after: String)", "content": "{\n    user: currentUser {\n      id\n      ...userEverythingConnection\n    }\n  }\n  ${userEverythingConnectionFragment}"}, {"type": "query", "name": "getCurrentUserSettings", "content": "{\n    user: currentUser {\n      ...userInfo\n      email\n      pendingEmail\n      ...userSettings\n    }\n  }\n  ${userInfoFragment}\n  ${userSettingsFragment}"}, {"type": "query", "name": "getUserById($id: ID)", "content": "{\n    user(id: $id) {\n      ...userInfo\n    }\n  }\n  ${userInfoFragment}"}, {"type": "query", "name": "getUserByUsername($username: LowercaseString)", "content": "{\n    user(username: $username) {\n      ...userInfo\n    }\n  }\n  ${userInfoFragment}"}, {"type": "query", "name": "getCurrentUser", "content": "{\n    user: currentUser {\n      ...userInfo\n    }\n  }\n  ${userInfoFragment}"}, {"type": "query", "name": "getUserCommunityConnection($id: ID)", "content": "{\n    user(id: $id) {\n      ...userInfo\n      ...userCommunityConnection\n    }\n  }\n  ${userInfoFragment}\n  ${userCommunityConnectionFragment}"}, {"type": "query", "name": "getCurrentUserCommunityConnection", "content": "{\n    user: currentUser {\n      ...userInfo\n      ...userCommunityConnection\n    }\n  }\n  ${userInfoFragment}\n  ${userCommunityConnectionFragment}"}, {"type": "query", "name": "getUserGithubProfile($id: ID)", "content": "{\n    user(id: $id) {\n      id\n      username\n      githubProfile {\n        id\n        username\n      }\n    }\n  }"}, {"type": "query", "name": "loadMoreUserThreads(\n    $after: String\n    $id: ID\n    $kind: ThreadConnectionType\n  )", "content": "{\n    user(id: $id) {\n      ...userInfo\n      ...userThreadConnection\n    }\n  }\n  ${userInfoFragment}\n  ${userThreadConnectionFragment}"}, {"type": "query", "name": "getUserThreadConnection(\n    $id: ID\n    $after: String\n    $kind: ThreadConnectionType\n  )", "content": "{\n    user(id: $id) {\n      ...userInfo\n      ...userThreadConnection\n    }\n  }\n  ${userInfoFragment}\n  ${userThreadConnectionFragment}"}, {"type": "mutation", "name": "subscribeToWebPush($subscription: WebPushSubscription!)", "content": "{\n    subscribeWebPush(subscription: $subscription)\n  }"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n  deleteAdmin(id: $id) {\n    id\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $admin: InputAdmin!)", "content": "{\n  editAdmin(id:$id, admin: $admin) {\n    id,\n    username,\n    first_name,\n    last_name,\n    username,\n    payload,\n    permissions,\n    chatbotIds,\n    createdAt,\n    email\n  }\n}"}, {"type": "mutation", "name": "($admin: InputAdmin!)", "content": "{\n  createAdmin(admin: $admin) {\n    id,\n    username,\n    first_name,\n    last_name,\n    username,\n    payload,\n    permissions,\n    chatbotIds,\n    createdAt,\n    email\n  }\n}"}, {"type": "query", "name": "(\n  $limit: Int,\n  $offset: Int,\n  $order: String,\n  $username: String\n)", "content": "{\n  counters {\n    rows: admins {\n     count(username: $username)\n    }\n  }\n  rows: admins(\n    limit: $limit,\n    offset: $offset,\n    order: $order,\n    username: $username\n  ) {\n    id,\n    username,\n    first_name,\n    last_name,\n    payload,\n    createdAt,\n    email,\n    permissions,\n    chatbotIds\n  }\n}"}, {"type": "query", "name": "($chatbotId: String!)", "content": "{\n  chatbot(chatbotId: $chatbotId) {\n    id,\n    name,\n    description,\n    guid,\n    chatbotId\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $chatbot: InputChatbot!)", "content": "{\n  chatbot: editChatbot(id: $id, chatbot: $chatbot) {\n    id,\n    name,\n    description,\n    guid,\n    chatbotId\n  }\n}"}, {"type": "query", "name": "($id: Int!)", "content": "{\n  device(id: $id) {\n    id,\n    name,\n    payload,\n    createdAt,\n    updatedAt,\n    status,\n    lat,\n    lon,\n    jsonSchema,\n    snapshot,\n    version,\n    lastUpdate\n  }\n}"}, {"type": "subscription", "name": "onDeviceUpdated($id: Int!)", "content": "{\n    device: deviceUpdated(id: $id) {\n      id,\n      name,\n      payload,\n      createdAt,\n      updatedAt,\n      status,\n      lat,\n      lon,\n      jsonSchema,\n      version,\n      lastUpdate,\n      snapshot\n    }\n  }"}, {"type": "query", "name": "($limit: Int, $offset: Int, $order: String)", "content": "{\n  counters {\n    rows: devices {\n      count\n    }\n  }\n  rows: devices(limit: $limit, offset: $offset, order: $order) {\n    id,\n    name,\n    payload,\n    createdAt,\n    updatedAt,\n    status,\n    snapshot,\n    jsonSchema,\n    version,\n    lat,\n    lon\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $device: NewDevice!)", "content": "{\n  editDevice(id: $id, device: $device) {\n    id,\n    name,\n    payload,\n    createdAt,\n    updatedAt,\n    status,\n    lat,\n    lon,\n    jsonSchema,\n    version,\n    lastUpdate,\n    snapshot\n  }\n}"}, {"type": "mutation", "name": "($device: NewDevice!)", "content": "{\n  createDevice(device: $device) {\n    id,\n    name,\n    payload,\n    createdAt,\n    updatedAt,\n    status,\n    lat,\n    lon,\n    jsonSchema,\n    version,\n    lastUpdate,\n    snapshot\n  }\n}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n  deleteDevice(id: $id) {\n    id\n  }\n}"}, {"type": "query", "name": "(\n  $limit: Int,\n  $offset: Int,\n  $order: String,\n  $inbound: Boolean,\n  $type: String,\n  $transport: String,\n  $messageId: String,\n  $chatId: String,\n  $userId: String,\n  $flag: String,\n  $chatbotId: String\n)", "content": "{\n  counters {\n    rows: messages {\n      count(\n        inbound: $inbound,\n        type: $type,\n        transport: $transport,\n        chatId: $chatId,\n        messageId: $messageId,\n        userId: $userId,\n        flag: $flag,\n        chatbotId: $chatbotId\n      )\n    }\n  }\n  rows: messages(\n    limit: $limit,\n    offset: $offset,\n    inbound: $inbound,\n    order: $order,\n    type: $type,\n    transport: $transport,\n    chatId: $chatId,\n    messageId: $messageId,\n    userId: $userId,\n    flag: $flag,\n    chatbotId: $chatbotId\n  ) {\n    id\n    chatId\n    content,\n    messageId,\n    inbound,\n    ts,\n    type,\n    userId,\n    from,\n    transport,\n    createdAt,\n    flag\n  }\n}"}, {"type": "query", "name": "($userId: String)", "content": "{\n  user(userId: $userId) {\n    id,\n    first_name,\n    last_name,\n    username,\n    payload\n  }\n}"}, {"type": "mutation", "name": "(\n  $plugin: String!,\n  $url: String!,\n  $version: String!,\n  $initialConfiguration: String,\n  $initialContent: InputContent,\n  $chatbotId: String,\n  $pluginId: String\n  )", "content": "{\n  installPlugin(\n    plugin: $plugin,\n    url: $url,\n    version: $version,\n    initialConfiguration: $initialConfiguration,\n    initialContent: $initialContent,\n    chatbotId: $chatbotId,\n    pluginId: $pluginId\n  ) {\n    id,\n    plugin,\n    filename,\n    version\n  }\n}"}, {"type": "mutation", "name": "(\n  $plugin: String!,\n  $url: String!,\n  $version: String!,\n  $initialConfiguration: String,\n  $chatbotId: String\n  )", "content": "{\n  updatePlugin(\n    plugin: $plugin,\n    url: $url,\n    version: $version,\n    initialConfiguration: $initialConfiguration,\n    chatbotId: $chatbotId\n  ) {\n    id,\n    plugin,\n    filename,\n    version\n  }\n}"}, {"type": "mutation", "name": "($plugin: String!, $chatbotId: String)", "content": "{\n  uninstallPlugin(plugin: $plugin, chatbotId: $chatbotId) {\n    id\n  }\n}"}, {"type": "query", "name": "($chatbotId: String)", "content": "{\n  chatbot(chatbotId: $chatbotId) {\n    id,\n    name,\n    description,\n    plugins {\n      id,\n      plugin,\n      filename,\n      version\n    }\n  }\n}"}, {"type": "query", "name": "($chatbotId: String)", "content": "{\n  chatbot(chatbotId: $chatbotId) {\n   \tid,\n    name,\n    description,\n    guid,\n    chatbotId,\n    plugins {\n      id,\n      plugin,\n      version,\n      filename\n    }\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $queue: String!)", "content": "{\n  deleteTask(id: $id, queue: $queue) {\n    id\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $queue: String!, $task: InputTask!)", "content": "{\n  updateTask(id:$id, queue: $queue, task: $task) {\n    id,\n    taskId,\n    task,\n    createdAt,\n    priority\n  }\n}"}, {"type": "mutation", "name": "($ids: [Int], $all: Boolean, $queue: String!)", "content": "{\n  deleteTasks(ids: $ids, all: $all, queue: $queue)\n}"}, {"type": "query", "name": "($queue: String!, $limit: Int, $offset: Int)", "content": "{\n  counters {\n    rows: tasks {\n     count(queue: $queue)\n    }\n  }\n  rows: tasks(queue: $queue, limit: $limit, offset: $offset) {\n\t\tid,\n    taskId,\n    task,\n    createdAt,\n    priority\n  }\n}"}, {"type": "query", "name": "($id: Int!)", "content": "{\n  record(id: $id) {\n    id,\n    title,\n    type,\n    createdAt,\n    payload,\n    userId,\n    status,\n    transport,\n    latitude,\n    longitude,\n    user {\n      id,\n      username,\n      first_name,\n      last_name,\n      language,\n      email,\n      chatIds {\n        chatId,\n        transport\n      }\n    }\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $record: InputRecord!)", "content": "{\n  editRecord(id: $id, record: $record) {\n    id,\n    title,\n    type,\n    createdAt,\n    payload,\n    userId,\n    status\n  }\n}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n  deleteRecord(id: $id) {\n    id\n  }\n}"}, {"type": "mutation", "name": "($fromId: Int!, $toId: Int!, $chatbotId: String!)", "content": "{\n  user: mergeUser(fromId: $fromId, toId: $toId, chatbotId: $chatbotId) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email,\n    chatIds {\n      id,\n      transport,\n      chatId\n    }\n  }\n}"}, {"type": "query", "name": "($limit: Int, $offset: Int, $order: String, $username: String, $userId: String)", "content": "{\n  counters {\n    users {\n     count(username: $username, userId: $userId)\n    }\n  }\n  users(limit: $limit, offset: $offset, order: $order, username: $username, userId: $userId) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email,\n    chatIds {\n      id,\n      transport,\n      chatId\n    }\n  }\n}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n  deleteUser(id: $id) {\n    id\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $user: InputUser!)", "content": "{\n  editUser(id:$id, user: $user) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email\n  }\n}"}, {"type": "query", "name": "($limit: Int, $offset: Int, $order: String, $username: String, $userId: String, $chatbotId: String)", "content": "{\n  counters {\n    rows: users {\n     count(username: $username, userId: $userId, chatbotId: $chatbotId)\n    }\n  }\n  rows: users(limit: $limit, offset: $offset, order: $order, username: $username, userId: $userId, chatbotId: $chatbotId) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email,\n    chatIds {\n      id,\n      transport,\n      chatId\n    }\n  }\n}"}, {"type": "mutation", "name": "($message: InputMessage!)", "content": "{\n  message: createMessage(message: $message) {\n    id,\n    chatId,\n    user {\n      username,\n      userId,\n      first_name,\n      last_name,\n      username,\n      language,\n      payload,\n      createdAt,\n      email\n    }\n  }\n}"}, {"type": "mutation", "name": "($message: InputMessage!)", "content": "{\n  message: createMessage(message: $message) {\n    id,\n    chatId\n  }\n}"}, {"type": "mutation", "name": "($messageId: String, $message: InputMessage!)", "content": "{\n  editMessage(messageId: $messageId, message: $message) {\n    id,\n    flag,\n    content\n  }\n}"}, {"type": "query", "name": "(\n  $id: Int,\n  $slug: String,\n  $ids: [Int],\n  $slugs: [String],\n  $chatbotId: String\n)", "content": "{\n  contents(\n    id: $id,\n    slug: $slug,\n    ids: $ids,\n    slugs: $slugs,\n    chatbotId:\n    $chatbotId\n  ) {\n    id,\n    title,\n    slug,\n    language,\n    body,\n    categoryId,\n    payload,\n    json,\n    category {\n      id,\n      name\n    }\n  }\n}"}, {"type": "query", "name": "($userId: String, $chatbotId: String)", "content": "{\n  user(userId: $userId, chatbotId: $chatbotId) {\n    id,\n    userId,\n    payload\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $user: InputUser!)", "content": "{\n  editUser(id:$id, user: $user) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email\n  }\n}"}, {"type": "query", "name": "($chatId: String, $transport: String)", "content": "{\n  chatIds(chatId: $chatId, transport: $transport) {\n    transport,\n    user {\n      id,\n      username,\n      userId,\n      first_name,\n      last_name,\n      username,\n      language,\n      payload,\n      createdAt,\n      email,\n      chatIds {\n        chatId,\n        transport\n      }\n    }\n  }\n}"}, {"type": "query", "name": "", "content": "{\n\tchatbots {\n    id,\n    chatbotId,\n    name,\n    description,\n    guid,\n    plugins {\n      id,\n      plugin,\n      version,\n      filename\n    }\n  }\n}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n  user: deleteChatId(id: $id) {\n    id,\n    chatIds {\n      id,\n      transport,\n      chatId\n    }\n  }\n}"}, {"type": "query", "name": "(\n  $title: String,\n  $id: Int,\n  $slug: String,\n  $namespace: String,\n  $search: String,\n  $chatbotId: String\n)", "content": "{\n\tcontents(\n    title: $title,\n    id: $id,\n    slug: $slug,\n    namespace: $namespace,\n    search: $search,\n    chatbotId: $chatbotId\n  ) {\n    id,\n    title,\n    language,\n    slug\n  }\n}"}, {"type": "query", "name": "($id: Int)", "content": "{\n  categories {\n    id,\n    name\n  }\n  content(id: $id) {\n    id,\n    slug,\n    title,\n    body,\n    categoryId,\n    language,\n    createdAt,\n    payload,\n    category {\n      id,\n      name\n    }\n    fields {\n      id,\n      name,\n      value,\n      type\n    }\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $content: InputContent!)", "content": "{\n  editContent(id: $id, content: $content) {\n    id,\n    slug,\n    title,\n    body,\n    language,\n    payload,\n    fields {\n      id,\n      name,\n      value,\n      type\n    }\n  }\n}"}, {"type": "mutation", "name": "($content: InputContent!)", "content": "{\n  createContent(content: $content) {\n    id,\n    slug,\n    title,\n    body,\n    language,\n    payload,\n    fields {\n      id,\n      name,\n      value,\n      type\n    }\n  }\n}"}, {"type": "query", "name": "($offset: Int, $limit: Int, $order: String, $namespace: String)", "content": "{\n  categories(offset: $offset, limit: $limit, order: $order, namespace: $namespace) {\n    id,\n    name,\n    createdAt\n  }\n}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n  deleteContent(id: $id) {\n    id\n  }\n}"}, {"type": "query", "name": "(\n  $offset: Int,\n  $limit: Int,\n  $order: String,\n  $namespace: String,\n  $chatbotId: String\n)", "content": "{\n  counters {\n    categories {\n      count(namespace: $namespace, chatbotId: $chatbotId)\n    }\n  }\n  categories(\n    offset: $offset,\n    limit: $limit,\n    order: $order,\n    namespace: $namespace,\n    chatbotId: $chatbotId\n  ) {\n    id,\n    name,\n    createdAt,\n    chatbotId\n  }\n}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n  deleteCategory(id: $id) {\n    id\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $category: InputCategory!)", "content": "{\n  editCategory(id: $id, category: $category) {\n    id,\n    name\n  }\n}"}, {"type": "mutation", "name": "($category: InputCategory!)", "content": "{\n  createCategory(category: $category) {\n    id,\n    name\n  }\n}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n  deleteContent(id: $id) {\n    id\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $content: InputContent!)", "content": "{\n  editContent(id: $id, content: $content) {\n    id,\n    slug,\n    title,\n    body,\n    language,\n    payload,\n    fields {\n      id,\n      name,\n      value,\n      type\n    }\n  }\n}"}, {"type": "mutation", "name": "($content: InputContent!)", "content": "{\n  createContent(content: $content) {\n    id,\n    slug,\n    title,\n    body,\n    language,\n    payload,\n    fields {\n      id,\n      name,\n      value,\n      type\n    }\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $withId: Int!)", "content": "{\n  swapContent(id: $id, withId: $withId) {\n    id,\n    order\n  }\n}"}, {"type": "query", "name": "(\n  $offset: Int,\n  $limit: Int,\n  $order: String,\n  $categoryId: Int,\n  $slug: String,\n  $language: String,\n  $namespace: String,\n  $search: String,\n  $chatbotId: String\n)", "content": "{\n  counters {\n    rows: contents {\n     count(\n       categoryId: $categoryId,\n       slug: $slug,\n       language: $language,\n       namespace: $namespace,\n       search: $search,\n       chatbotId: $chatbotId\n      )\n    }\n  }\n  categories(namespace: $namespace, chatbotId: $chatbotId) {\n    id,\n    name\n  }\n  rows: contents(\n    offset: $offset,\n    limit: $limit,\n    order: $order,\n    categoryId: $categoryId,\n    slug: $slug,\n    language: $language,\n    namespace: $namespace,\n    search: $search,\n    chatbotId: $chatbotId\n  ) {\n    id,\n    slug,\n    title,\n    body,\n    categoryId,\n    language,\n    createdAt,\n    payload,\n    namespace,\n    chatbotId,\n    category {\n      id,\n      name\n    }\n\n  }\n}"}, {"type": "query", "name": "($namespace: String)", "content": "{\n  categories(namespace: $namespace) {\n    id,\n    name\n  }\n}"}, {"type": "query", "name": "($id: Int!)", "content": "{\n  content(id: $id) {\n    id,\n    slug,\n    title,\n    body,\n    categoryId,\n    language,\n    createdAt,\n    payload,\n    namespace,\n    category {\n      id,\n      name\n    }\n    fields {\n      id,\n      name,\n      value,\n      type\n    }\n  }\n}"}, {"type": "query", "name": "($id: Int!)", "content": "{\n  user(id: $id) {\n    id,\n    userId,\n    context\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $user: InputUser!)", "content": "{\n  editUser(id: $id, user: $user) {\n    id,\n    context\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $device: NewDevice!)", "content": "{\n  editDevice(id: $id, device: $device) {\n    id,\n    name,\n    payload,\n    createdAt,\n    updatedAt,\n    status,\n    lat,\n    lon,\n    jsonSchema,\n    version,\n    lastUpdate,\n    snapshot\n  }\n}"}, {"type": "query", "name": "", "content": "{\n  chatbots {\n    id,\n    name,\n    chatbotId\n  }\n}"}, {"type": "query", "name": "", "content": "{\n  queues {\n    name,\n    label\n  }\n}"}, {"type": "query", "name": "($userId: String!)", "content": "{\n  user(userId: $userId) {\n    id,\n    username,\n    first_name,\n    last_name,\n    userId\n  }\n}"}, {"type": "query", "name": "($id: Int,$username: String, $search: String, $chatbotId: String)", "content": "{\n  users(id: $id,username: $username, search: $search, chatbotId: $chatbotId) {\n    id,\n    userId,\n    chatbotId,\n    username,\n    language,\n    first_name,\n    last_name,\n    chatIds {\n      chatId,\n      transport\n    }\n  }\n}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n  deleteRecord(id: $id) {\n    id\n  }\n}"}, {"type": "query", "name": "($offset: Int, $limit: Int, $order: String, $type: String, $userId: String, $status: String)", "content": "{\n  counters {\n    rows: records {\n     count(type: $type, userId: $userId, status: $status)\n    }\n  }\n  rows: records(offset: $offset, limit: $limit, order: $order, type: $type, userId: $userId, status: $status) {\n    id,\n    createdAt,\n    title,\n    payload,\n    type,\n    status,\n    userId,\n    longitude,\n    latitude\n  }\n}"}, {"type": "query", "name": "($namespace: String, $chatbotId: String)", "content": "{\n  configurations(namespace: $namespace, chatbotId: $chatbotId) {\n    id\n    namespace\n    payload\n  }\n}"}, {"type": "mutation", "name": "($configuration: InputConfiguration!)", "content": "{\n  createConfiguration(configuration: $configuration) {\n    id,\n    namespace,\n    payload\n  }\n}"}, {"type": "query", "name": "($chatbotId: String)", "content": "{\n  chatbot(chatbotId: $chatbotId) {\n   \tid,\n    name,\n    description,\n    guid,\n    chatbotId,\n    plugins {\n      id,\n      plugin,\n      version,\n      filename\n    }\n  }\n}"}, {"type": "mutation", "name": "createVideos(\n        $name: String!\n        $link: String!\n        $moderatorNotes: String\n    )", "content": "{\n        createVideos(\n            name: $name\n            link: $link\n            moderatorNotes: $moderatorNotes\n        ) {\n            id\n            name\n        }\n    }"}, {"type": "query", "name": "allVideos(\n        $first: Int\n        $after: String\n        $search: String\n        $duration: Int\n        $year: Int\n        $order: VideosOrderBy\n    )", "content": "{\n        allVideoses(\n            first: $first\n            after: $after\n            orderBy: $order\n            filter: {\n                AND: [\n                    {\n                        OR: [\n                            { link_contains: $search }\n                            { name_contains: $search }\n                            { tags_some: { name_contains: $search } }\n                            { speaker_some: { name_contains: $search } }\n                        ]\n                    }\n                    {\n                        AND: [\n                            { isPublished: true }\n                            { duration_lte: $duration }\n                            { year: $year }\n                        ]\n                    }\n                ]\n            }\n        ) {\n            ...VideoData\n        }\n    }\n    ${VideoData}"}, {"type": "query", "name": "allVideos($search: String)", "content": "{\n        _allVideosesMeta(\n            filter: { isPublished: true, name_contains: $search }\n        ) {\n            count\n        }\n    }"}, {"type": "query", "name": "speakerVideos", "content": "{\n        allVideoses(orderBy: createdAt_DESC, filter: { isPublished: false }) {\n            id\n            speaker {\n                name\n            }\n            description\n            link\n            name\n            tags {\n                name\n                id\n            }\n        }\n    }"}, {"type": "query", "name": "getVideos($ids: [ID!])", "content": "{\n        allVideoses(filter: { id_in: $ids }) {\n            ...VideoData\n        }\n    }\n    ${VideoData}"}, {"type": "query", "name": "speakerVideos($name: String)", "content": "{\n        allSpeakerses(filter: { name: $name }) {\n            id\n            name\n            twitter\n            bio\n            photo {\n                url\n            }\n            videoses {\n                id\n                description\n                speaker {\n                    name\n                }\n                duration\n                link\n                name\n                tags {\n                    name\n                    id\n                }\n            }\n        }\n    }"}, {"type": "query", "name": "tagVideosw($name: String)", "content": "{\n        allTagses(filter: { name: $name }) {\n            id\n            name\n            videos {\n                id\n                description\n                link\n                duration\n                name\n                speaker {\n                    name\n                }\n                tags {\n                    name\n                    id\n                }\n                speaker {\n                    name\n                }\n            }\n        }\n    }"}, {"type": "query", "name": "Video($id: ID!)", "content": "{\n        allVideoses(filter: { id: $id }) {\n            ...VideoData\n            speaker {\n                id\n                name\n                bio\n                twitter\n                photo {\n                    url\n                }\n                videoses {\n                    id\n                    description\n                    link\n                    name\n                    duration\n                    year\n                    tags {\n                        name\n                        id\n                    }\n                }\n            }\n        }\n    }\n    ${VideoData}"}, {"type": "mutation", "name": "addFavorite($id: String!)", "content": "{\n        addFavorite(id: $id) @client\n    }"}, {"type": "mutation", "name": "addWatched($id: String!)", "content": "{\n        addWatched(id: $id) @client\n    }"}, {"type": "query", "name": "GetFavorites", "content": "{\n        favorites @client\n    }"}, {"type": "query", "name": "GetSearch", "content": "{\n        search @client\n    }"}, {"type": "query", "name": "GetWatched", "content": "{\n        watched @client\n    }"}, {"type": "query", "name": "GetSpeakersSearch", "content": "{\n        searchSpeakers @client\n    }"}, {"type": "query", "name": "GetTagsSearch", "content": "{\n        searchTags @client\n    }"}, {"type": "mutation", "name": "removeFavorite($id: String!)", "content": "{\n        removeFavorite(id: $id) @client\n    }"}, {"type": "mutation", "name": "removeWatched($id: String!)", "content": "{\n        removeWatched(id: $id) @client\n    }"}, {"type": "mutation", "name": "switchMode($id: String!)", "content": "{\n        switchMode(id: $id) @client\n    }"}, {"type": "query", "name": "GetMode", "content": "{\n        mode @client\n    }"}, {"type": "query", "name": "GetFavorites", "content": "{\n        favorites @client\n    }"}, {"type": "query", "name": "GetWatched", "content": "{\n        watched @client\n    }"}, {"type": "query", "name": "GetMode", "content": "{\n                        mode @client\n                    }"}, {"type": "query", "name": "GetFavorites", "content": "{\n                        favorites @client\n                    }"}, {"type": "query", "name": "GetFavorites", "content": "{\n                        favorites @client\n                    }"}, {"type": "query", "name": "GetWatched", "content": "{\n                        watched @client\n                    }"}, {"type": "query", "name": "GetWatched", "content": "{\n                        watched @client\n                    }"}, {"type": "query", "name": "", "content": "{\n    findAllTodos {\n      id\n      title\n      description\n      version\n      completed\n    }\n  }"}, {"type": "mutation", "name": "createTodo($description: String, $title: String, $version: Int!, $completed: Boolean)", "content": "{\n    createTodo(input: {title: $title, description: $description, version: $version, completed: $completed}) {\n      id\n      title\n      description\n      version\n      completed\n    }\n  }"}, {"type": "mutation", "name": "updateTodo($id: ID!, $description: String, $title: String, $version: Int!, $completed: Boolean)", "content": "{\n    updateTodo(input: { id: $id, title: $title, description: $description, version: $version, completed: $completed}) {\n      id\n      title\n      description\n      version\n      completed\n    }\n  }"}, {"type": "mutation", "name": "deleteTodo($id: ID!)", "content": "{\n    deleteTodo(input: { id: $id }) {\n      id  \n    }\n  }"}, {"type": "subscription", "name": "newTodo", "content": "{\n    newTodo {\n      id\n      title\n      description\n      version\n      completed\n    }\n  }"}, {"type": "subscription", "name": "updatedTodo", "content": "{\n    updatedTodo {\n      id\n      title\n      description\n      version\n      completed\n    }\n  }"}, {"type": "subscription", "name": "deletedTodo", "content": "{\n    deletedTodo {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdatePhoto(\n        $input: UpdatePhotoInput!\n        $condition: ModelPhotoConditionInput\n    )", "content": "{\n        updatePhoto(input: $input, condition: $condition) {\n            id\n            albumId\n            owner\n            uploadTime\n            bucket\n            SfnExecutionArn\n            ProcessingStatus\n        }\n    }"}, {"type": "mutation", "name": "StartSfnExecution(\n        $input: StartSfnExecutionInput!\n    )", "content": "{\n        startSfnExecution(input: $input) {\n            executionArn\n            startDate\n        }\n    }"}, {"type": "mutation", "name": "CreatePhoto(\n          $input: CreatePhotoInput!\n          $condition: ModelPhotoConditionInput\n      )", "content": "{\n          createPhoto(input: $input, condition: $condition) {\n              id\n              albumId\n              owner\n              bucket\n              fullsize {\n                  key\n                  width\n                  height\n              }\n              thumbnail {\n                  key\n                  width\n                  height\n              }\n              album {\n                  id\n                  name\n                  owner\n              }\n          }\n      }"}, {"type": "mutation", "name": "UpdatePhoto(\n        $input: UpdatePhotoInput!\n        $condition: ModelPhotoConditionInput\n    )", "content": "{\n        updatePhoto(input: $input, condition: $condition) {\n            id\n            albumId\n            uploadTime\n            bucket\n            fullsize {\n                key\n                width\n                height\n            }\n            thumbnail {\n                key\n                width\n                height\n            }\n            format\n            exifMake\n            exitModel\n            objectDetected\n            SfnExecutionArn\n            ProcessingStatus\n            geoLocation {\n                Latitude {\n                    D\n                    M\n                    S\n                    Direction\n                }\n                Longtitude {\n                    D\n                    M\n                    S\n                    Direction\n                }\n            }\n            owner\n        }\n    }"}, {"type": "query", "name": "IdentityQuery($account: ID!)", "content": "{\n    web3 {\n      account(id: $account) {\n        id\n        identity {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "MetaMaskEnabled", "content": "{\n    web3 {\n      metaMaskAvailable\n      metaMaskEnabled\n      metaMaskNetworkId\n      useMetaMask\n      networkId\n      metaMaskAccount {\n        id\n      }\n    }\n  }"}, {"type": "mutation", "name": "ToggleMetaMask($enabled: Boolean)", "content": "{\n    toggleMetaMask(enabled: $enabled)\n  }"}, {"type": "query", "name": "AllAccounts", "content": "{\n    web3 {\n      accounts {\n        id\n        role\n        name\n      }\n      useMetaMask\n      metaMaskAccount {\n        id\n        role\n        name\n      }\n    }\n  }"}, {"type": "query", "name": "AccountTokenBalance($account: ID!, $token: String!)", "content": "{\n    web3 {\n      account(id: $account) {\n        id\n        token(symbol: $token) {\n          id\n          balance\n          token {\n            id\n            decimals\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "TokenPrice($id: String!)", "content": "{\n    token(id: $id) {\n      symbol\n      decimals\n    }\n  }"}, {"type": "query", "name": "AccountsWithAllowance($marketplace: String)", "content": "{\n    web3 {\n      accounts {\n        id\n        role\n        name\n        ogn: token(symbol: \"OGN\") {\n          id\n          balance\n          allowance(contract: $marketplace)\n        }\n      }\n      useMetaMask\n      metaMaskAccount {\n        id\n        role\n        name\n      }\n    }\n  }"}, {"type": "query", "name": "AllAccounts", "content": "{\n    web3 {\n      accounts {\n        id\n        role\n        name\n      }\n      useMetaMask\n      metaMaskAccount {\n        id\n        role\n        name\n      }\n    }\n  }"}, {"type": "query", "name": "GetCurrencies", "content": "{\n    currencies {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        decimals\n      }\n    }\n  }"}, {"type": "query", "name": "GetTokens", "content": "{\n    tokens {\n      id\n      code\n    }\n  }"}, {"type": "subscription", "name": "onNewBlock", "content": "{\n    newBlock {\n      id\n    }\n  }"}, {"type": "mutation", "name": "SetNetwork($network: String, $customConfig: ConfigInput)", "content": "{\n    setNetwork(network: $network, customConfig: $customConfig)\n  }"}, {"type": "query", "name": "Config", "content": "{\n    config\n    configObj {\n      proxyAccountsEnabled\n      relayerEnabled\n      performanceMode\n    }\n  }"}, {"type": "subscription", "name": "onTransactionUpdated", "content": "{\n    transactionUpdated {\n      id\n      status\n      mutation\n      confirmations\n    }\n  }"}, {"type": "query", "name": "Identity($id: ID!)", "content": "{\n    identity(id: $id) {\n      id\n      firstName\n      lastName\n      description\n      avatar\n      ipfsHash\n\n      verifiedAttestations {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "Conversations($id: String)", "content": "{\n    messaging(id: $id) {\n      enabled\n      conversations {\n        id\n        timestamp\n        messages {\n          address\n          content\n          timestamp\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "EnableMessaging", "content": "{\n    enableMessaging\n  }"}, {"type": "mutation", "name": "SendMessage($to: String!, $content: String!)", "content": "{\n    sendMessage(to: $to, content: $content)\n  }"}, {"type": "mutation", "name": "SetNetwork($network: String, $customConfig: ConfigInput)", "content": "{\n    setNetwork(network: $network, customConfig: $customConfig)\n  }"}, {"type": "mutation", "name": "RemoveWallet($address: String!)", "content": "{\n    removeWallet(address: $address)\n  }"}, {"type": "mutation", "name": "SetActiveWallet($address: String!)", "content": "{\n    setActiveWallet(address: $address) {\n      ...balanceFields\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "mutation", "name": "TransferToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    transferToken(token: $token, from: $from, to: $to, value: $value) {\n      to {\n        id\n        balance\n      }\n      from {\n        id\n        balance\n      }\n    }\n  }"}, {"type": "query", "name": "User($id: ID!)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        account {\n          id\n          identity {\n            id\n            firstName\n            lastName\n            description\n            avatar\n\n            verifiedAttestations {\n              id\n              properties {\n                type\n                value\n              }\n            }\n          }\n        }\n        listings {\n          totalCount\n        }\n        offers {\n          totalCount\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Users($first: Int, $after: String, $sort: String)", "content": "{\n    marketplace {\n      users(first: $first, after: $after, sort: $sort) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          endCursor\n        }\n        nodes {\n          id\n          account {\n            id\n            owner {\n              id\n            }\n          }\n          firstEvent {\n            id\n            timestamp\n          }\n          lastEvent {\n            id\n            timestamp\n          }\n          offers {\n            totalCount\n          }\n          listings {\n            totalCount\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "AllAccounts", "content": "{\n    web3 {\n      defaultAccount {\n        ...balanceFields\n      }\n      nodeAccounts {\n        ...balanceFields\n      }\n      accounts {\n        ...balanceFields\n      }\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "query", "name": "AllContracts", "content": "{\n    marketplaces {\n      address\n      totalListings\n      version\n      token {\n        id\n      }\n      owner {\n        id\n      }\n    }\n    tokens {\n      id\n      code\n      address\n      name\n      decimals\n      totalSupply\n    }\n    identityEvents {\n      id\n    }\n  }"}, {"type": "query", "name": "AllEvents($offset: Int, $limit: Int)", "content": "{\n    marketplace {\n      totalEvents\n      events(offset: $offset, limit: $limit) {\n        id\n        event\n        blockNumber\n        block {\n          id\n          timestamp\n        }\n        returnValues {\n          ipfsHash\n          party\n          offerID\n          listingID\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "AllListings(\n    $first: Int\n    $after: String\n    $sort: String\n    $search: String\n  )", "content": "{\n    marketplace {\n      listings(first: $first, after: $after, sort: $sort, search: $search) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          endCursor\n        }\n        nodes {\n          ...basicListingFields\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "query", "name": "Identities($first: Int, $after: String, $sort: String)", "content": "{\n    identityEvents {\n      id\n      identities(first: $first, after: $after, sort: $sort) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          endCursor\n        }\n        nodes {\n          id\n          fullName\n          owner {\n            id\n            owner {\n              id\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Listing($listingId: ID!)", "content": "{\n    marketplace {\n      listing(id: $listingId) {\n        ...basicListingFields\n        ... on Listing {\n          allOffers {\n            ...basicOfferFields\n          }\n          events {\n            id\n            event\n            blockNumber\n            block {\n              id\n              timestamp\n            }\n            returnValues {\n              ipfsHash\n              party\n              offerID\n              listingID\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "mutation", "name": "Refetch", "content": "{\n    refetch\n  }"}, {"type": "mutation", "name": "AddAffiliate($affiliate: String, $from: String)", "content": "{\n    addAffiliate(affiliate: $affiliate, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "CreateWallet($role: String, $name: String)", "content": "{\n    createWallet(role: $role, name: $name) {\n      ...balanceFields\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "mutation", "name": "ImportWallet($role: String, $name: String, $privateKey: String!)", "content": "{\n    importWallet(role: $role, name: $name, privateKey: $privateKey) {\n      ...balanceFields\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "mutation", "name": "ImportWallets($accounts: [WalletInput]!)", "content": "{\n    importWallets(accounts: $accounts) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployToken(\n    $name: String\n    $symbol: String\n    $decimals: String\n    $supply: String\n    $type: String\n    $from: String\n  )", "content": "{\n    deployToken(\n      name: $name\n      symbol: $symbol\n      decimals: $decimals\n      supply: $supply\n      type: $type\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "SendFromNode($from: String, $to: String, $value: String)", "content": "{\n    sendFromNode(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "SendFromWallet($from: String, $to: String, $value: String)", "content": "{\n    sendFromWallet(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "TransferToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    transferToken(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    updateTokenAllowance(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployMarketplace(\n    $from: String\n    $token: String!\n    $version: String!\n    $autoWhitelist: Boolean\n  )", "content": "{\n    deployMarketplace(\n      from: $from\n      token: $token\n      version: $version\n      autoWhitelist: $autoWhitelist\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentityContract($from: String!, $contract: String!)", "content": "{\n    deployIdentityContract(from: $from, contract: $contract) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentityEventsContract($from: String!)", "content": "{\n    deployIdentityEvents(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "CreateListing(\n    $from: String!\n    $deposit: String\n    $depositManager: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n    createListing(\n      from: $from\n      deposit: $deposit\n      depositManager: $depositManager\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateListing(\n    $listingID: ID!\n    $from: String!\n    $additionalDeposit: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n    updateListing(\n      listingID: $listingID\n      from: $from\n      additionalDeposit: $additionalDeposit\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawListing(\n    $listingID: String!\n    $target: String!\n    $reason: String\n    $from: String\n  )", "content": "{\n    withdrawListing(\n      listingID: $listingID\n      target: $target\n      reason: $reason\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "MakeOffer(\n    $listingID: String\n    $finalizes: Int\n    $affiliate: String\n    $commission: String\n    $value: String\n    $currency: String\n    $arbitrator: String\n    $data: MakeOfferInput\n    $from: String\n    $withdraw: String\n    $quantity: Int\n  )", "content": "{\n    makeOffer(\n      listingID: $listingID\n      finalizes: $finalizes\n      affiliate: $affiliate\n      commission: $commission\n      value: $value\n      currency: $currency\n      arbitrator: $arbitrator\n      data: $data\n      from: $from\n      withdraw: $withdraw\n      quantity: $quantity\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AcceptOffer($offerID: String!, $from: String)", "content": "{\n    acceptOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AddFunds($offerID: String!, $amount: String!, $from: String)", "content": "{\n    addFunds(offerID: $offerID, amount: $amount, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateRefundMutation(\n    $offerID: String!\n    $amount: String!\n    $from: String\n  )", "content": "{\n    updateRefund(offerID: $offerID, amount: $amount, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "ExecuteRulingMutation(\n    $offerID: String!\n    $ruling: String!\n    $commission: String!\n    $message: String\n    $refund: String\n    $from: String\n  )", "content": "{\n    executeRuling(\n      offerID: $offerID\n      amount: $amount\n      ruling: $ruling\n      commission: $commission\n      message: $message\n      refund: $refund\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "FinalizeOffer($offerID: String!, $from: String)", "content": "{\n    finalizeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DisputeOffer($offerID: String, $from: String)", "content": "{\n    disputeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawOffer($offerID: String, $from: String)", "content": "{\n    withdrawOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawListing(\n    $data: String!\n    $from: String!\n    $listingID: String\n    $offerID: String\n  )", "content": "{\n    addData(\n      data: $data\n      listingID: $listingID\n      offerID: $offerID\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentity(\n    $from: String!\n    $profile: ProfileInput\n    $attestations: [String]\n  )", "content": "{\n    deployIdentity(\n      from: $from\n      attestations: $attestations\n      profile: $profile\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UniswapDeployFactory($from: String!)", "content": "{\n    uniswapDeployFactory(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UniswapExchangeTemplate($from: String!)", "content": "{\n    uniswapDeployExchangeTemplate(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UniswapInitFactory($from: String!)", "content": "{\n    uniswapInitializeFactory(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UniswapCreateExchange($from: String!, $tokenAddress: String!)", "content": "{\n    uniswapCreateExchange(from: $from, tokenAddress: $tokenAddress) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UniswapAddLiquidity(\n    $from: String!\n    $exchange: String!\n    $value: String!\n    $tokens: String!\n    $liquidity: String!\n  )", "content": "{\n    uniswapAddLiquidity(\n      from: $from\n      exchange: $exchange\n      value: $value\n      tokens: $tokens\n      liquidity: $liquidity\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentityViaProxy(\n    $from: String!\n    $factoryAddress: String\n    $proxyAddress: String\n    $owner: String!\n  )", "content": "{\n    deployIdentityViaProxy(\n      from: $from\n      factoryAddress: $factoryAddress\n      proxyAddress: $proxyAddress\n      owner: $owner\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "SignMessage($address: ID!, $message: String!)", "content": "{\n    signMessage(address: $address, message: $message)\n  }"}, {"type": "query", "name": "Network", "content": "{\n    web3 {\n      networkId\n      networkName\n    }\n  }"}, {"type": "query", "name": "UserListings($id: ID!, $first: Int, $after: String)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        listings(first: $first, after: $after) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            ...basicListingFields\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "query", "name": "UserOffers($id: ID!, $first: Int, $after: String)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        offers(first: $first, after: $after) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            id\n            listingId\n            offerId\n            listing {\n              id\n              title\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Users($first: Int, $after: String, $sort: String)", "content": "{\n    marketplace {\n      users(first: $first, after: $after, sort: $sort) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          endCursor\n        }\n        nodes {\n          id\n          firstEvent {\n            id\n            timestamp\n          }\n          lastEvent {\n            id\n            timestamp\n          }\n          offers {\n            totalCount\n          }\n          listings {\n            totalCount\n          }\n          account {\n            id\n            owner {\n              id\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "MakeOffer($listingID: String!, $value: String!, $from: String)", "content": "{\n    makeOffer(listingID: $listingID, value: $value, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "Refetch", "content": "{\n    refetch\n  }"}, {"type": "mutation", "name": "AddAffiliate($affiliate: String, $from: String)", "content": "{\n    addAffiliate(affiliate: $affiliate, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "CreateWallet($role: String, $name: String)", "content": "{\n    createWallet(role: $role, name: $name) {\n      ...balanceFields\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "mutation", "name": "ImportWallet($role: String, $name: String, $privateKey: String!)", "content": "{\n    importWallet(role: $role, name: $name, privateKey: $privateKey) {\n      ...balanceFields\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "mutation", "name": "ImportWallets($accounts: [WalletInput]!)", "content": "{\n    importWallets(accounts: $accounts)\n  }"}, {"type": "mutation", "name": "DeployToken(\n    $name: String\n    $symbol: String\n    $decimals: String\n    $supply: String\n    $type: String\n    $from: String\n  )", "content": "{\n    deployToken(\n      name: $name\n      symbol: $symbol\n      decimals: $decimals\n      supply: $supply\n      type: $type\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "SendFromNode($from: String, $to: String, $value: String)", "content": "{\n    sendFromNode(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "SendFromWallet($from: String, $to: String, $value: String)", "content": "{\n    sendFromWallet(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "TransferToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    transferToken(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    updateTokenAllowance(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployMarketplace(\n    $from: String\n    $token: String\n    $version: String\n    $autoWhitelist: Boolean\n  )", "content": "{\n    deployMarketplace(\n      from: $from\n      token: $token\n      version: $version\n      autoWhitelist: $autoWhitelist\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "CreateListing(\n    $deposit: String\n    $depositManager: String\n    $from: String\n    $data: NewListingInput\n    $autoApprove: Boolean\n  )", "content": "{\n    createListing(\n      deposit: $deposit\n      depositManager: $depositManager\n      from: $from\n      data: $data\n      autoApprove: $autoApprove\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateListing(\n    $listingID: String!\n    $additionalDeposit: String\n    $from: String\n    $data: NewListingInput\n    $autoApprove: Boolean\n  )", "content": "{\n    updateListing(\n      listingID: $listingID\n      additionalDeposit: $additionalDeposit\n      from: $from\n      data: $data\n      autoApprove: $autoApprove\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawListing(\n    $listingID: String!\n    $target: String!\n    $reason: String\n    $from: String\n  )", "content": "{\n    withdrawListing(\n      listingID: $listingID\n      target: $target\n      reason: $reason\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "MakeOffer(\n    $listingID: String\n    $finalizes: Int\n    $affiliate: String\n    $commission: String\n    $value: String\n    $currency: String\n    $arbitrator: String\n    $data: MakeOfferInput\n    $from: String\n    $withdraw: String\n    $quantity: Int\n  )", "content": "{\n    makeOffer(\n      listingID: $listingID\n      finalizes: $finalizes\n      affiliate: $affiliate\n      commission: $commission\n      value: $value\n      currency: $currency\n      arbitrator: $arbitrator\n      data: $data\n      from: $from\n      withdraw: $withdraw\n      quantity: $quantity\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AcceptOffer($offerID: String!, $from: String)", "content": "{\n    acceptOffer(offerID: $offerID, from: $from)\n  }"}, {"type": "mutation", "name": "AddFunds($offerID: String!, $amount: String!, $from: String)", "content": "{\n    addFunds(offerID: $offerID, amount: $amount, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateRefundMutation(\n    $offerID: String!\n    $amount: String!\n    $from: String\n  )", "content": "{\n    updateRefund(offerID: $offerID, amount: $amount, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "ExecuteRulingMutation(\n    $offerID: String!\n    $ruling: String!\n    $commission: String!\n    $message: String\n    $refund: String\n    $from: String\n  )", "content": "{\n    executeRuling(\n      offerID: $offerID\n      amount: $amount\n      ruling: $ruling\n      commission: $commission\n      message: $message\n      refund: $refund\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "FinalizeOffer($offerID: String!, $from: String)", "content": "{\n    finalizeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DisputeOffer($offerID: String, $from: String)", "content": "{\n    disputeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawOffer($offerID: String, $from: String)", "content": "{\n    withdrawOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawListing(\n    $data: String!\n    $from: String!\n    $listingID: String\n    $offerID: String\n  )", "content": "{\n    addData(\n      data: $data\n      listingID: $listingID\n      offerID: $offerID\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "WalletStatus", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n    }\n    messaging(id: \"defaultAccount\") {\n      id\n      pubKey\n      pubSig\n      enabled\n      synced\n      syncProgress\n    }\n  }"}, {"type": "query", "name": "Config", "content": "{\n    config\n  }"}, {"type": "query", "name": "GetCurrencies", "content": "{\n    currencies {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        decimals\n      }\n    }\n  }"}, {"type": "query", "name": "GetCurrencyBalances(\n    $tokens: [String]\n    $account: String!\n    $proxy: String!\n    $useProxy: Boolean!\n    $target: String!\n  )", "content": "{\n    currencies(tokens: $tokens) {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        id\n        decimals\n        balance(address: $account)\n        allowance(address: $account, target: $target)\n      }\n    }\n    proxyCurrencies: currencies(tokens: $tokens) @include(if: $useProxy) {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        id\n        decimals\n        balance(address: $proxy)\n        allowance(address: $account, target: $proxy)\n      }\n    }\n  }"}, {"type": "query", "name": "GetTokens", "content": "{\n    tokens {\n      id\n      symbol\n    }\n  }"}, {"type": "query", "name": "GetWalletBalances($tokens: [String], $account: String!)", "content": "{\n    currencies(tokens: $tokens) {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        id\n        decimals\n        balance(address: $account, format: true)\n      }\n    }\n  }"}, {"type": "mutation", "name": "AcceptOffer($offerID: String!, $from: String)", "content": "{\n    acceptOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AddData(\n    $data: String!\n    $from: String!\n    $listingID: String\n    $offerID: String\n  )", "content": "{\n    addData(\n      data: $data\n      listingID: $listingID\n      offerID: $offerID\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AllowToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    updateTokenAllowance(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "CreateListing(\n    $from: String!\n    $deposit: String\n    $depositManager: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n    $version: String\n  )", "content": "{\n    createListing(\n      from: $from\n      deposit: $deposit\n      depositManager: $depositManager\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n      version: $version\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentity(\n    $from: String!\n    $profile: ProfileInput\n    $attestations: [String]\n  )", "content": "{\n    deployIdentity(\n      from: $from\n      attestations: $attestations\n      profile: $profile\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentityViaProxy($from: String!, $owner: String!)", "content": "{\n    deployIdentityViaProxy(from: $from, owner: $owner) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DisputeOffer($offerID: String!, $from: String)", "content": "{\n    disputeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "EnableMessaging", "content": "{\n    enableMessaging\n  }"}, {"type": "mutation", "name": "FinalizeOffer(\n    $offerID: String!\n    $from: String\n    $rating: Int\n    $review: String\n  )", "content": "{\n    finalizeOffer(\n      offerID: $offerID\n      from: $from\n      rating: $rating\n      review: $review\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "GenerateAirbnbCode($identity: String!, $airbnbUserId: String!)", "content": "{\n    generateAirbnbCode(identity: $identity, airbnbUserId: $airbnbUserId) {\n      success\n      reason\n      code\n    }\n  }"}, {"type": "mutation", "name": "GenerateEmailCode($email: String!)", "content": "{\n    generateEmailCode(email: $email) {\n      success\n      reason\n    }\n  }"}, {"type": "mutation", "name": "GeneratePhoneCode(\n    $prefix: String!\n    $method: String\n    $phone: String!\n  )", "content": "{\n    generatePhoneCode(prefix: $prefix, method: $method, phone: $phone) {\n      success\n      reason\n    }\n  }"}, {"type": "mutation", "name": "GenerateTelegramCode($identity: String!)", "content": "{\n    generateTelegramCode(identity: $identity) {\n      success\n      reason\n      code\n    }\n  }"}, {"type": "mutation", "name": "GenerateWebsiteCode($identity: String!, $website: String!)", "content": "{\n    generateWebsiteCode(identity: $identity, website: $website) {\n      success\n      reason\n      code\n    }\n  }"}, {"type": "mutation", "name": "Enroll(\n    $agreementMessage: String!\n    $inviteCode: String\n    $fingerprintData: JSON\n  )", "content": "{\n    enroll(\n      agreementMessage: $agreementMessage\n      inviteCode: $inviteCode\n      fingerprintData: $fingerprintData\n    ) {\n      authToken\n      isBanned\n    }\n  }"}, {"type": "mutation", "name": "invite($emails: [String!]!)", "content": "{\n    invite(emails: $emails)\n  }"}, {"type": "mutation", "name": "inviteRemind($invitationId: Int!)", "content": "{\n    inviteRemind(invitationId: $invitationId)\n  }"}, {"type": "mutation", "name": "LogSocialFollow($actionType: GrowthActionType!)", "content": "{\n    logSocialFollow(actionType: $actionType)\n  }"}, {"type": "mutation", "name": "LogSocialShare($contentId: String!, $actionType: GrowthActionType!)", "content": "{\n    logSocialShare(contentId: $contentId, actionType: $actionType)\n  }"}, {"type": "mutation", "name": "Login($wallet: String!)", "content": "{\n    login(wallet: $wallet) {\n      success\n      reason\n    }\n  }"}, {"type": "mutation", "name": "Logout($wallet: String!)", "content": "{\n    logout(wallet: $wallet) {\n      success\n      reason\n    }\n  }"}, {"type": "mutation", "name": "MakeOffer(\n    $listingID: String!\n    $value: String!\n    $from: String\n    $quantity: Int!\n    $currency: String\n    $fractionalData: FractionalOfferInput\n    $shippingAddress: ShippingAddressInput\n    $autoswap: Boolean\n    $commission: String\n  )", "content": "{\n    makeOffer(\n      listingID: $listingID\n      value: $value\n      from: $from\n      quantity: $quantity\n      currency: $currency\n      fractionalData: $fractionalData\n      shippingAddress: $shippingAddress\n      autoswap: $autoswap\n      commission: $commission\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "MarkConversationRead($id: String!)", "content": "{\n    markConversationRead(id: $id) {\n      success\n      messagesRead\n    }\n  }"}, {"type": "mutation", "name": "SendMessage($to: String!, $content: String, $media: [MediaInput])", "content": "{\n    sendMessage(to: $to, content: $content, media: $media) {\n      success\n      error\n      conversation {\n        id\n      }\n    }\n  }"}, {"type": "mutation", "name": "SetNetwork($network: String!, $customConfig: ConfigInput)", "content": "{\n    setNetwork(network: $network, customConfig: $customConfig)\n  }"}, {"type": "mutation", "name": "SignMessage($address: ID!, $message: String!)", "content": "{\n    signMessage(address: $address, message: $message)\n  }"}, {"type": "mutation", "name": "SwapToToken($from: String!, $token: String!, $tokenValue: String!)", "content": "{\n    swapToToken(from: $from, token: $token, tokenValue: $tokenValue) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UnlinkMobileWallet", "content": "{\n    unlinkMobileWallet\n  }"}, {"type": "mutation", "name": "UpdateIdentity(\n    $from: String!\n    $identity: String!\n    $profile: ProfileInput\n    $attestations: [AttestationInput]\n  )", "content": "{\n    updateIdentity(\n      from: $from\n      identity: $identity\n      attestations: $attestations\n      profile: $profile\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateListing(\n    $listingID: ID!\n    $from: String!\n    $additionalDeposit: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n    updateListing(\n      listingID: $listingID\n      from: $from\n      additionalDeposit: $additionalDeposit\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "VerifyAirbnbCode($identity: String!, $airbnbUserId: String!)", "content": "{\n    verifyAirbnbCode(identity: $identity, airbnbUserId: $airbnbUserId) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "mutation", "name": "VerifyEmailCode(\n    $identity: String!\n    $email: String!\n    $code: String!\n  )", "content": "{\n    verifyEmailCode(identity: $identity, email: $email, code: $code) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "mutation", "name": "VerifyOAuthAttestation(\n    $provider: String!\n    $identity: String!\n    $authUrl: String\n    $redirect: String\n    $code: String\n  )", "content": "{\n    verifyOAuthAttestation(\n      provider: $provider\n      identity: $identity\n      authUrl: $authUrl\n      redirect: $redirect\n      code: $code\n    ) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "mutation", "name": "VerifyPhoneCode(\n    $identity: String!\n    $prefix: String!\n    $phone: String!\n    $code: String!\n  )", "content": "{\n    verifyPhoneCode(\n      identity: $identity\n      prefix: $prefix\n      phone: $phone\n      code: $code\n    ) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "mutation", "name": "VerifyPromotion(\n    $identity: String!\n    $identityProxy: String\n    $type: String\n    $socialNetwork: String\n    $content: String\n  )", "content": "{\n    verifyPromotion(\n      identity: $identity\n      identityProxy: $identityProxy\n      type: $type\n      socialNetwork: $socialNetwork\n      content: $content\n    ) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "mutation", "name": "VerifyWebsite($identity: String!, $website: String!)", "content": "{\n    verifyWebsite(identity: $identity, website: $website) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "mutation", "name": "WithdrawDust($from: String, $currency: String!, $amount: String!)", "content": "{\n    withdrawDust(amount: $amount, from: $from, currency: $currency) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawListing(\n    $listingID: String!\n    $target: String!\n    $from: String\n  )", "content": "{\n    withdrawListing(listingID: $listingID, target: $target, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawOffer($offerID: String!, $from: String)", "content": "{\n    withdrawOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "enableMessaging", "content": "{\n    enableMessaging\n  }"}, {"type": "query", "name": "WalletStatus", "content": "{\n    web3 {\n      networkId\n      networkName\n      metaMaskEnabled\n      metaMaskAvailable\n      metaMaskApproved\n      metaMaskUnlocked\n      metaMaskNetworkId\n      metaMaskNetworkName\n      metaMaskAccount {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "Config", "content": "{\n    config\n  }"}, {"type": "query", "name": "AccountBalance($id: ID!)", "content": "{\n    web3 {\n      account(id: $id) {\n        id\n        balance {\n          eth\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GrowthCampaigns($id: String = \"active\")", "content": "{\n    campaign(id: $id) {\n      ...basicCampaignFields\n    }\n  }\n  ${fragments.GrowthCampaign.basic}"}, {"type": "query", "name": "AllContracts", "content": "{\n    marketplaces {\n      address\n      totalListings\n      version\n      token {\n        id\n      }\n      owner {\n        id\n      }\n    }\n    tokens {\n      id\n      symbol\n      address\n      name\n      decimals\n      totalSupply\n    }\n    userRegistry {\n      id\n    }\n  }"}, {"type": "query", "name": "GrowthCampaigns($first: Int, $after: String)", "content": "{\n    campaigns(first: $first, after: $after) {\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      nodes {\n        ...basicCampaignFields\n      }\n    }\n  }\n  ${fragments.GrowthCampaign.basic}"}, {"type": "query", "name": "AttestationProviders", "content": "{\n    identityEvents {\n      attestationProviders\n    }\n  }"}, {"type": "query", "name": "Auth($wallet: String!)", "content": "{\n    isLoggedIn(wallet: $wallet)\n  }"}, {"type": "query", "name": "EthBalance", "content": "{\n    web3 {\n      primaryAccount {\n        id\n        balance {\n          eth\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "CanBuy", "content": "{\n    web3 {\n      networkId\n      networkName\n      metaMaskNetworkId\n      metaMaskNetworkName\n      metaMaskAccount {\n        id\n        balance {\n          eth\n        }\n      }\n      walletType\n      primaryAccount {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "CanConverseWith($account: String!)", "content": "{\n    messaging(id: \"defaultAccount\") {\n      id\n      enabled\n      isKeysLoading\n      canConverseWith(id: $account)\n      forwardTo(id: $account)\n    }\n  }"}, {"type": "query", "name": "CheckTelegramStatus($identity: String!, $maxTries: Int)", "content": "{\n    checkTelegramStatus(identity: $identity, maxTries: $maxTries) {\n      success\n      reason\n      data {\n        attestation\n        verified\n      }\n    }\n  }"}, {"type": "query", "name": "Config", "content": "{\n    config\n    configObj {\n      affiliate\n      arbitrator\n      discovery\n      growth\n      graphql\n      bridge\n      ipfsRPC\n      ipfsGateway\n      ipfsEventCache\n      provider\n      providerWS\n      proxyAccountsEnabled\n      relayerEnabled\n      originGraphQLVersion\n      relayer\n      performanceMode\n      marketplaceVersion\n      messaging {\n        globalKeyServer\n        messagingNamespace\n      }\n      centralizedIdentityEnabled\n      authServer\n    }\n  }"}, {"type": "query", "name": "Conversations($limit: Int, $offset: Int)", "content": "{\n    messaging(id: \"defaultAccount\") {\n      id\n      enabled\n      isKeysLoading\n      conversations(limit: $limit, offset: $offset) {\n        id\n        totalUnread\n        lastMessage {\n          address\n          media {\n            url\n            contentType\n          }\n          content\n          timestamp\n          type\n          offer {\n            ...basicOfferFields\n            listing {\n              ...basicListingFields\n            }\n          }\n          eventData {\n            offerID\n            eventType\n          }\n        }\n      }\n      totalUnread\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "query", "name": "CreatorConfig($creatorConfigUrl: String)", "content": "{\n    creatorConfig(creatorConfigUrl: $creatorConfigUrl) {\n      title\n      about\n      logoUrl\n      faviconUrl\n      marketplacePublisher\n      isCreatedMarketplace\n      cssVars {\n        defaultFont\n        headingFont\n        lightFooter\n        background\n        dark\n        darkTwo\n        light\n        clearBlue\n        paleClearBlue\n        darkGreyBlue\n        darkClearBlue\n        darkGrey\n        paleGrey\n        paleGreyTwo\n        paleGreyThree\n        paleGreyFour\n        paleGreyFive\n        paleGreySix\n        paleGreySeven\n        paleGreyTwoDarker\n        paleGreyEight\n        dusk\n        lightDusk\n        steel\n        greenblue\n        paleGreenblue\n        paleYellow\n        mustard\n        gold\n        goldenRod\n        goldenRodLight\n        lightGreenblue\n        bluishPurple\n        blueyGrey\n        darkBlueGrey\n        orangeRed\n        orangeRedLight\n        red\n        darkRed\n        lightRed\n        darkPurple\n        boostLow\n        boostMedium\n        boostHigh\n        boostPremium\n        defaultRadius\n      }\n      listingFilters {\n        name\n        value\n        operator\n        valueType\n      }\n      forceType {\n        category\n        subCategory\n        typename\n      }\n    }\n  }"}, {"type": "query", "name": "DecryptOutOfBandMessage($encrypted: String!)", "content": "{\n    messaging(id: \"defaultAccount\") {\n      decryptOutOfBandMessage(encrypted: $encrypted) {\n        content\n      }\n    }\n  }"}, {"type": "query", "name": "DecryptShippingAddress($encrypted: String!)", "content": "{\n    messaging(id: \"defaultAccount\") {\n      decryptShippingAddress(encrypted: $encrypted) {\n        name\n        address1\n        address2\n        city\n        stateProvinceRegion\n        postalCode\n        country\n        instructions\n      }\n    }\n  }"}, {"type": "query", "name": "EnrollmentStatus($walletAddress: ID!)", "content": "{\n    enrollmentStatus(walletAddress: $walletAddress)\n  }"}, {"type": "query", "name": "GetAuthUrl($provider: String!, $redirect: String)", "content": "{\n    identityEvents {\n      getAuthUrl(provider: $provider, redirect: $redirect)\n    }\n  }"}, {"type": "query", "name": "GrowthEligibility", "content": "{\n    isEligible {\n      eligibility\n      countryName\n      countryCode\n    }\n  }"}, {"type": "query", "name": "Identity($id: ID!)", "content": "{\n    web3 {\n      account(id: $id) {\n        id\n        owner {\n          id\n        }\n        identity {\n          id\n          firstName\n          lastName\n          fullName\n          description\n          avatarUrl\n          avatarUrlExpanded\n          strength\n          attestations\n\n          verifiedAttestations {\n            id\n            rawData\n            properties {\n              type\n              value\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "InviteCode", "content": "{\n    inviteCode\n  }"}, {"type": "query", "name": "InviteInfo($code: String!)", "content": "{\n    inviteInfo(code: $code) {\n      firstName\n      lastName\n      avatarURL\n    }\n  }"}, {"type": "query", "name": "Listing($listingId: ID!)", "content": "{\n    web3 {\n      primaryAccount {\n        id\n      }\n    }\n    marketplace {\n      listing(id: $listingId) {\n        ...basicListingFields\n        ... on Listing {\n          events {\n            id\n            event\n            blockNumber\n            block {\n              id\n              timestamp\n            }\n            returnValues {\n              ipfsHash\n              party\n              offerID\n              listingID\n            }\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "query", "name": "AllListings(\n    $first: Int\n    $after: String\n    $sort: String\n    $order: String\n    $search: String\n    $filters: [ListingFilterInput!]\n    $listingIds: [String]\n  )", "content": "{\n    marketplace {\n      listings(\n        first: $first\n        after: $after\n        sort: $sort\n        order: $order\n        search: $search\n        filters: $filters\n        listingIds: $listingIds\n      ) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          endCursor\n        }\n        nodes {\n          ...basicListingFields\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "subscription", "name": "onLoggedIn", "content": "{\n    loggedIn {\n      wallet\n    }\n  }"}, {"type": "subscription", "name": "onMarkedAsRead", "content": "{\n    markedAsRead {\n      conversationId\n      roomId\n      messagesRead\n      totalUnread\n    }\n  }"}, {"type": "query", "name": "MessagingStatus", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n    }\n    messaging(id: \"defaultAccount\") {\n      id\n      pubKey\n      pubSig\n      enabled\n      isKeysLoading\n      synced\n      syncProgress\n      totalUnread\n    }\n  }"}, {"type": "subscription", "name": "onMessagingStatusChange", "content": "{\n    messagingStatusChange {\n      newStatus\n    }\n  }"}, {"type": "query", "name": "Network", "content": "{\n    web3 {\n      networkId\n      networkName\n    }\n  }"}, {"type": "subscription", "name": "onNewBlock", "content": "{\n    newBlock {\n      id\n      number\n    }\n  }"}, {"type": "subscription", "name": "onMessageAdded", "content": "{\n    messageAdded {\n      conversationId\n      roomId\n      message {\n        index\n        address\n        content\n        status\n        hash\n        media {\n          url\n          contentType\n        }\n        timestamp\n      }\n      totalUnread\n    }\n  }"}, {"type": "query", "name": "Notifications", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n    }\n    notifications {\n      totalCount\n      totalUnread\n      nodes {\n        id\n        title\n        timestamp\n        content\n      }\n    }\n  }"}, {"type": "subscription", "name": "onNewNotification", "content": "{\n    newNotification {\n      totalCount\n      totalUnread\n      node {\n        id\n        title\n        timestamp\n        content\n      }\n    }\n  }"}, {"type": "query", "name": "Offer($offerId: ID!)", "content": "{\n    marketplace {\n      offer(id: $offerId) {\n        listing {\n          ...basicListingFields\n        }\n        ...basicOfferFields\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "query", "name": "OfferEvents($offerId: ID!)", "content": "{\n    marketplace {\n      offer(id: $offerId) {\n        id\n        history {\n          id\n          event {\n            id\n            event\n            block {\n              id\n              timestamp\n            }\n          }\n          ipfsHash\n          ipfsUrl\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Owner($id: ID!)", "content": "{\n    web3 {\n      account(id: $id) {\n        id\n        owner {\n          id\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Profile", "content": "{\n    web3 {\n      primaryAccount {\n        id\n        checksumAddress\n      }\n      walletType\n    }\n  }"}, {"type": "query", "name": "Purchases($id: ID!, $first: Int, $after: String, $filter: String)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        offers(first: $first, after: $after, filter: $filter) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            ...basicOfferFields\n            listing {\n              ...basicListingFields\n            }\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "query", "name": "Reviews($id: ID!, $first: Int, $after: String)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        reviews(first: $first, after: $after) {\n          totalCount\n          nodes {\n            id\n            review\n            rating\n            reviewer {\n              id\n              account {\n                id\n                identity {\n                  id\n                  fullName\n                  avatarUrlExpanded\n                }\n              }\n            }\n            listing {\n              ... on Listing {\n                id\n                title\n              }\n            }\n            event {\n              id\n              timestamp\n            }\n          }\n          pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Room($id: String!, $before: Int, $after: Int)", "content": "{\n    messaging(id: \"defaultAccount\") {\n      id\n      enabled\n      isKeysLoading\n      conversation(id: $id, before: $before, after: $after) {\n        id\n        timestamp\n        totalUnread\n        messages {\n          index\n          address\n          content\n          status\n          hash\n          media {\n            url\n            contentType\n          }\n          timestamp\n          type\n          offer {\n            ...basicOfferFields\n            listing {\n              ...basicListingFields\n            }\n          }\n          eventData {\n            offerID\n            eventType\n          }\n        }\n        hasMore\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "query", "name": "Sales($id: ID!, $first: Int, $after: String, $filter: String)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        sales(first: $first, after: $after, filter: $filter) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            ...basicOfferFields\n            listing {\n              ...basicListingFields\n            }\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "query", "name": "SkinnyIdentity($id: ID!)", "content": "{\n    identity(id: $id) {\n      id\n      firstName\n      lastName\n      fullName\n      description\n      avatarUrl\n      avatarUrlExpanded\n      strength\n      attestations\n\n      verifiedAttestations {\n        id\n        rawData\n        properties {\n          type\n          value\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "TelegramGroupName", "content": "{\n    telegramGroupName\n  }"}, {"type": "query", "name": "AccountTokenBalance($account: ID!, $token: String!)", "content": "{\n    web3 {\n      account(id: $account) {\n        id\n        token(symbol: $token) {\n          id\n          balance\n          token {\n            id\n            decimals\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "TransactionReceipt($id: ID!)", "content": "{\n    web3 {\n      blockNumber\n      transactionReceipt(id: $id) {\n        id\n        blockNumber\n        status\n        events {\n          id\n          event\n          returnValues {\n            listingID\n            offerID\n            party\n            ipfsHash\n          }\n          returnValuesArr {\n            field\n            value\n          }\n        }\n      }\n    }\n  }"}, {"type": "subscription", "name": "onNewTransaction", "content": "{\n    newTransaction {\n      totalCount\n      node {\n        ...basicTransactionFields\n      }\n    }\n  }\n  ${fragments.Transaction.basic}"}, {"type": "query", "name": "UserListings($id: ID!, $first: Int, $after: String, $filter: String)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        listings(first: $first, after: $after, filter: $filter) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            ...basicListingFields\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "query", "name": "UserNotifications($id: ID!, $first: Int, $after: String)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        notifications(first: $first, after: $after) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            id\n            party {\n              id\n            }\n            event {\n              id\n              event\n              timestamp\n              transactionHash\n            }\n            offer {\n              id\n              createdBlock\n              buyer {\n                id\n              }\n              listing {\n                ... on Listing {\n                  id\n                  title\n                  media {\n                    url\n                    urlExpanded\n                    contentType\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "UserTransactions($id: ID!, $first: Int, $after: String)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        transactions(first: $first, after: $after) {\n          totalCount\n          nodes {\n            ...basicTransactionFields\n          }\n        }\n      }\n    }\n    web3 {\n      blockNumber\n    }\n  }\n  ${fragments.Transaction.basic}"}, {"type": "query", "name": "Wallet", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n      walletType\n      mobileWalletAccount {\n        id\n      }\n      primaryAccount {\n        id\n        proxy {\n          id\n        }\n        predictedProxy {\n          id\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "WalletLinker", "content": "{\n    walletLinker {\n      linkCode\n      linked\n    }\n  }"}, {"type": "query", "name": "WalletStatus", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n    }\n    messaging(id: \"defaultAccount\") {\n      id\n      pubKey\n      pubSig\n      enabled\n      isKeysLoading\n      synced\n      syncProgress\n    }\n  }"}, {"type": "subscription", "name": "onWalletUpdate", "content": "{\n    walletUpdate {\n      primaryAccount {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "Web3", "content": "{\n    web3 {\n      networkId\n      networkName\n      walletType\n    }\n  }"}, {"type": "query", "name": "Identity($id: ID!)", "content": "{\n    web3 {\n      account(id: $id) {\n        identity {\n          id\n          ipfsHash\n          owner {\n            id\n            proxy {\n              id\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Listing($listingId: ID!)", "content": "{\n    marketplace {\n      listing(id: $listingId) {\n        ...basicListingFields\n        ... on Listing {\n          valid\n          validationError\n          events {\n            id\n            event\n            blockNumber\n            logIndex\n            returnValues {\n              ipfsHash\n              party\n              offerID\n              listingID\n            }\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "query", "name": "Offer($offerId: ID!)", "content": "{\n    marketplace {\n      offer(id: $offerId) {\n        listing {\n          ...basicListingFields\n        }\n        ...basicOfferFields\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "query", "name": "Balance($id: ID!)", "content": "{\n    web3 {\n      account(id: $id) {\n        id\n        balance {\n          eth\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "SkinnyIdentity($id: ID!)", "content": "{\n    identity(id: $id) {\n      id\n      firstName\n      lastName\n      fullName\n      description\n      avatarUrl\n      avatarUrlExpanded\n      strength\n      attestations\n      verifiedAttestations {\n        id\n        rawData\n        properties {\n          type\n          value\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Wallet($id: ID!)", "content": "{\n    web3 {\n      account(id: $id) {\n        id\n        owner {\n          id\n        }\n        proxy {\n          id\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Balance($id: ID!, $token: String!)", "content": "{\n    web3 {\n      account(id: $id) {\n        id\n        token(symbol: $token) {\n          id\n          balance\n          token {\n            id\n            decimals\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "Refetch", "content": "{\n    refetch\n  }"}, {"type": "mutation", "name": "AddAffiliate($affiliate: String!, $from: String, $version: String)", "content": "{\n    addAffiliate(affiliate: $affiliate, from: $from, version: $version) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "CreateWallet($role: String, $name: String)", "content": "{\n    createWallet(role: $role, name: $name) {\n      id\n      role\n      name\n    }\n  }"}, {"type": "mutation", "name": "ImportWallet($role: String, $name: String, $privateKey: String!)", "content": "{\n    importWallet(role: $role, name: $name, privateKey: $privateKey) {\n      id\n      role\n      name\n    }\n  }"}, {"type": "mutation", "name": "ImportWallets($accounts: [WalletInput]!)", "content": "{\n    importWallets(accounts: $accounts) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployToken(\n    $name: String!\n    $symbol: String!\n    $decimals: String!\n    $supply: String!\n    $type: String\n    $from: String\n  )", "content": "{\n    deployToken(\n      name: $name\n      symbol: $symbol\n      decimals: $decimals\n      supply: $supply\n      type: $type\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "SendFromNode($from: String!, $to: String!, $value: String!)", "content": "{\n    sendFromNode(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "SendFromWallet($from: String, $to: String, $value: String)", "content": "{\n    sendFromWallet(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "TransferToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    transferToken(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    updateTokenAllowance(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployMarketplace(\n    $from: String\n    $token: String!\n    $version: String!\n    $autoWhitelist: Boolean\n  )", "content": "{\n    deployMarketplace(\n      from: $from\n      token: $token\n      version: $version\n      autoWhitelist: $autoWhitelist\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentityContract($from: String!, $contract: String!)", "content": "{\n    deployIdentityContract(from: $from, contract: $contract) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentityEventsContract($from: String!)", "content": "{\n    deployIdentityEvents(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployProxyFactoryContract($from: String!)", "content": "{\n    deployProxyFactory(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentityProxy($from: String!)", "content": "{\n    deployIdentityProxy(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "CreateListing(\n    $from: String!\n    $version: String\n    $deposit: String\n    $depositManager: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n    createListing(\n      from: $from\n      version: $version\n      deposit: $deposit\n      depositManager: $depositManager\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateListing(\n    $listingID: ID!\n    $from: String!\n    $additionalDeposit: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n    updateListing(\n      listingID: $listingID\n      from: $from\n      additionalDeposit: $additionalDeposit\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawListing(\n    $listingID: String!\n    $target: String!\n    $reason: String\n    $from: String\n  )", "content": "{\n    withdrawListing(\n      listingID: $listingID\n      target: $target\n      reason: $reason\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "MakeOffer(\n    $listingID: String\n    $finalizes: Int\n    $affiliate: String\n    $commission: String\n    $value: String\n    $currency: String\n    $arbitrator: String\n    $data: MakeOfferInput\n    $from: String\n    $withdraw: String\n    $quantity: Int\n  )", "content": "{\n    makeOffer(\n      listingID: $listingID\n      finalizes: $finalizes\n      affiliate: $affiliate\n      commission: $commission\n      value: $value\n      currency: $currency\n      arbitrator: $arbitrator\n      data: $data\n      from: $from\n      withdraw: $withdraw\n      quantity: $quantity\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AcceptOffer($offerID: String!, $from: String)", "content": "{\n    acceptOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AddFunds($offerID: String!, $amount: String!, $from: String)", "content": "{\n    addFunds(offerID: $offerID, amount: $amount, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateRefundMutation(\n    $offerID: String!\n    $amount: String!\n    $from: String\n  )", "content": "{\n    updateRefund(offerID: $offerID, amount: $amount, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "ExecuteRulingMutation(\n    $offerID: String!\n    $ruling: String!\n    $commission: String!\n    $message: String\n    $refund: String\n    $from: String\n  )", "content": "{\n    executeRuling(\n      offerID: $offerID\n      amount: $amount\n      ruling: $ruling\n      commission: $commission\n      message: $message\n      refund: $refund\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "FinalizeOffer($offerID: String!, $from: String)", "content": "{\n    finalizeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DisputeOffer($offerID: String, $from: String)", "content": "{\n    disputeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawOffer($offerID: String, $from: String)", "content": "{\n    withdrawOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawListing(\n    $data: String!\n    $from: String!\n    $listingID: String\n    $offerID: String\n  )", "content": "{\n    addData(\n      data: $data\n      listingID: $listingID\n      offerID: $offerID\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentity(\n    $from: String!\n    $profile: ProfileInput\n    $attestations: [String]\n  )", "content": "{\n    deployIdentity(\n      from: $from\n      attestations: $attestations\n      profile: $profile\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UniswapDeployFactory($from: String!)", "content": "{\n    uniswapDeployFactory(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UniswapExchangeTemplate($from: String!)", "content": "{\n    uniswapDeployExchangeTemplate(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UniswapInitFactory(\n    $from: String!\n    $exchange: String\n    $factory: String\n  )", "content": "{\n    uniswapInitializeFactory(\n      from: $from\n      exchange: $exchange\n      factory: $factory\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UniswapCreateExchange(\n    $from: String!\n    $tokenAddress: String!\n    $factory: String\n  )", "content": "{\n    uniswapCreateExchange(\n      from: $from\n      tokenAddress: $tokenAddress\n      factory: $factory\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UniswapAddLiquidity(\n    $from: String!\n    $exchange: String!\n    $value: String!\n    $tokens: String!\n    $liquidity: String!\n  )", "content": "{\n    uniswapAddLiquidity(\n      from: $from\n      exchange: $exchange\n      value: $value\n      tokens: $tokens\n      liquidity: $liquidity\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "ToggleMetaMask($enabled: Boolean)", "content": "{\n    toggleMetaMask(enabled: $enabled)\n  }"}, {"type": "subscription", "name": "onTransactionUpdated", "content": "{\n    transactionUpdated {\n      id\n      status\n      mutation\n      confirmations\n    }\n  }"}, {"type": "query", "name": "NodeAccounts", "content": "{\n    web3 {\n      nodeAccounts {\n        id\n        balance {\n          eth\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "TransactionReceipt($id: ID!)", "content": "{\n    web3 {\n      transactionReceipt(id: $id) {\n        id\n        blockNumber\n        contractAddress\n        events {\n          id\n          event\n          returnValuesArr {\n            field\n            value\n          }\n          raw {\n            topics\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetMessagingState", "content": "{\n    messaging(id: \"currentAccount\") {\n      id\n      enabled\n      synced\n      syncProgress\n      pubKey\n      pubSig\n    }\n  }"}, {"type": "query", "name": "GetMetaMaskState", "content": "{\n    web3 {\n      useMetaMask\n      metaMaskAvailable\n      metaMaskApproved\n      metaMaskEnabled\n      metaMaskUnlocked\n      metaMaskNetworkId\n      metaMaskNetworkName\n      metaMaskAccount {\n        id\n        checksumAddress\n      }\n      primaryAccount {\n        id\n      }\n      walletType\n    }\n  }"}, {"type": "mutation", "name": "DeployToken(\n    $name: String\n    $symbol: String\n    $decimals: String\n    $supply: String\n    $type: String\n    $from: String\n  )", "content": "{\n    deployToken(\n      name: $name\n      symbol: $symbol\n      decimals: $decimals\n      supply: $supply\n      type: $type\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployMarketplace(\n    $from: String\n    $token: String\n    $version: String\n    $autoWhitelist: Boolean\n  )", "content": "{\n    deployMarketplace(\n      from: $from\n      token: $token\n      version: $version\n      autoWhitelist: $autoWhitelist\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AddAffiliate($from: String!, $affiliate: String!)", "content": "{\n    addAffiliate(from: $from, affiliate: $affiliate) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "CreateListing(\n    $from: String!\n    $deposit: String\n    $depositManager: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n    createListing(\n      from: $from\n      deposit: $deposit\n      depositManager: $depositManager\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateListing(\n    $listingID: ID!\n    $from: String!\n    $additionalDeposit: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n    updateListing(\n      listingID: $listingID\n      from: $from\n      additionalDeposit: $additionalDeposit\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "MakeOffer(\n    $listingID: String\n    $finalizes: Int\n    $affiliate: String\n    $commission: String\n    $value: String\n    $currency: String\n    $arbitrator: String\n    $data: MakeOfferInput\n    $from: String\n    $withdraw: String\n    $quantity: Int\n    $autoswap: Boolean\n  )", "content": "{\n    makeOffer(\n      listingID: $listingID\n      finalizes: $finalizes\n      affiliate: $affiliate\n      commission: $commission\n      value: $value\n      currency: $currency\n      arbitrator: $arbitrator\n      data: $data\n      from: $from\n      withdraw: $withdraw\n      quantity: $quantity\n      autoswap: $autoswap\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AcceptOffer($offerID: String!, $from: String)", "content": "{\n    acceptOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawOffer($offerID: String!, $from: String)", "content": "{\n    withdrawOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "FinalizeOffer($offerID: String!, $from: String)", "content": "{\n    finalizeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AddData($offerID: String!, $from: String, $data: String)", "content": "{\n    addData(offerID: $offerID, from: $from, data: $data) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DisputeOffer($offerID: String!, $data: String!, $from: String)", "content": "{\n    disputeOffer(offerID: $offerID, data: $data, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "ExecuteRuling(\n    $offerID: ID!\n    $ruling: String!\n    $commission: String!\n    $message: String\n    $refund: String\n    $from: String\n  )", "content": "{\n    executeRuling(\n      offerID: $offerID\n      ruling: $ruling\n      commission: $commission\n      message: $message\n      refund: $refund\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    updateTokenAllowance(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "TransferToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    transferToken(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentityViaProxy($from: String!, $owner: String!)", "content": "{\n    deployIdentityViaProxy(from: $from, owner: $owner) {\n      id\n    }\n  }"}, {"type": "query", "name": "TransactionReceipt($id: ID!)", "content": "{\n    web3 {\n      transactionReceipt(id: $id) {\n        id\n        blockNumber\n        events {\n          id\n          event\n          returnValues {\n            listingID\n            offerID\n            party\n            ipfsHash\n          }\n          returnValuesArr {\n            field\n            value\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetAllOffers($id: ID!)", "content": "{\n    marketplace {\n      listing(id: $id) {\n        ... on Listing {\n          id\n          title\n          allOffers {\n            id\n            status\n            statusStr\n            valid\n            validationError\n            commission\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetListing($id: ID!)", "content": "{\n    marketplace {\n      listing(id: $id) {\n        ... on Listing {\n          id\n          status\n          totalEvents\n          seller {\n            id\n          }\n          arbitrator {\n            id\n          }\n          deposit\n          depositAvailable\n          createdEvent {\n            timestamp\n          }\n          category\n          categoryStr\n          subCategory\n          title\n          description\n          currencyId\n          price {\n            amount\n            currency {\n              ... on Currency {\n                id\n              }\n            }\n          }\n          media {\n            url\n            urlExpanded\n            contentType\n          }\n          commission\n          commissionPerUnit\n        }\n        ... on UnitListing {\n          unitsTotal\n          unitsAvailable\n          unitsPending\n          unitsSold\n        }\n        ... on GiftCardListing {\n          unitsTotal\n          unitsAvailable\n          unitsPending\n          unitsSold\n        }\n        ... on FractionalListing {\n          weekendPrice {\n            amount\n            currency {\n              ... on Currency {\n                id\n              }\n            }\n          }\n          timeZone\n          workingHours\n          booked\n          customPricing\n          unavailable\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Wallet", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n      walletType\n      mobileWalletAccount {\n        id\n      }\n      primaryAccount {\n        id\n        proxy {\n          id\n        }\n        predictedProxy {\n          id\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "accountQuery(\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n            account(\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                account {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "accounts(\n            $where: Account_filter!\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n            accounts(\n                where: $where\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                accounts {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "asset(\n            $id: String!\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n            asset(\n                id: $id\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                asset {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "fetchNotesFromBalance(\n            $assetAddress: String!\n            $equalTo: Int\n            $greaterThan: Int\n            $lessThan: Int\n            $numberOfNotes: Int\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n            fetchNotesFromBalance(\n                assetAddress: $assetAddress\n                equalTo: $equalTo\n                greaterThan: $greaterThan\n                lessThan: $lessThan\n                numberOfNotes: $numberOfNotes\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                notes {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "note(\n            $id: String!\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n            note(\n                id: $id\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                note {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "notesQuery(\n            $where: Note_filter!\n        )", "content": "{\n            notes(\n                where: $where\n            ) {\n                notes {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "pickNotesFromBalanceQuery(\n            $assetId: String!\n            $amount: Int!\n            $owner: String!\n            $numberOfNotes: Int\n            $excludedNotes: [Input_excluded_note!]\n        )", "content": "{\n            pickNotesFromBalance(\n                assetId: $assetId,\n                amount: $amount,\n                owner: $owner,\n                numberOfNotes: $numberOfNotes\n                excludedNotes: $excludedNotes\n            ) {\n                notes {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "userPermission(\n            $currentAddress: String!\n            $domain: String!\n        )", "content": "{\n            userPermission(\n                currentAddress: $currentAddress\n                domain: $domain\n            ) {\n                account {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "userQuery(\n            $id: String!\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n            user(\n                id: $id\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                account {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "usersQuery(\n            $where: User_filter!\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n            users(\n                where: $where\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                accounts {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "subscription", "name": "onNewMSA", "content": "{\n    newMSA {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${MSA_ATTRIBUTES}"}, {"type": "query", "name": "getAllMSAs", "content": "{\n    msas {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${MSA_ATTRIBUTES}"}, {"type": "mutation", "name": "createMSA($input: inputMSA!)", "content": "{\n    createMSA(input: $input) {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${MSA_ATTRIBUTES}"}, {"type": "query", "name": "getMSAByProposal($proposalId: String!)", "content": "{\n    msaByProposal(proposalId: $proposalId) {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${MSA_ATTRIBUTES}"}, {"type": "query", "name": "msasBySKU($sku: String!)", "content": "{\n    msasBySKU(sku: $sku) {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${MSA_ATTRIBUTES}"}, {"type": "query", "name": "msa($id: String!)", "content": "{\n    msa(id: $id) {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${MSA_ATTRIBUTES}"}, {"type": "subscription", "name": "newNotice", "content": "{\n    newNotice {\n      ...NOTICE_ATTRIBUTES\n    }\n  }\n  ${NOTICE_ATTRIBUTES}"}, {"type": "query", "name": "getAllNotices", "content": "{\n    notices {\n      ...NOTICE_ATTRIBUTES\n    }\n  }\n  ${NOTICE_ATTRIBUTES}"}, {"type": "query", "name": "getNoticeCount", "content": "{\n    getNoticeCount {\n      ...CATEGORIES\n    }\n  }\n  ${CATEGORIES}"}, {"type": "query", "name": "", "content": "{\n    organizations {\n      name\n      address\n      role\n      identity\n      zkpPublicKey\n    }\n\n    myPartners {\n      name\n      address\n      role\n      identity\n      zkpPublicKey\n    }\n  }"}, {"type": "subscription", "name": "GetPartnerUpdate", "content": "{\n    getPartnerUpdate {\n      organizations {\n        name\n        address\n        role\n        identity\n        zkpPublicKey\n      }\n\n      myPartners {\n        name\n        address\n        role\n        identity\n        zkpPublicKey\n      }\n    }\n  }"}, {"type": "query", "name": "partner($address: Address!)", "content": "{\n    partner {\n      name\n      address\n      role\n      identity\n    }\n  }"}, {"type": "query", "name": "myPartners", "content": "{\n    name\n    address\n    role\n    identity\n  }"}, {"type": "mutation", "name": "addPartner($input: AddPartnerInput!)", "content": "{\n    addPartner(input: $input) {\n      partner {\n        name\n        address\n        role\n        identity\n      }\n    }\n  }"}, {"type": "mutation", "name": "removePartner($input: RemovePartnerInput!)", "content": "{\n    removePartner(input: $input) {\n      partner {\n        name\n        address\n        role\n      }\n    }\n  }"}, {"type": "query", "name": "($identity: String!)", "content": "{\n    getPartnerByMessagingKey(identity: $identity) {\n      name\n      address\n      role\n      identity\n      zkpPublicKey\n    }\n  }"}, {"type": "subscription", "name": "onNewProposal", "content": "{\n    newProposal {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "query", "name": "getAllProposals", "content": "{\n    proposals {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "query", "name": "proposal($rfpId: String!)", "content": "{\n    getProposalsByRFPId(rfpId: $rfpId) {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "mutation", "name": "createProposal($input: inputProposal!)", "content": "{\n    createProposal(input: $input) {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "query", "name": "proposal($id: String!)", "content": "{\n    proposal(id: $id) {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "query", "name": "proposal($sender: String! $rfpId: String!)", "content": "{\n    getProposalByRFPAndSupplier(sender: $sender rfpId: $rfpId) {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "mutation", "name": "createPO($input: inputPO!)", "content": "{\n    createPO(input: $input) {\n      _id\n    }\n  }"}, {"type": "query", "name": "pos", "content": "{\n    ...PO_ATTRIBUTES\n  }\n  ${PO_ATTRIBUTES}"}, {"type": "query", "name": "po($id: String!)", "content": "{\n    po(id: $id) {\n      ...PO_ATTRIBUTES\n    }\n  }\n  ${PO_ATTRIBUTES}"}, {"type": "subscription", "name": "onNewRFP", "content": "{\n    newRFP {\n      ...RFP_ATTRIBUTES\n    }\n  }\n  ${RFP_ATTRIBUTES}"}, {"type": "query", "name": "getAllRFPs", "content": "{\n    rfps {\n      ...RFP_ATTRIBUTES\n    }\n  }\n  ${RFP_ATTRIBUTES}"}, {"type": "mutation", "name": "createRFP($input: inputRFP!)", "content": "{\n    createRFP(input: $input) {\n      ...RFP_ATTRIBUTES\n    }\n  }\n  ${RFP_ATTRIBUTES}"}, {"type": "query", "name": "rfp($uuid: String!)", "content": "{\n    rfp(uuid: $uuid) {\n      ...RFP_ATTRIBUTES\n    }\n  }\n  ${RFP_ATTRIBUTES}"}, {"type": "query", "name": "rfp($sku: String!)", "content": "{\n    rfp(sku: $sku) {\n      ...RFP_ATTRIBUTES\n    }\n  }\n  ${RFP_ATTRIBUTES}"}, {"type": "query", "name": "($uuid: String!)", "content": "{\n    rfp(uuid: $uuid) {\n      ...RFP_ATTRIBUTES\n    }\n    getProposalsByRFPId(rfpId: $uuid) {\n      ...PROPOSAL_ATTRIBUTES\n    }\n    msasByRFPId(rfpId: $uuid) {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${RFP_ATTRIBUTES}\n  ${PROPOSAL_ATTRIBUTES}\n  ${MSA_ATTRIBUTES}"}, {"type": "query", "name": "GetServerState", "content": "{\n    serverState {\n      state\n    }\n  }"}, {"type": "subscription", "name": "onServerStateUpdate", "content": "{\n    serverStateUpdate {\n      state\n    }\n  }"}, {"type": "query", "name": "GetServerSettings", "content": "{\n    getServerSettings {\n      globalRegistryAddress\n      orgRegistryAddress\n      organizationName\n      organizationRole\n      organizationAddress\n      organizationWhisperKey\n      rpcProvider\n    }\n  }"}, {"type": "subscription", "name": "GetServerSettingsUpdate", "content": "{\n    serverSettingsUpdate {\n      globalRegistryAddress\n      orgRegistryAddress\n      organizationName\n      organizationRole\n      organizationAddress\n      organizationWhisperKey\n      rpcProvider\n    }\n  }"}, {"type": "mutation", "name": "SetRPCProvider($uri: String!)", "content": "{\n    setRPCProvider(uri: $uri) {\n      globalRegistryAddress\n      orgRegistryAddress\n      organizationName\n      organizationRole\n      organizationAddress\n      organizationWhisperKey\n      rpcProvider\n    }\n  }"}, {"type": "mutation", "name": "SetWalletFromMnemonic($mnemonic: String!, $path: String)", "content": "{\n    setWalletFromMnemonic(mnemonic: $mnemonic, path: $path){\n      globalRegistryAddress\n      orgRegistryAddress\n      organizationName\n      organizationRole\n      organizationWhisperKey\n      rpcProvider\n    }\n  }"}, {"type": "mutation", "name": "RegisterOrganization($input: RegisterOrganization!)", "content": "{\n    registerOrganization(input: $input){\n      organization {\n        name\n        address\n        role\n      }\n    }\n  }"}, {"type": "query", "name": "GetServerStatus", "content": "{\n  serverStatus {\n    balance\n  }\n}"}, {"type": "subscription", "name": "GetServerStatusUpdate", "content": "{\n  serverStatusUpdate {\n    balance\n  }\n}"}, {"type": "subscription", "name": "onNotification($userAddress: Address!)", "content": "{\n    onNotification(userAddress: $userAddress) {\n      success\n      message\n    }\n  }"}, {"type": "mutation", "name": "mergeReviews(\n          $userId: ID!\n          $userName: String!\n          $businessId: ID!\n          $businessName: String!\n          $businessCity: String!\n          $businessState: String!\n          $businessAddress: String!\n          $latitude: Float!\n          $longitude: Float!\n          $reviewId: ID!\n          $reviewText: String\n          $reviewDate: DateTime\n          $reviewStars: Float\n          $categories: [String!]!\n        )", "content": "{\n          user: mergeUser(userId: $userId, name: $userName) {\n            userId\n          }\n          business: mergeBusiness(\n            businessId: $businessId\n            name: $businessName\n            address: $businessAddress\n            city: $businessCity\n            state: $businessState\n            latitude: $latitude\n            longitude: $longitude\n          ) {\n            businessId\n          }\n\n          businessCategories: mergeBusinessCategory(\n            categories: $categories\n            businessId: $businessId\n          ) {\n            businessId\n          }\n\n          reviews: createReviews(\n            input: {\n              reviewId: $reviewId\n              stars: $reviewStars\n              text: $reviewText\n              date: $reviewDate\n              business: { connect: { where: { businessId: $businessId } } }\n              user: { connect: { where: { userId: $userId } } }\n            }\n          ) {\n            reviews {\n              reviewId\n              date\n            }\n          }\n        }"}, {"type": "query", "name": "usersPaginateQuery(\n    $first: Int\n    $offset: Int\n    $orderBy: [UserSort]\n    $filter: UserWhere\n  )", "content": "{\n    users(\n      options: { limit: $first, skip: $offset, sort: $orderBy }\n      where: $filter\n    ) {\n      id: userId\n      name\n      avgStars\n      numReviews\n    }\n  }"}, {"type": "query", "name": "getProducts($ids: [ID!]!)", "content": "{\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "productVariantUpdate($input: ProductVariantInput!)", "content": "{\n   productVariantUpdate(input: $input) {\n     product {\n       title\n     }\n     productVariant {\n       id\n       price\n     }\n   }\n }"}, {"type": "query", "name": "getIssuesForRepos", "content": "{\n    ${queries.join('')}\n  }"}, {"type": "query", "name": "GetIssue($id: ID!)", "content": "{\n    node(id: $id) {\n      ... on Issue { ${issueAttributes} }\n    }\n  }"}, {"type": "mutation", "name": "create($title: String!, $description: String, $id: ID!)", "content": "{\n    createIssue(\n      input: { title: $title, body: $description, repositoryId: $id }\n    ) {\n      issue {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n    viewer {\n      id\n      login\n      url\n      avatarUrl\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n    viewer {\n      id\n     repositories(\n       first: 100,\n       orderBy: {field: UPDATED_AT, direction: DESC}\n       ownerAffiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER],\n       affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER]) {\n       totalCount\n       edges {\n        node {\n          nameWithOwner\n          id\n          owner {\n            id\n          }\n        }\n      }\n     }\n   }\n }"}, {"type": "mutation", "name": "comment($body: String!, $subjectId: ID!)", "content": "{\n    addComment(\n      input: { body: $body, subjectId: $subjectId }\n    ) {\n      subject {\n        id\n      }\n    }\n  }"}, {"type": "mutation", "name": "login($email: String!, $password: String!)", "content": "{\n    login(email: $email, password: $password) {\n      token\n      user {\n        id\n        handle\n        avatar\n        fullname\n      }\n    }\n  }"}, {"type": "mutation", "name": "signup(\n    $firstname: String!\n    $lastname: String!\n    $handle: String!\n    $email: String!\n    $password: String!\n  )", "content": "{\n    signup(\n      firstname: $firstname\n      lastname: $lastname\n      handle: $handle\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        id\n        handle\n        avatar\n        fullname\n        avatar\n      }\n    }\n  }"}, {"type": "query", "name": "userLoggedIn", "content": "{\n    isLoggedIn\n  }"}, {"type": "query", "name": "user", "content": "{\n    user {\n      id\n      handle\n      avatar\n      fullname\n    }\n  }"}, {"type": "mutation", "name": "addComment($id: ID!, $text: String!)", "content": "{\n    addComment(id: $id, text: $text) {\n      id\n      text\n      isCommentMine\n      user {\n        id\n        handle\n        avatar\n        fullname\n      }\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "deleteComment($id: ID!)", "content": "{\n    deleteComment(id: $id) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "follow($id: ID!)", "content": "{\n    follow(id: $id)\n  }"}, {"type": "mutation", "name": "unfollow($id: ID!)", "content": "{\n    unfollow(id: $id)\n  }"}, {"type": "query", "name": "feed", "content": "{\n    feed {\n      id\n      text\n      tags\n      isLiked\n      isTweetMine\n      likesCount\n      commentsCount\n      retweetsCount\n      isRetweet\n      files {\n        id\n        url\n      }\n      user {\n        id\n        avatar\n        handle\n        fullname\n      }\n      createdAt\n    }\n  }"}, {"type": "query", "name": "users", "content": "{\n    users {\n      id\n      handle\n      isFollowing\n      isSelf\n      fullname\n      avatar\n    }\n  }"}, {"type": "query", "name": "profile($handle: String!)", "content": "{\n    profile(handle: $handle) {\n      id\n      handle\n      firstname\n      lastname\n      fullname\n      avatar\n      coverPhoto\n      dob\n      location\n      website\n      isSelf\n      isFollowing\n      followersCount\n      followingCount\n      tweetsCount\n      bio\n      tweets {\n        id\n        text\n        tags\n        isTweetMine\n        user {\n          id\n          fullname\n          handle\n          avatar\n        }\n        files {\n          id\n          url\n        }\n        likesCount\n        commentsCount\n        retweetsCount\n        isLiked\n        isRetweet\n        createdAt\n      }\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "editProfile(\n    $firstname: String\n    $lastname: String\n    $location: String\n    $dob: String\n    $bio: String\n    $website: String\n    $avatar: String\n    $coverPhoto: String\n  )", "content": "{\n    editProfile(\n      firstname: $firstname\n      lastname: $lastname\n      location: $location\n      dob: $dob\n      bio: $bio\n      website: $website\n      avatar: $avatar\n      coverPhoto: $coverPhoto\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "searchByUser($term: String!)", "content": "{\n    searchByUser(term: $term) {\n      id\n      handle\n      fullname\n      avatar\n      followingCount\n      followersCount\n      tweetsCount\n      isFollowing\n      isSelf\n    }\n  }"}, {"type": "query", "name": "searchByTag($term: String!)", "content": "{\n    searchByTag(term: $term) {\n      id\n      text\n      tags\n      isRetweet\n      isTweetMine\n      likesCount\n      retweetsCount\n      commentsCount\n      isLiked\n      files {\n        id\n        url\n      }\n      user {\n        id\n        handle\n        avatar\n        fullname\n      }\n      createdAt\n    }\n  }"}, {"type": "query", "name": "searchByTweet($term: String!)", "content": "{\n    searchByTweet(term: $term) {\n      id\n      text\n      tags\n      isRetweet\n      isTweetMine\n      likesCount\n      retweetsCount\n      commentsCount\n      isLiked\n      files {\n        id\n        url\n      }\n      user {\n        id\n        handle\n        avatar\n        fullname\n      }\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "newTweet($text: String!, $files: [String!]!, $tags: [String!]!)", "content": "{\n    newTweet(text: $text, files: $files, tags: $tags) {\n      id\n      text\n      tags\n      isLiked\n      likesCount\n      commentsCount\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "deleteTweet($id: ID!)", "content": "{\n    deleteTweet(id: $id) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "toggleLike($id: ID!)", "content": "{\n    toggleLike(id: $id)\n  }"}, {"type": "mutation", "name": "toggleRetweet($id: ID!)", "content": "{\n    toggleRetweet(id: $id)\n  }"}, {"type": "query", "name": "tweet($id: ID!)", "content": "{\n    tweet(id: $id) {\n      id\n      text\n      tags\n      user {\n        id\n        fullname\n        handle\n        avatar\n      }\n      files {\n        id\n        url\n      }\n      likesCount\n      commentsCount\n      retweetsCount\n      isLiked\n      isRetweet\n      comments {\n        id\n        text\n        isCommentMine\n        user {\n          id\n          fullname\n          handle\n          avatar\n        }\n        createdAt\n      }\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "MetafieldDelete($input: MetafieldDeleteInput!)", "content": "{\n    metafieldDelete(input: $input) {\n      deletedId\n      userErrors {\n        field\n        message\n      }\n    }\n  }"}, {"type": "mutation", "name": "ProductMetafieldCreate($input: ProductInput!)", "content": "{\n    productUpdate(input: $input) {\n      userErrors {\n        field\n        message\n      }\n    }\n  }"}, {"type": "query", "name": "GetProductById($productId: ID!)", "content": "{\n    product(id: $productId) {\n      id\n      title\n      featuredImage {\n        id\n        originalSrc\n      }\n      avgRatingMetafield: metafield(\n        namespace: \"${METAFIELD_NAMESPACE.standardRating}\",\n        key: \"${METAFIELD_KEY.ratings}\"\n      ) {\n        id\n        value\n      }\n    }\n  }"}, {"type": "query", "name": "GetProductMetafields($productId: ID!, $namespace: String!)", "content": "{\n    product(id: $productId) {\n      id\n      metafields(namespace: $namespace, first: 10) {\n        edges {\n          node {\n            id\n            key\n            value\n            type\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetProducts($query: String)", "content": "{\n    products(first: 110, query: $query) {\n      edges {\n        node {\n          id\n          title\n          featuredImage {\n            id\n            originalSrc\n          }\n          avgRatingMetafield: metafield(\n            namespace: \"${METAFIELD_NAMESPACE.standardRating}\",\n            key: \"${METAFIELD_KEY.ratings}\"\n          ) {\n            id\n            value\n          }\n          publicReviews: metafields(\n            first: 1,\n            namespace: \"${METAFIELD_NAMESPACE.publicReviews}\"\n          ) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          privateReviews: metafields(\n            first: 1,\n            namespace: \"${METAFIELD_NAMESPACE.privateReviews}\"\n          ) {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n      appPurchaseOneTimeCreate(\n        name: \"test\"\n        price: { amount: 10, currencyCode: USD }\n        returnUrl: \"${url}\"\n        test: true\n      ) {\n        userErrors {\n          field\n          message\n        }\n        confirmationUrl\n        appPurchaseOneTime {\n          id\n        }\n      }\n    }"}, {"type": "mutation", "name": "", "content": "{\n      appSubscriptionCreate(\n          name: \"Super Duper Plan\"\n          returnUrl: \"${url}\"\n          test: true\n          lineItems: [\n          {\n            plan: {\n              appUsagePricingDetails: {\n                  cappedAmount: { amount: 10, currencyCode: USD }\n                  terms: \"$1 for 1000 emails\"\n              }\n            }\n          }\n          {\n            plan: {\n              appRecurringPricingDetails: {\n                  price: { amount: 10, currencyCode: USD }\n              }\n            }\n          }\n          ]\n        ) {\n            userErrors {\n              field\n              message\n            }\n            confirmationUrl\n            appSubscription {\n              id\n            }\n        }\n    }"}, {"type": "query", "name": "GetProductAvgRatingMetafield($productId: ID!)", "content": "{\n    product(id: $productId) {\n      avgRatingMetafield: metafield(\n        namespace: \"${METAFIELD_NAMESPACE.standardRating}\",\n        key: \"${METAFIELD_KEY.ratings}\"\n      ) {\n        id\n        key\n        namespace\n        value\n        type\n      }\n    }\n  }"}, {"type": "mutation", "name": "PrivateMetafieldUpsert($input: PrivateMetafieldInput!)", "content": "{\n    privateMetafieldUpsert(input: $input) {\n      privateMetafield {\n        id\n        key\n        value\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }"}, {"type": "query", "name": "GetFirstPublishedProduct", "content": "{\n    products(first: 1, query: \"published_status:published\") {\n      edges {\n        node {\n          id\n          title\n          handle\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetProductEnqueuedMessages($productId: ID!)", "content": "{\n    product(id: $productId) {\n      metafields(\n        namespace: \"${METAFIELD_NAMESPACE.messages}\", \n        reverse: true, \n        first: 10\n      ) {\n        edges {\n          node {\n            id\n            key\n            value\n            type\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "getProductRatings($productId: ID!)", "content": "{\n    product(id: $productId) {\n      ratings: privateMetafield(\n        namespace: \"${METAFIELD_NAMESPACE.general}\",\n        key: \"${METAFIELD_KEY.ratings}\"\n      ) {\n        id\n        key\n        namespace\n        value\n      }\n    }\n  }"}, {"type": "query", "name": "ListUserActivities($filter: ActivityFilter)", "content": "{\n      listUserActivities(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          activityUri\n          created\n          summary\n          targetUri\n          targetType\n          action\n        }\n      }\n    }"}, {"type": "mutation", "name": "createAirflowClusterProject(\n      $clusterUri: String!\n      $projectInput: NewAirflowProjectInput!\n    )", "content": "{\n      createAirflowClusterProject(\n        clusterUri: $clusterUri\n        projectInput: $projectInput\n      ) {\n        projectUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "createAirflowCluster(\n      $environmentUri: String!\n      $clusterInput: NewAirflowClusterInput!\n    )", "content": "{\n      createAirflowCluster(\n        environmentUri: $environmentUri\n        clusterInput: $clusterInput\n      ) {\n        clusterUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "deleteAirflowProject($projectUri: String)", "content": "{\n      deleteAirflowProject(projectUri: $projectUri)\n    }"}, {"type": "mutation", "name": "deleteAirflowCluster($clusterUri: String!)", "content": "{\n      deleteAirflowCluster(clusterUri: $clusterUri)\n    }"}, {"type": "query", "name": "getAirflowClusterWebLoginToken($clusterUri: String!)", "content": "{\n      getAirflowClusterWebLoginToken(clusterUri: $clusterUri)\n    }"}, {"type": "query", "name": "GetAirflowCluster($clusterUri: String!)", "content": "{\n      getAirflowCluster(clusterUri: $clusterUri) {\n        clusterUri\n        environmentUri\n        name\n        label\n        description\n        tags\n        owner\n        created\n        updated\n        AwsAccountId\n        region\n        clusterArn\n        clusterName\n        maxWorkers\n        environmentClass\n        kmsAlias\n        status\n        CFNStackName\n        CFNStackStatus\n        CFNStackArn\n        IAMRoleArn\n        subnetIds\n        vpc\n        securityGroupIds\n        userRoleForCluster\n        userRoleInEnvironment\n        imported\n        organization {\n          organizationUri\n          label\n          name\n        }\n        environment {\n          environmentUri\n          label\n          name\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n      }\n    }"}, {"type": "query", "name": "getAirflowClusterConsoleAccess($clusterUri: String!)", "content": "{\n      getAirflowClusterConsoleAccess(clusterUri: $clusterUri)\n    }"}, {"type": "mutation", "name": "importAirflowCluster(\n      $environmentUri: String!\n      $clusterInput: ImportClusterInput!\n    )", "content": "{\n      importAirflowCluster(\n        environmentUri: $environmentUri\n        clusterInput: $clusterInput\n      ) {\n        clusterUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "query", "name": "listAirflowClusterProjects(\n      $clusterUri: String!\n      $filter: AirflowProjectFilter\n    )", "content": "{\n      listAirflowClusterProjects(clusterUri: $clusterUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          projectUri\n          name\n          packageName\n          codeRepositoryName\n          codeRepositoryLink\n          codeRepositoryStatus\n          codePipelineName\n          codePipelineArn\n          codePipelineLink\n          description\n          created\n        }\n      }\n    }"}, {"type": "query", "name": "listEnvironmentAirflowClusters(\n      $environmentUri: String!\n      $filter: AirflowClusterFilter\n    )", "content": "{\n      listEnvironmentAirflowClusters(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          clusterUri\n          environmentUri\n          name\n          label\n          description\n          tags\n          owner\n          created\n          updated\n          AwsAccountId\n          region\n          clusterArn\n          clusterName\n          created\n          kmsAlias\n          status\n          CFNStackName\n          CFNStackStatus\n          CFNStackArn\n          IAMRoleArn\n          subnetIds\n          securityGroupIds\n          userRoleForCluster\n          userRoleInEnvironment\n          imported\n          dagS3Path\n          webServerUrl\n          stack {\n            status\n          }\n          vpc\n          organization {\n            organizationUri\n            label\n            name\n          }\n          environment {\n            environmentUri\n            label\n            name\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "searchAirflowClusters($filter: AirflowClusterFilter)", "content": "{\n      searchAirflowClusters(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          clusterUri\n          environmentUri\n          name\n          label\n          description\n          tags\n          owner\n          created\n          updated\n          AwsAccountId\n          region\n          clusterArn\n          clusterName\n          created\n          kmsAlias\n          status\n          CFNStackName\n          CFNStackStatus\n          CFNStackArn\n          IAMRoleArn\n          subnetIds\n          securityGroupIds\n          userRoleForCluster\n          userRoleInEnvironment\n          imported\n          dagS3Path\n          webServerUrl\n          vpc\n          organization {\n            organizationUri\n            label\n            name\n          }\n          environment {\n            environmentUri\n            label\n            name\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "CreateApiKey", "content": "{\n      createApiKey {\n        ApiKeyId\n        ApiKeySecret\n        expires\n      }\n    }"}, {"type": "mutation", "name": "DeleteApiKey($ApiKeyId: String!)", "content": "{\n      deleteApiKey(ApiKeyId: $ApiKeyId)\n    }"}, {"type": "query", "name": "ListApiKeys", "content": "{\n      listApiKeys {\n        count\n        nodes {\n          ApiKeyId\n          expires\n        }\n      }\n    }"}, {"type": "query", "name": "SearchDatasets($filters: FacetFilters, $page: Int, $term: String)", "content": "{\n      searchDatasets(filters: $filters, page: $page, term: $term) {\n        hits {\n          count\n          page\n          pageSize\n          hasNext\n          hasPrevious\n          pages\n          nodes {\n            datasetUri\n            label\n            owner\n            userRoleForDataset\n            created\n            region\n            description\n            tags\n            organization {\n              label\n              organizationUri\n            }\n            environment {\n              label\n            }\n            statistics {\n              tables\n              locations\n            }\n          }\n        }\n        facets {\n          groups {\n            dimensionName\n            items {\n              value\n              count\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "approveDashboardShare($shareUri: String!)", "content": "{\n      approveDashboardShare(shareUri: $shareUri) {\n        shareUri\n        status\n      }\n    }"}, {"type": "mutation", "name": "CreateDashboard($input: NewDashboardInput)", "content": "{\n      createDashboard(input: $input) {\n        dashboardUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "importDashboard($dashboardUri: String!)", "content": "{\n      deleteDashboard(dashboardUri: $dashboardUri)\n    }"}, {"type": "query", "name": "GetDashboard($dashboardUri: String!)", "content": "{\n      getDashboard(dashboardUri: $dashboardUri) {\n        dashboardUri\n        name\n        owner\n        SamlGroupName\n        description\n        label\n        created\n        tags\n        userRoleForDashboard\n        DashboardId\n        upvotes\n        environment {\n          label\n          region\n        }\n        organization {\n          organizationUri\n          label\n          name\n        }\n        terms {\n          count\n          nodes {\n            nodeUri\n            path\n            label\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetAuthorSession($environmentUri: String, $dashboardUri: String)", "content": "{\n      getAuthorSession(\n        environmentUri: $environmentUri\n        dashboardUri: $dashboardUri\n      )\n    }"}, {"type": "query", "name": "GetReaderSession($dashboardUri: String)", "content": "{\n      getReaderSession(dashboardUri: $dashboardUri)\n    }"}, {"type": "mutation", "name": "importDashboard($input: ImportDashboardInput)", "content": "{\n      importDashboard(input: $input) {\n        dashboardUri\n        name\n        label\n        DashboardId\n        created\n      }\n    }"}, {"type": "query", "name": "listDashboardShares(\n      $dashboardUri: String!\n      $filter: DashboardShareFilter!\n    )", "content": "{\n      listDashboardShares(dashboardUri: $dashboardUri, filter: $filter) {\n        count\n        nodes {\n          dashboardUri\n          shareUri\n          SamlGroupName\n          owner\n          created\n          status\n        }\n      }\n    }"}, {"type": "mutation", "name": "rejectDashboardShare($shareUri: String!)", "content": "{\n      rejectDashboardShare(shareUri: $shareUri) {\n        shareUri\n        status\n      }\n    }"}, {"type": "mutation", "name": "requestDashboardShare(\n      $dashboardUri: String!\n      $principalId: String!\n    )", "content": "{\n      requestDashboardShare(\n        dashboardUri: $dashboardUri\n        principalId: $principalId\n      ) {\n        shareUri\n        status\n      }\n    }"}, {"type": "query", "name": "searchDashboards($filter: DashboardFilter)", "content": "{\n      searchDashboards(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          dashboardUri\n          name\n          owner\n          SamlGroupName\n          description\n          label\n          created\n          tags\n          userRoleForDashboard\n          upvotes\n          organization {\n            organizationUri\n            label\n            name\n          }\n          environment {\n            environmentUri\n            name\n            label\n            AwsAccountId\n            region\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "shareDashboard($dashboardUri: String!, $principalId: String!)", "content": "{\n      shareDashboard(dashboardUri: $dashboardUri, principalId: $principalId) {\n        shareUri\n        status\n      }\n    }"}, {"type": "mutation", "name": "updateDashboard($input: UpdateDashboardInput)", "content": "{\n      updateDashboard(input: $input) {\n        dashboardUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "query", "name": "BrowseDataPipelineRepository($input: DataPipelineBrowseInput!)", "content": "{\n      browseDataPipelineRepository(input: $input)\n    }"}, {"type": "mutation", "name": "CreateDataPipeline($input: NewDataPipelineInput)", "content": "{\n      createDataPipeline(input: $input) {\n        DataPipelineUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "createDataPipelineEnvironment($input: NewDataPipelineEnvironmentInput)", "content": "{\n      createDataPipelineEnvironment(input: $input) {\n        envPipelineUri\n        environmentUri\n        environmentLabel\n        pipelineUri\n        pipelineLabel\n        stage\n        region\n        AwsAccountId\n        samlGroupName\n      }\n    }"}, {"type": "mutation", "name": "deleteDataPipeline(\n      $DataPipelineUri: String!\n      $deleteFromAWS: Boolean\n    )", "content": "{\n      deleteDataPipeline(\n        DataPipelineUri: $DataPipelineUri\n        deleteFromAWS: $deleteFromAWS\n      )\n    }"}, {"type": "mutation", "name": "deleteDataPipelineEnvironment(\n      $envPipelineUri: String!\n    )", "content": "{\n      deleteDataPipelineEnvironment(\n        envPipelineUri: $envPipelineUri\n      )\n    }"}, {"type": "query", "name": "GetDataPipeline($DataPipelineUri: String!)", "content": "{\n      getDataPipeline(DataPipelineUri: $DataPipelineUri) {\n        DataPipelineUri\n        name\n        owner\n        SamlGroupName\n        description\n        label\n        created\n        userRoleForPipeline\n        tags\n        repo\n        cloneUrlHttp\n        devStrategy\n        template\n        environment {\n          environmentUri\n          AwsAccountId\n          region\n          label\n        }\n        organization {\n          organizationUri\n          label\n          name\n        }\n        developmentEnvironments {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            envPipelineUri\n            environmentUri\n            environmentLabel\n            pipelineUri\n            pipelineLabel\n            stage\n            order\n            region\n            AwsAccountId\n            samlGroupName\n          }\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n      }\n    }"}, {"type": "query", "name": "GetDataPipelineCredsLinux($DataPipelineUri: String!)", "content": "{\n      getDataPipelineCredsLinux(DataPipelineUri: $DataPipelineUri)\n    }"}, {"type": "query", "name": "GetDataPipelineDag($DataPipelineUri: String!)", "content": "{\n      getDataPipelineDag(DataPipelineUri: $DataPipelineUri)\n    }"}, {"type": "query", "name": "getDataPipelineEnvironment($envPipelineUri: String!)", "content": "{\n      getDataPipelineEnvironment(envPipelineUri: $envPipelineUri) {\n        envPipelineUri       \n        environmentUri\n        environmentLabel\n        pipelineUri\n        pipelineLabel\n        stage\n        region\n        AwsAccountId\n        SamlGroupName\n      }\n    }"}, {"type": "query", "name": "getDataPipelineFileContent($input: DataPipelineFileContentInput!)", "content": "{\n      getDataPipelineFileContent(input: $input)\n    }"}, {"type": "query", "name": "ListDataPipelineBranches($DataPipelineUri: String!)", "content": "{\n      listDataPipelineBranches(DataPipelineUri: $DataPipelineUri)\n    }"}, {"type": "query", "name": "ListDataPipelines($filter: DataPipelineFilter)", "content": "{\n      listDataPipelines(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          DataPipelineUri\n          name\n          owner\n          SamlGroupName\n          description\n          label\n          created\n          tags\n          organization {\n            organizationUri\n            label\n            name\n          }\n          environment {\n            environmentUri\n            AwsAccountId\n            region\n            label\n          }\n          userRoleForPipeline\n          stack {\n            stack\n            status\n            stackUri\n            targetUri\n            accountid\n            region\n            stackid\n            link\n            outputs\n            resources\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "UpdateDataPipeline(\n      $input: UpdateDataPipelineInput\n      $DataPipelineUri: String!\n    )", "content": "{\n      updateDataPipeline(DataPipelineUri: $DataPipelineUri, input: $input) {\n        DataPipelineUri\n        name\n        label\n        created\n        tags\n      }\n    }"}, {"type": "mutation", "name": "updateDataPipelineEnvironment($input: NewDataPipelineEnvironmentInput)", "content": "{\n      updateDataPipelineEnvironment(input: $input) {\n        envPipelineUri\n        environmentUri\n        environmentLabel\n        pipelineUri\n        pipelineLabel\n        stage\n        region\n        AwsAccountId\n        samlGroupName\n      }\n    }"}, {"type": "mutation", "name": "updatePipelineStack($DataPipelineUri: String!)", "content": "{\n      updatePipelineStack(DataPipelineUri: $DataPipelineUri)\n    }"}, {"type": "mutation", "name": "AddDatasetContributor(\n      $datasetUri: String\n      $userName: String\n      $role: DatasetRole\n    )", "content": "{\n      addDatasetContributor(\n        datasetUri: $datasetUri\n        userName: $userName\n        role: $role\n      ) {\n        datasetUri\n        label\n        userRoleForDataset\n      }\n    }"}, {"type": "mutation", "name": "createDatasetLoader(\n      $datasetUri: String\n      $input: NewDatasetLoaderInput\n    )", "content": "{\n      createDatasetLoader(datasetUri: $datasetUri, input: $input)\n    }"}, {"type": "mutation", "name": "CreateDatasetStorageLocation(\n      $datasetUri: String\n      $input: NewDatasetStorageLocationInput\n    )", "content": "{\n      createDatasetStorageLocation(datasetUri: $datasetUri, input: $input) {\n        locationUri\n        S3Prefix\n      }\n    }"}, {"type": "mutation", "name": "CreateDatasetTable(\n      $datasetUri: String\n      $input: NewDatasetTableInput\n    )", "content": "{\n      createDatasetTable(datasetUri: $datasetUri, input: $input) {\n        tableUri\n        name\n      }\n    }"}, {"type": "mutation", "name": "AddTablePermission(\n      $tableUri: String!\n      $userName: String!\n      $role: DatasetRole!\n    )", "content": "{\n      addTablePermission(\n        tableUri: $tableUri\n        userName: $userName\n        role: $role\n      ) {\n        tableUri\n      }\n    }"}, {"type": "mutation", "name": "archiveDataset($datasetUri: String!)", "content": "{\n      archiveDataset(datasetUri: $datasetUri)\n    }"}, {"type": "mutation", "name": "CreateDataset($input: NewDatasetInput)", "content": "{\n        createDataset(input: $input) {\n          datasetUri\n          label\n          userRoleForDataset\n        }\n      }"}, {"type": "mutation", "name": "deleteDataset($datasetUri: String!, $deleteFromAWS: Boolean)", "content": "{\n      deleteDataset(datasetUri: $datasetUri, deleteFromAWS: $deleteFromAWS)\n    }"}, {"type": "mutation", "name": "GenerateDatasetAccessToken($datasetUri: String!)", "content": "{\n      generateDatasetAccessToken(datasetUri: $datasetUri)\n    }"}, {"type": "query", "name": "GetCrawlerStatus($datasetUri:String, name:String)", "content": "{\n            getCrawlerStatus(datasetUri:$datasetUri,name:$name){\n                Name\n                AwsAccountId\n                region\n                status\n            }\n        }"}, {"type": "query", "name": "GetDataset($datasetUri: String!)", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        datasetUri\n        owner\n        description\n        label\n        name\n        region\n        created\n        userRoleForDataset\n        SamlAdminGroupName\n        AwsAccountId\n        KmsAlias\n        S3BucketName\n        GlueDatabaseName\n        tags\n        businessOwnerEmail\n        stewards\n        IAMDatasetAdminRoleArn\n        businessOwnerDelegationEmails\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n        topics\n        language\n        confidentiality\n        organization {\n          organizationUri\n          label\n        }\n        terms {\n          count\n          nodes {\n            __typename\n            ... on Term {\n              nodeUri\n              path\n              label\n            }\n          }\n        }\n        environment {\n          environmentUri\n          label\n          region\n          subscriptionsEnabled\n          subscriptionsProducersTopicImported\n          subscriptionsConsumersTopicImported\n          subscriptionsConsumersTopicName\n          subscriptionsProducersTopicName\n          organization {\n            organizationUri\n            label\n          }\n        }\n        statistics {\n          tables\n          locations\n          upvotes\n        }\n      }\n    }"}, {"type": "query", "name": "GetDatasetAssumeRoleUrl($datasetUri: String!)", "content": "{\n      getDatasetAssumeRoleUrl(datasetUri: $datasetUri)\n    }"}, {"type": "query", "name": "GetDatasetETLCredentials($datasetUri: String!)", "content": "{\n      getDatasetETLCredentials(datasetUri: $datasetUri)\n    }"}, {"type": "query", "name": "GetDatasetPresignedUrl(\n      $datasetUri: String!\n      $input: DatasetPresignedUrlInput\n    )", "content": "{\n      getDatasetPresignedUrl(datasetUri: $datasetUri, input: $input)\n    }"}, {"type": "query", "name": "GetDataset($datasetUri: String!, $filter: DatasetTableFilter)", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        tables(filter: $filter) {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            tableUri\n            created\n            GlueTableName\n            GlueDatabaseName\n            description\n            stage\n            userRoleForTable\n            columns {\n              count\n              page\n              pages\n              hasNext\n              hasPrevious\n              nodes {\n                name\n                columnUri\n                label\n                typeName\n                columnType\n              }\n            }\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "getDatasetStorageLocation($locationUri: String!)", "content": "{\n      getDatasetStorageLocation(locationUri: $locationUri) {\n        dataset {\n          datasetUri\n          name\n          userRoleForDataset\n          region\n          SamlAdminGroupName\n          S3BucketName\n          AwsAccountId\n          owner\n          organization {\n            label\n          }\n          environment {\n            label\n            region\n            subscriptionsEnabled\n            subscriptionsProducersTopicImported\n            subscriptionsConsumersTopicImported\n            subscriptionsConsumersTopicName\n            subscriptionsProducersTopicName\n          }\n        }\n        owner\n        description\n        created\n        tags\n        locationUri\n        AwsAccountId\n        label\n        name\n        S3Prefix\n        terms {\n          count\n          nodes {\n            nodeUri\n            path\n            label\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetDatasetSummary($datasetUri: String!)", "content": "{\n      getDatasetSummary(datasetUri: $datasetUri)\n    }"}, {"type": "mutation", "name": "ImportDataset($input: ImportDatasetInput)", "content": "{\n      importDataset(input: $input) {\n        datasetUri\n        label\n        userRoleForDataset\n      }\n    }"}, {"type": "query", "name": "GetDataset($filter: DatasetContributorFilter, $datasetUri: String!)", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        datasetUri\n        contributors(filter: $filter) {\n          count\n          page\n          pageSize\n          hasNext\n          hasPrevious\n          pages\n          nodes {\n            userName\n            userRoleForDataset\n            userRoleInEnvironment\n            created\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetDataset($filter: DatasetLoaderFilter, $datasetUri: String!)", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        datasetUri\n        loaders(filter: $filter) {\n          count\n          page\n          pageSize\n          hasNext\n          hasPrevious\n          pages\n          nodes {\n            loaderUri\n            description\n            label\n            IAMPrincipalArn\n            description\n            label\n            tags\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetDataset($datasetUri:String!,$filter:DatasetTableFilter)", "content": "{\n                getDataset(datasetUri:$datasetUri){\n                    datasetUri\n                    locations(filter:$filer){\n                        count\n                        page\n                        pages\n                        hasNext\n                        hasPrevious\n                        nodes{\n                            locationUri\n                            created\n                            label\n                        }\n                    }\n\n                }\n                    tables(filter:$filter){\n                        count\n                        page\n                        pages\n                        hasNext\n                        hasPrevious\n                        nodes{\n                            datasetUri\n                            tableUri\n                            created\n                            GlueTableName\n                            label\n                        }\n                    }\n\n                }\n            }"}, {"type": "query", "name": "GetDataset(\n      $datasetUri: String!\n      $filter: DatasetStorageLocationFilter\n    )", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        datasetUri\n        locations(filter: $filter) {\n          count\n          nodes {\n            locationUri\n            created\n            S3Prefix\n            name\n            description\n            created\n            userRoleForStorageLocation\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetDataset($datasetUri: String!, $filter: DatasetTableFilter)", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        tables(filter: $filter) {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            dataset {\n              datasetUri\n            }\n            terms {\n              nodes {\n                label\n              }\n            }\n            tableUri\n            name\n            created\n            GlueTableName\n            GlueDatabaseName\n            description\n            stage\n            S3Prefix\n            userRoleForTable\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "ListDatasets($filter: DatasetFilter)", "content": "{\n      listDatasets(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          datasetUri\n          owner\n          description\n          region\n          label\n          created\n          SamlAdminGroupName\n          userRoleForDataset\n          userRoleInEnvironment\n          GlueDatabaseName\n          tags\n          topics\n          organization {\n            organizationUri\n            label\n          }\n          AwsAccountId\n          environment {\n            label\n            AwsAccountId\n            region\n          }\n          stack {\n            status\n          }\n          statistics {\n            tables\n            locations\n            upvotes\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listDeltaLakeCrawlerRuns($datasetUri: String!)", "content": "{\n      listDeltaLakeCrawlerRuns(datasetUri: $datasetUri) {\n        datasetUri\n        GlueJobName\n        GlueJobRunId\n        AwsAccountId\n        GlueTriggerName\n        created\n        status\n        owner\n      }\n    }"}, {"type": "query", "name": "ListDatasetShareObjects(\n      $datasetUri: String!\n      $filter: ShareObjectFilter\n    )", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        shares(filter: $filter) {\n          page\n          pages\n          pageSize\n          hasPrevious\n          hasNext\n          count\n          nodes {\n            owner\n            created\n            deleted\n            shareUri\n            status\n            userRoleForShareObject\n            principal {\n              principalId\n              principalType\n              principalName\n              principalIAMRoleName\n              SamlGroupName\n              environmentUri\n              environmentName\n              AwsAccountId\n              region\n              organizationUri\n              organizationName\n            }\n            statistics {\n              tables\n              locations\n              sharedItems\n              revokedItems\n              failedItems\n              pendingItems\n            }\n            dataset {\n              datasetUri\n              datasetName\n              SamlAdminGroupName\n              environmentName\n              exists\n            }\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetDatasetTable($tableUri: String!)", "content": "{\n      getDatasetTable(tableUri: $tableUri) {\n        tableUri\n        userRoleForTable\n        permissions {\n          count\n          nodes {\n            userName\n            userRoleForTable\n            created\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "publishDatasetStorageLocationUpdate($locationUri: String!)", "content": "{\n      publishDatasetStorageLocationUpdate(locationUri: $locationUri)\n    }"}, {"type": "mutation", "name": "publishDatasetUpdate($datasetUri: String!, $s3Prefix: String!)", "content": "{\n      publishDatasetUpdate(datasetUri: $datasetUri, s3Prefix: $s3Prefix)\n    }"}, {"type": "mutation", "name": "RemoveDatasetContributor($datasetUri: String, $userName: String)", "content": "{\n      removeDatasetContributor(datasetUri: $datasetUri, userName: $userName) {\n        datasetUri\n        label\n        userRoleForDataset\n      }\n    }"}, {"type": "mutation", "name": "RemoveDatasetLoader($loaderUri: String)", "content": "{\n      removeDatasetLoader(loaderUri: $loaderUri)\n    }"}, {"type": "mutation", "name": "DeleteDatasetStorageLocation($locationUri: String)", "content": "{\n      deleteDatasetStorageLocation(locationUri: $locationUri)\n    }"}, {"type": "mutation", "name": "RemoveTablePermission($tableUri: String!, $userName: String!)", "content": "{\n      removeTablePermission(tableUri: $tableUri, userName: $userName)\n    }"}, {"type": "mutation", "name": "SaveDatasetSummary($datasetUri: String!, $content: String)", "content": "{\n      saveDatasetSummary(datasetUri: $datasetUri, content: $content)\n    }"}, {"type": "mutation", "name": "StartGlueCrawler($datasetUri: String, $input: CrawlerInput)", "content": "{\n      startGlueCrawler(datasetUri: $datasetUri, input: $input) {\n        Name\n        AwsAccountId\n        region\n        status\n      }\n    }"}, {"type": "mutation", "name": "SyncTables($datasetUri: String!)", "content": "{\n      syncTables(datasetUri: $datasetUri) {\n        count\n        nodes {\n          tableUri\n          GlueTableName\n          GlueDatabaseName\n          description\n          name\n          label\n          created\n          S3Prefix\n          dataset {\n            datasetUri\n            name\n            GlueDatabaseName\n            userRoleForDataset\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "UpdateDataset($datasetUri: String, $input: ModifyDatasetInput)", "content": "{\n        updateDataset(datasetUri: $datasetUri, input: $input) {\n          datasetUri\n          label\n          tags\n          userRoleForDataset\n        }\n      }"}, {"type": "mutation", "name": "UpdateDatasetContributor(\n      $datasetUri: String\n      $userName: String\n      $role: DatasetRole\n    )", "content": "{\n      updateDatasetContributor(\n        datasetUri: $datasetUri\n        userName: $userName\n        role: $role\n      ) {\n        datasetUri\n        label\n        userRoleForDataset\n      }\n    }"}, {"type": "mutation", "name": "updateDatasetStack($datasetUri: String!)", "content": "{\n      updateDatasetStack(datasetUri: $datasetUri)\n    }"}, {"type": "mutation", "name": "updateDatasetStorageLocation(\n      $locationUri: String!\n      $input: ModifyDatasetStorageLocationInput!\n    )", "content": "{\n      updateDatasetStorageLocation(locationUri: $locationUri, input: $input) {\n        locationUri\n      }\n    }"}, {"type": "mutation", "name": "CreateDatasetQualityRule(\n      $datasetUri: String!\n      $input: NewDatasetQualityRuleInput\n    )", "content": "{\n      createDatasetQualityRule(datasetUri: $datasetUri, input: $input) {\n        ruleUri\n        name\n        label\n        description\n        created\n        query\n      }\n    }"}, {"type": "mutation", "name": "DeleteDatasetQualityRule($ruleUri: String!)", "content": "{\n      deleteDatasetQualityRule(ruleUri: $ruleUri)\n    }"}, {"type": "query", "name": "GetDatasetQualityRule($ruleUri: String!)", "content": "{\n      getDatasetQualityRule(ruleUri: $ruleUri) {\n        ruleUri\n        name\n        label\n        description\n        created\n        query\n      }\n    }"}, {"type": "query", "name": "ListDatasetQualityRules(\n      $datasetUri: String!\n      $filter: DatasetQualityRuleFilter\n    )", "content": "{\n      listDatasetQualityRules(datasetUri: $datasetUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          ruleUri\n          name\n          label\n          description\n          created\n          query\n        }\n      }\n    }"}, {"type": "mutation", "name": "UpdateDatasetQualityRule(\n      $ruleUri: String!\n      $input: ModifyDatasetQualityRuleInput\n    )", "content": "{\n      updateDatasetQualityRule(ruleUri: $ruleUri, input: $input) {\n        ruleUri\n        name\n        label\n        description\n        created\n        query\n      }\n    }"}, {"type": "mutation", "name": "deleteDatasetTable($tableUri: String!)", "content": "{\n      deleteDatasetTable(tableUri: $tableUri)\n    }"}, {"type": "query", "name": "getDatasetTableProfilingReport($jobUri: String!)", "content": "{\n      getDatasetTableProfilingReport(jobUri: $jobUri)\n    }"}, {"type": "query", "name": "GetDatasetTable($tableUri: String!)", "content": "{\n      getDatasetTable(tableUri: $tableUri) {\n        dataset {\n          datasetUri\n          name\n          userRoleForDataset\n          region\n          SamlAdminGroupName\n          owner\n          organization {\n            label\n          }\n          environment {\n            label\n            region\n            subscriptionsEnabled\n            subscriptionsProducersTopicImported\n            subscriptionsConsumersTopicImported\n            subscriptionsConsumersTopicName\n            subscriptionsProducersTopicName\n          }\n        }\n        datasetUri\n        owner\n        description\n        created\n        tags\n        tableUri\n        AwsAccountId\n        GlueTableName\n        GlueDatabaseName\n        LastGlueTableStatus\n        label\n        name\n        S3Prefix\n        GlueTableProperties\n        terms {\n          count\n          nodes {\n            nodeUri\n            path\n            label\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "getDatasetTableProfilingRun($tableUri: String!)", "content": "{\n      getDatasetTableProfilingRun(tableUri: $tableUri) {\n        profilingRunUri\n        status\n        GlueTableName\n        datasetUri\n        GlueJobName\n        GlueJobRunId\n        GlueTriggerSchedule\n        GlueTriggerName\n        GlueTableName\n        AwsAccountId\n        results\n        status\n      }\n    }"}, {"type": "query", "name": "GetSharedDatasetTables($datasetUri: String!, $envUri: String!)", "content": "{\n        getSharedDatasetTables(datasetUri: $datasetUri, envUri: $envUri) {\n          tableUri\n          GlueTableName\n        }\n    }"}, {"type": "query", "name": "ListDatasetTableColumns(\n      $tableUri: String!\n      $filter: DatasetTableColumnFilter\n    )", "content": "{\n      listDatasetTableColumns(tableUri: $tableUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          columnUri\n          name\n          label\n          description\n          typeName\n          columnType\n          terms {\n            count\n            page\n            pages\n            nodes {\n              linkUri\n              term {\n                label\n                created\n                path\n                nodeUri\n              }\n            }\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetDatasetTable($tableUri: String!)", "content": "{\n      getDatasetTable(tableUri: $tableUri) {\n        datasetUri\n        owner\n        created\n        tableUri\n        AwsAccountId\n        GlueTableName\n        profilingJobs {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            jobUri\n            created\n            status\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listDatasetTableProfilingRuns($tableUri: String!)", "content": "{\n      listDatasetTableProfilingRuns(tableUri: $tableUri) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          profilingRunUri\n          GlueJobRunId\n          GlueTableName\n          results\n          created\n          status\n        }\n      }\n    }"}, {"type": "query", "name": "PreviewTable($tableUri: String!, $queryExecutionId: String)", "content": "{\n      previewTable(tableUri: $tableUri, queryExecutionId: $queryExecutionId) {\n        count\n        status\n        queryExecutionId\n        nodes {\n          data\n        }\n      }\n    }"}, {"type": "query", "name": "PreviewTable2($tableUri: String!)", "content": "{\n      previewTable2(tableUri: $tableUri) {\n        rows\n        fields\n      }\n    }"}, {"type": "mutation", "name": "publishDatasetTableUpdate($tableUri: String!)", "content": "{\n      publishDatasetTableUpdate(tableUri: $tableUri)\n    }"}, {"type": "mutation", "name": "StartProfilingJob($tableUri: String!)", "content": "{\n      startProfilingJob(tableUri: $tableUri) {\n        jobUri\n      }\n    }"}, {"type": "mutation", "name": "startDatasetProfilingRun($input: StartDatasetProfilingRunInput!)", "content": "{\n      startDatasetProfilingRun(input: $input) {\n        profilingRunUri\n      }\n    }"}, {"type": "mutation", "name": "SyncDatasetTableColumns($tableUri: String!)", "content": "{\n      syncDatasetTableColumns(tableUri: $tableUri) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          columnUri\n          name\n          description\n          typeName\n        }\n      }\n    }"}, {"type": "mutation", "name": "UpdateDatasetTable(\n      $tableUri: String!\n      $input: ModifyDatasetTableInput!\n    )", "content": "{\n      updateDatasetTable(tableUri: $tableUri, input: $input) {\n        tableUri\n      }\n    }"}, {"type": "mutation", "name": "updateDatasetTableColumn(\n      $columnUri: String!\n      $input: DatasetTableColumnInput\n    )", "content": "{\n      updateDatasetTableColumn(columnUri: $columnUri, input: $input) {\n        columnUri\n        description\n      }\n    }"}, {"type": "mutation", "name": "addConsumptionRoleToEnvironment($input: AddConsumptionRoleToEnvironmentInput!)", "content": "{\n      addConsumptionRoleToEnvironment(input: $input) {\n        consumptionRoleUri\n        consumptionRoleName\n        environmentUri\n        groupUri\n        IAMRoleArn\n      }\n    }"}, {"type": "mutation", "name": "deleteEnvironment(\n      $environmentUri: String!\n      $deleteFromAWS: Boolean\n    )", "content": "{\n      deleteEnvironment(\n        environmentUri: $environmentUri\n        deleteFromAWS: $deleteFromAWS\n      )\n    }"}, {"type": "mutation", "name": "CreateEnvironment($input: NewEnvironmentInput)", "content": "{\n      createEnvironment(input: $input) {\n        environmentUri\n        label\n        userRoleInEnvironment\n        SamlGroupName\n        AwsAccountId\n        created\n        dashboardsEnabled\n        notebooksEnabled\n        mlStudiosEnabled\n        pipelinesEnabled\n        warehousesEnabled\n      }\n    }"}, {"type": "mutation", "name": "DisableDataSubscriptions($environmentUri: String!)", "content": "{\n      DisableDataSubscriptions(environmentUri: $environmentUri)\n    }"}, {"type": "mutation", "name": "enableDataSubscriptions(\n      $environmentUri: String!\n      $input: EnableDataSubscriptionsInput\n    )", "content": "{\n      enableDataSubscriptions(environmentUri: $environmentUri, input: $input)\n    }"}, {"type": "query", "name": "GenerateEnvironmentAccessToken(\n      $environmentUri: String!\n      $groupUri: String\n    )", "content": "{\n      generateEnvironmentAccessToken(\n        environmentUri: $environmentUri\n        groupUri: $groupUri\n      )\n    }"}, {"type": "query", "name": "GetEnvironment($environmentUri: String)", "content": "{\n      getEnvironment(environmentUri: $environmentUri) {\n        environmentUri\n        created\n        userRoleInEnvironment\n        description\n        name\n        label\n        AwsAccountId\n        dashboardsEnabled\n        notebooksEnabled\n        mlStudiosEnabled\n        pipelinesEnabled\n        warehousesEnabled\n        region\n        owner\n        tags\n        SamlGroupName\n        EnvironmentDefaultBucketName\n        EnvironmentDefaultIAMRoleArn\n        EnvironmentDefaultIAMRoleName\n        EnvironmentDefaultIAMRoleImported\n        resourcePrefix\n        subscriptionsEnabled\n        subscriptionsProducersTopicImported\n        subscriptionsConsumersTopicImported\n        subscriptionsConsumersTopicName\n        subscriptionsProducersTopicName\n        organization {\n          organizationUri\n          label\n          name\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n        dashboardsEnabled\n        notebooksEnabled\n        mlStudiosEnabled\n        pipelinesEnabled\n        warehousesEnabled\n        networks {\n          VpcId\n          privateSubnetIds\n          publicSubnetIds\n        }\n      }\n    }"}, {"type": "query", "name": "getEnvironmentAssumeRoleUrl(\n      $environmentUri: String!\n      $groupUri: String\n    )", "content": "{\n      getEnvironmentAssumeRoleUrl(\n        environmentUri: $environmentUri\n        groupUri: $groupUri\n      )\n    }"}, {"type": "query", "name": "getPivotRoleExternalId($organizationUri: String!)", "content": "{\n      getPivotRoleExternalId(organizationUri: $organizationUri)\n    }"}, {"type": "query", "name": "getPivotRoleName($organizationUri: String!)", "content": "{\n      getPivotRoleName(organizationUri: $organizationUri)\n    }"}, {"type": "query", "name": "getPivotRolePresignedUrl($organizationUri: String!)", "content": "{\n      getPivotRolePresignedUrl(organizationUri: $organizationUri)\n    }"}, {"type": "query", "name": "GetTrustAccount", "content": "{\n      getTrustAccount\n    }"}, {"type": "mutation", "name": "inviteGroupOnEnvironment($input: InviteGroupOnEnvironmentInput!)", "content": "{\n      inviteGroupOnEnvironment(input: $input) {\n        environmentUri\n      }\n    }"}, {"type": "query", "name": "listAllEnvironmentConsumptionRoles(\n      $filter: ConsumptionRoleFilter\n      $environmentUri: String!\n    )", "content": "{\n      listAllEnvironmentConsumptionRoles(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          consumptionRoleUri\n          consumptionRoleName\n          environmentUri\n          groupUri\n          IAMRoleArn\n        }\n      }\n    }"}, {"type": "query", "name": "listAllEnvironmentGroups(\n      $filter: GroupFilter\n      $environmentUri: String!\n    )", "content": "{\n      listAllEnvironmentGroups(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          groupUri\n          invitedBy\n          created\n          description\n          environmentIAMRoleArn\n          environmentIAMRoleName\n          environmentAthenaWorkGroup\n          environmentPermissions(environmentUri: $environmentUri) {\n            name\n            permissionUri\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listDataItemsSharedWithEnvGroup(\n      $filter: EnvironmentDataItemFilter\n      $environmentUri: String\n      $groupUri: String\n    )", "content": "{\n      listDataItemsSharedWithEnvGroup(\n        environmentUri: $environmentUri\n        groupUri: $groupUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          shareUri\n          environmentName\n          environmentUri\n          organizationName\n          organizationUri\n          datasetUri\n          datasetName\n          itemType\n          itemAccess\n          GlueDatabaseName\n          GlueTableName\n          S3AccessPointName\n          created\n          principalId\n        }\n      }\n    }"}, {"type": "query", "name": "ListDatasetsCreatedInEnvironment(\n      $filter: DatasetFilter\n      $environmentUri: String\n    )", "content": "{\n      listDatasetsCreatedInEnvironment(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          datasetUri\n          label\n          AwsAccountId\n          region\n          GlueDatabaseName\n          SamlAdminGroupName\n          name\n          S3BucketName\n          created\n          owner\n          stack {\n            status\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listDatasetsOwnedByEnvGroup(\n      $filter: DatasetFilter\n      $environmentUri: String\n      $groupUri: String\n    )", "content": "{\n      listDatasetsOwnedByEnvGroup(\n        environmentUri: $environmentUri\n        groupUri: $groupUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          datasetUri\n          label\n          AwsAccountId\n          region\n          GlueDatabaseName\n          SamlAdminGroupName\n          name\n          S3BucketName\n          created\n          owner\n          stack {\n            status\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "SearchEnvironmentDataItems(\n      $filter: EnvironmentDataItemFilter\n      $environmentUri: String\n    )", "content": "{\n      searchEnvironmentDataItems(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          shareUri\n          environmentName\n          environmentUri\n          organizationName\n          organizationUri\n          datasetUri\n          datasetName\n          itemType\n          itemAccess\n          GlueDatabaseName\n          GlueTableName\n          S3AccessPointName\n          created\n          principalId\n        }\n      }\n    }"}, {"type": "query", "name": "listEnvironmentConsumptionRoles(\n      $filter: ConsumptionRoleFilter\n      $environmentUri: String!\n    )", "content": "{\n      listEnvironmentConsumptionRoles(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          consumptionRoleUri\n          consumptionRoleName\n          environmentUri\n          groupUri\n          IAMRoleArn\n        }\n      }\n    }"}, {"type": "query", "name": "listEnvironmentGroups(\n      $filter: GroupFilter\n      $environmentUri: String!\n    )", "content": "{\n      listEnvironmentGroups(environmentUri: $environmentUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          groupUri\n          invitedBy\n          created\n          description\n          environmentIAMRoleArn\n          environmentIAMRoleName\n          environmentAthenaWorkGroup\n          environmentPermissions(environmentUri: $environmentUri) {\n            name\n            permissionUri\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "getEnvironment(\n      $filter: OrganizationUserFilter\n      $environmentUri: String\n    )", "content": "{\n      getEnvironment(environmentUri: $environmentUri) {\n        environmentUri\n        userRoleInEnvironment\n        users(filter: $filter) {\n          count\n          nodes {\n            userName\n            userRoleInEnvironment\n            created\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listEnvironmentNetworks(\n      $filter: VpcFilter\n      $environmentUri: String!\n    )", "content": "{\n      listEnvironmentNetworks(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          VpcId\n          vpcUri\n          label\n          name\n          default\n          SamlGroupName\n          publicSubnetIds\n          privateSubnetIds\n          region\n        }\n      }\n    }"}, {"type": "query", "name": "getEnvironment(\n      $filter: OrganizationUserFilter\n      $environmentUri: String\n    )", "content": "{\n      getEnvironment(environmentUri: $environmentUri) {\n        environmentUri\n        userRoleInEnvironment\n        notMembers(filter: $filter) {\n          count\n          nodes {\n            userName\n            userRoleInEnvironment\n            created\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listEnvironmentGroupInvitationPermissions($environmentUri: String)", "content": "{\n      listEnvironmentGroupInvitationPermissions(\n        environmentUri: $environmentUri\n      ) {\n        permissionUri\n        name\n        description\n      }\n    }"}, {"type": "query", "name": "ListEnvironments($filter: EnvironmentFilter)", "content": "{\n      listEnvironments(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          environmentUri\n          userRoleInEnvironment\n          name\n          label\n          description\n          AwsAccountId\n          region\n          created\n          owner\n          tags\n          SamlGroupName\n          EnvironmentDefaultIAMRoleName\n          networks {\n            VpcId\n            privateSubnetIds\n            publicSubnetIds\n          }\n          stack {\n            stack\n            status\n            stackUri\n            targetUri\n            accountid\n            region\n            stackid\n            link\n            outputs\n            resources\n          }\n          organization {\n            organizationUri\n            name\n            label\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listEnvironmentGroups($filter: GroupFilter, $environmentUri: String)", "content": "{\n      listEnvironmentGroups(environmentUri: $environmentUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          groupUri\n          invitedBy\n          created\n          description\n        }\n      }\n    }"}, {"type": "query", "name": "getOrg($organizationUri: String, $filter: EnvironmentFilter)", "content": "{\n      getOrganization(organizationUri: $organizationUri) {\n        environments(filter: $filter) {\n          count\n          page\n          pageSize\n          hasNext\n          pages\n          hasPrevious\n          nodes {\n            environmentUri\n            label\n            name\n            description\n            owner\n            region\n            EnvironmentDefaultIAMRoleArn\n            EnvironmentDefaultIAMRoleName\n            SamlGroupName\n            created\n            deleted\n            validated\n            roleCreated\n            tags\n            environmentType\n            AwsAccountId\n            dashboardsEnabled\n            notebooksEnabled\n            mlStudiosEnabled\n            pipelinesEnabled\n            warehousesEnabled\n            userRoleInEnvironment\n            stack {\n              stack\n              status\n              stackUri\n              targetUri\n              accountid\n              region\n              stackid\n              link\n              outputs\n              resources\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "removeConsumptionRoleFromEnvironment(\n      $environmentUri: String!\n      $consumptionRoleUri: String!\n    )", "content": "{\n      removeConsumptionRoleFromEnvironment(\n        environmentUri: $environmentUri\n        consumptionRoleUri: $consumptionRoleUri\n      )\n    }"}, {"type": "mutation", "name": "removeGroupFromEnvironment(\n      $environmentUri: String!\n      $groupUri: String!\n    )", "content": "{\n      removeGroupFromEnvironment(\n        environmentUri: $environmentUri\n        groupUri: $groupUri\n      ) {\n        environmentUri\n      }\n    }"}, {"type": "mutation", "name": "RemoveUserFromEnvironment(\n      $environmentUri: String!\n      $userName: String!\n    )", "content": "{\n      removeUserFromEnvironment(\n        environmentUri: $environmentUri\n        userName: $userName\n      )\n    }"}, {"type": "mutation", "name": "UpdateEnvironment(\n      $environmentUri: String!\n      $input: ModifyEnvironmentInput\n    )", "content": "{\n      updateEnvironment(environmentUri: $environmentUri, input: $input) {\n        environmentUri\n        label\n        userRoleInEnvironment\n        SamlGroupName\n        AwsAccountId\n        dashboardsEnabled\n        notebooksEnabled\n        mlStudiosEnabled\n        pipelinesEnabled\n        warehousesEnabled\n        created\n      }\n    }"}, {"type": "mutation", "name": "UpdateGroupMember(\n      $environmentUri: String!\n      $userName: String!\n      $role: EnvironmentPermission\n    )", "content": "{\n      updateUserEnvironmentRole(\n        environmentUri: $environmentUri\n        userName: $userName\n        role: $role\n      ) {\n        environmentUri\n      }\n    }"}, {"type": "mutation", "name": "updateEnvironmentStack($environmentUri: String!)", "content": "{\n      updateEnvironmentStack(environmentUri: $environmentUri)\n    }"}, {"type": "mutation", "name": "updateGroupEnvironmentPermissions(\n      $input: InviteGroupOnEnvironmentInput!\n    )", "content": "{\n      updateGroupEnvironmentPermissions(input: $input) {\n        environmentUri\n      }\n    }"}, {"type": "query", "name": "CheckEnvironment($input: AwsEnvironmentInput!)", "content": "{\n      checkEnvironment(input: $input)\n    }"}, {"type": "query", "name": "GetFeed(\n      $targetUri: String!\n      $targetType: String!\n      $filter: FeedMessageFilter\n    )", "content": "{\n      getFeed(targetUri: $targetUri, targetType: $targetType) {\n        target {\n          __typename\n          ... on DatasetTable {\n            label\n          }\n          ... on Dataset {\n            label\n          }\n          ... on DatasetStorageLocation {\n            label\n          }\n          ... on Dashboard {\n            label\n          }\n          ... on Worksheet {\n            label\n          }\n          ... on DataPipeline {\n            label\n          }\n        }\n        messages(filter: $filter) {\n          count\n          hasNext\n          hasPrevious\n          page\n          pages\n          nodes {\n            content\n            feedMessageUri\n            creator\n            created\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "PostFeedMessage(\n      $targetUri: String!\n      $targetType: String!\n      $input: FeedMessageInput!\n    )", "content": "{\n      postFeedMessage(\n        targetUri: $targetUri\n        targetType: $targetType\n        input: $input\n      ) {\n        feedMessageUri\n        content\n        created\n        creator\n      }\n    }"}, {"type": "mutation", "name": "CreateCategory($parentUri: String!, $input: CreateCategoryInput)", "content": "{\n      createCategory(parentUri: $parentUri, input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "CreateTerm($parentUri: String!, $input: CreateTermInput)", "content": "{\n      createTerm(parentUri: $parentUri, input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "ApproveTermAssociation($linkUri: String!)", "content": "{\n      approveTermAssociation(linkUri: $linkUri)\n    }"}, {"type": "mutation", "name": "CreateGlossary($input: CreateGlossaryInput)", "content": "{\n      createGlossary(input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "deleteCategory($nodeUri: String!)", "content": "{\n      deleteCategory(nodeUri: $nodeUri)\n    }"}, {"type": "mutation", "name": "deleteGlossary($nodeUri: String!)", "content": "{\n      deleteGlossary(nodeUri: $nodeUri)\n    }"}, {"type": "mutation", "name": "deleteTerm($nodeUri: String!)", "content": "{\n      deleteTerm(nodeUri: $nodeUri)\n    }"}, {"type": "mutation", "name": "DismissTermAssociation($linkUri: String!)", "content": "{\n      dismissTermAssociation(linkUri: $linkUri)\n    }"}, {"type": "query", "name": "GetGlossary($nodeUri: String!)", "content": "{\n      getGlossary(nodeUri: $nodeUri) {\n        nodeUri\n        label\n        readme\n        created\n        owner\n        status\n        path\n        admin\n        userRoleForGlossary\n        stats {\n          categories\n          terms\n          associations\n        }\n        associations {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            __typename\n            target {\n              ... on Dataset {\n                label\n              }\n              ... on DatasetTable {\n                label\n              }\n            }\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetTerm($nodeUri: String!)", "content": "{\n      getTerm(nodeUri: $nodeUri) {\n        nodeUri\n        label\n        readme\n        created\n        owner\n        status\n        path\n        stats {\n          categories\n          terms\n          associations\n        }\n        associations {\n          count\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            linkUri\n            targetUri\n            approvedByOwner\n            approvedBySteward\n            target {\n              __typename\n              ... on Dataset {\n                label\n              }\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "LinkTerm(\n      $nodeUri: String!\n      $targetUri: String!\n      $targetType: String!\n    )", "content": "{\n      linkTerm(\n        nodeUri: $nodeUri\n        targetUri: $targetUri\n        targetType: $targetType\n      ) {\n        linkUri\n        created\n      }\n    }"}, {"type": "query", "name": "ListAssetLinkedTerms(\n      $uri: String!\n      $filter: GlossaryTermTargetFilter\n    )", "content": "{\n      listAssetLinkedTerms(uri: $uri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          linkUri\n          nodeUri\n          owner\n          created\n          approvedByOwner\n          approvedBySteward\n          term {\n            label\n            readme\n            created\n            owner\n            glossary {\n              label\n              nodeUri\n            }\n            path\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "ListGlossaries($filter: GlossaryFilter)", "content": "{\n      listGlossaries(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          nodeUri\n          label\n          readme\n          created\n          owner\n          path\n          status\n          deleted\n          admin\n          stats {\n            categories\n            terms\n            associations\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetGlossaryTree(\n      $nodeUri: String!\n      $filter: GlossaryTermTargetFilter\n    )", "content": "{\n      getGlossary(nodeUri: $nodeUri) {\n        nodeUri\n        label\n        readme\n        created\n        owner\n        status\n        path\n        admin\n        userRoleForGlossary\n        associations(filter: $filter) {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            linkUri\n            targetUri\n            approvedBySteward\n            term {\n              label\n              nodeUri\n            }\n            targetType\n            target {\n              __typename\n              ... on Dataset {\n                datasetUri\n                name\n                label\n              }\n              ... on DatasetTable {\n                tableUri\n                name\n                label\n              }\n              ... on DatasetStorageLocation {\n                locationUri\n                name\n                label\n              }\n              ... on Dashboard {\n                dashboardUri\n                name\n                label\n              }\n            }\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetGlossaryTree(\n      $nodeUri: String!\n      $filter: GlossaryNodeSearchFilter\n    )", "content": "{\n      getGlossary(nodeUri: $nodeUri) {\n        nodeUri\n        label\n        readme\n        created\n        owner\n        status\n        path\n        admin\n        deleted\n        categories {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            nodeUri\n            parentUri\n            label\n            readme\n            stats {\n              categories\n              terms\n            }\n            status\n            created\n          }\n        }\n        tree(filter: $filter) {\n          count\n          hasNext\n          hasPrevious\n          page\n          pages\n          nodes {\n            __typename\n            ... on Glossary {\n              nodeUri\n              label\n              readme\n              created\n              owner\n              path\n            }\n            ... on Category {\n              nodeUri\n              label\n              parentUri\n              readme\n              created\n              owner\n              path\n            }\n            ... on Term {\n              nodeUri\n              parentUri\n              label\n              readme\n              created\n              owner\n              path\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "RequestLink(\n      $nodeUri: String!\n      $targetUri: String!\n      $targetType: String!\n    )", "content": "{\n      requestLink(\n        nodeUri: $nodeUri\n        targetUri: $targetUri\n        targetType: $targetType\n      ) {\n        linkUri\n        created\n      }\n    }"}, {"type": "query", "name": "SearchGlossary($filter: GlossaryNodeSearchFilter)", "content": "{\n      searchGlossary(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          __typename\n          ... on Glossary {\n            nodeUri\n            label\n            readme\n            created\n            owner\n            path\n          }\n          ... on Category {\n            nodeUri\n            label\n            parentUri\n            readme\n            created\n            owner\n            path\n          }\n          ... on Term {\n            nodeUri\n            parentUri\n            label\n            readme\n            created\n            owner\n            path\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "SearchGlossaryHierarchy($filter: TermFilter, $targetUri: String)", "content": "{\n      searchGlossaryHierarchy(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          __typename\n          ... on Glossary {\n            nodeUri\n            parentUri\n            label\n            readme\n            created\n            owner\n            path\n            isMatch\n          }\n          ... on Category {\n            nodeUri\n            parentUri\n            label\n            readme\n            created\n            owner\n            path\n            isMatch\n          }\n          ... on Term {\n            nodeUri\n            parentUri\n            label\n            readme\n            created\n            owner\n            path\n            isMatch\n            assetLink(targetUri: $targetUri) {\n              nodeUri\n              targetUri\n              created\n              approvedByOwner\n              approvedBySteward\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "UpdateCategory($nodeUri: String!, $input: UpdateCategoryInput)", "content": "{\n      updateCategory(nodeUri: $nodeUri, input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "UpdateGlossary($nodeUri: String!, $input: UpdateGlossaryInput)", "content": "{\n      updateGlossary(nodeUri: $nodeUri, input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "UpdateTerm($nodeUri: String!, $input: UpdateTermInput)", "content": "{\n      updateTerm(nodeUri: $nodeUri, input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "query", "name": "listCognitoGroups (\n      $filter: CognitoGroupFilter\n    )", "content": "{\n      listCognitoGroups (\n        filter: $filter\n      ){\n        groupName\n      }\n    }"}, {"type": "query", "name": "listKeyValueTags($targetUri: String!, $targetType: String!)", "content": "{\n      listKeyValueTags(targetUri: $targetUri, targetType: $targetType) {\n        tagUri\n        targetUri\n        targetType\n        key\n        value\n        cascade\n      }\n    }"}, {"type": "mutation", "name": "updateKeyValueTags($input: UpdateKeyValueTagsInput!)", "content": "{\n      updateKeyValueTags(input: $input) {\n        tagUri\n        targetUri\n        targetType\n        key\n        value\n        cascade\n      }\n    }"}, {"type": "query", "name": "GetMetrics($filter: MetricFilter)", "content": "{\n      getMetrics(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        nodes {\n          metricName\n          metricValue\n          AwsAccountId\n          region\n          created\n        }\n      }\n    }"}, {"type": "mutation", "name": "deleteNotification($notificationUri: String!)", "content": "{\n      deleteNotification(notificationUri: $notificationUri)\n    }"}, {"type": "query", "name": "countDeletedNotifications", "content": "{\n      countDeletedNotifications\n    }"}, {"type": "query", "name": "countReadNotifications", "content": "{\n      countReadNotifications\n    }"}, {"type": "query", "name": "countUnreadNotifications", "content": "{\n      countUnreadNotifications\n    }"}, {"type": "query", "name": "listNotifications($filter: NotificationFilter)", "content": "{\n      listNotifications(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          notificationUri\n          message\n          type\n          is_read\n        }\n      }\n    }"}, {"type": "mutation", "name": "markNotificationAsRead($notificationUri: String!)", "content": "{\n      markNotificationAsRead(notificationUri: $notificationUri)\n    }"}, {"type": "mutation", "name": "createTopic(\n      $organizationUri: String\n      $input: OrganizationTopicInput\n    )", "content": "{\n      createTopic(organizationUri: $organizationUri, input: $input) {\n        topicUri\n        label\n        description\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "ArciveOrg($organizationUri: String!)", "content": "{\n      archiveOrganization(organizationUri: $organizationUri)\n    }"}, {"type": "mutation", "name": "CreateGroup($input: NewGroupInput)", "content": "{\n      createGroup(input: $input) {\n        groupUri\n        label\n        groupRoleInOrganization\n        created\n        userRoleInGroup\n      }\n    }"}, {"type": "mutation", "name": "CreateOrg($input: NewOrganizationInput)", "content": "{\n      createOrganization(input: $input) {\n        organizationUri\n        label\n        created\n      }\n    }"}, {"type": "query", "name": "GetOrganization($organizationUri: String!)", "content": "{\n      getOrganization(organizationUri: $organizationUri) {\n        organizationUri\n        label\n        tags\n        SamlGroupName\n        owner\n        created\n        description\n        userRoleInOrganization\n        stats {\n          environments\n          groups\n        }\n      }\n    }"}, {"type": "mutation", "name": "inviteGroupToOrganization(\n      $input: InviteGroupToOrganizationInput!\n    )", "content": "{\n      inviteGroupToOrganization(input: $input) {\n        organizationUri\n      }\n    }"}, {"type": "mutation", "name": "InviteUser($input: NewOrganizationUserInput)", "content": "{\n      inviteUser(input: $input) {\n        userName\n        userRoleInOrganization\n        created\n      }\n    }"}, {"type": "query", "name": "listOrganizationGroups(\n      $filter: GroupFilter\n      $organizationUri: String!\n    )", "content": "{\n      listOrganizationGroups(\n        organizationUri: $organizationUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          groupUri\n          invitedBy\n          created\n        }\n      }\n    }"}, {"type": "query", "name": "getOrg($organizationUri: String, $filter: GroupFilter)", "content": "{\n      getOrganization(organizationUri: $organizationUri) {\n        groups(filter: $filter) {\n          count\n          nodes {\n            groupUri\n            label\n            created\n            groupRoleInOrganization\n            userRoleInGroup\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listOrganizationGroups(\n      $filter: GroupFilter\n      $organizationUri: String!\n    )", "content": "{\n      listOrganizationGroups(\n        organizationUri: $organizationUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          groupUri\n          invitedBy\n          created\n        }\n      }\n    }"}, {"type": "query", "name": "ListOrganizationTopics(\n      $organizationUri: String\n      $filter: OrganizationTopicFilter\n    )", "content": "{\n      listOrganizationTopics(\n        organizationUri: $organizationUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          label\n          topicUri\n          description\n        }\n      }\n    }"}, {"type": "query", "name": "getOrg($organizationUri: String, $filter: OrganizationUserFilter)", "content": "{\n        getOrganization(organizationUri: $organizationUri) {\n          organizationUri\n          label\n          userRoleInOrganization\n          users(filter: $filter) {\n            count\n            page\n            pageSize\n            pages\n            hasNext\n            hasPrevious\n            nodes {\n              userName\n              created\n              userRoleInOrganization\n            }\n          }\n        }\n      }"}, {"type": "query", "name": "ListOrg($filter: OrganizationFilter)", "content": "{\n      listOrganizations(filter: $filter) {\n        count\n        nextPage\n        previousPage\n        pages\n        hasNext\n        hasPrevious\n        pageSize\n        page\n        nodes {\n          organizationUri\n          label\n          name\n          owner\n          created\n          description\n          SamlGroupName\n          tags\n          userRoleInOrganization\n          stats {\n            groups\n            users\n            environments\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "removeGroupFromOrganization(\n      $organizationUri: String!\n      $groupUri: String!\n    )", "content": "{\n      removeGroupFromOrganization(\n        organizationUri: $organizationUri\n        groupUri: $groupUri\n      ) {\n        organizationUri\n      }\n    }"}, {"type": "mutation", "name": "RemoveUser($input: RemoveOrganizationUserInput)", "content": "{\n      removeUser(input: $input)\n    }"}, {"type": "mutation", "name": "UpdateGroup($groupUri: String, $input: ModifyGroupInput)", "content": "{\n      updateGroup(groupUri: $groupUri, input: $input) {\n        groupUri\n        groupRoleInOrganization\n        userRoleInGroup\n        created\n        updated\n      }\n    }"}, {"type": "mutation", "name": "UpdateOrg(\n      $organizationUri: String\n      $input: ModifyOrganizationInput\n    )", "content": "{\n      updateOrganization(organizationUri: $organizationUri, input: $input) {\n        organizationUri\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "UpdateTopic($topicUri: String, $input: OrganizationTopicInput)", "content": "{\n      updateTopic(organizationUri: $organizationUri, input: $input) {\n        topicUri\n        label\n        description\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "UpdateUser($input: ModifyOrganizationUserInput)", "content": "{\n      updateUser(input: $input) {\n        userName\n        userRoleInOrganization\n        created\n      }\n    }"}, {"type": "query", "name": "SearchPrincipal($filter: PrincipalFilter)", "content": "{\n      searchPrincipal(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          principalId\n          principalType\n          principalName\n          SamlGroupName\n          environmentUri\n          environmentName\n          AwsAccountId\n          region\n          organizationUri\n          organizationName\n        }\n      }\n    }"}, {"type": "mutation", "name": "addDatasetToRedshiftCluster(\n      $clusterUri: String\n      $datasetUri: String\n    )", "content": "{\n      addDatasetToRedshiftCluster(\n        clusterUri: $clusterUri\n        datasetUri: $datasetUri\n      )\n    }"}, {"type": "mutation", "name": "enableRedshiftClusterDatasetTableCopy(\n      $clusterUri: String!\n      $datasetUri: String!\n      $tableUri: String!\n      $schema: String!\n      $dataLocation: String\n    )", "content": "{\n      enableRedshiftClusterDatasetTableCopy(\n        clusterUri: $clusterUri\n        datasetUri: $datasetUri\n        tableUri: $tableUri\n        schema: $schema\n        dataLocation: $dataLocation\n      )\n    }"}, {"type": "mutation", "name": "createRedshiftCluster(\n      $environmentUri: String!\n      $clusterInput: NewClusterInput!\n    )", "content": "{\n      createRedshiftCluster(\n        environmentUri: $environmentUri\n        clusterInput: $clusterInput\n      ) {\n        clusterUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "deleteRedshiftCluster(\n      $clusterUri: String!\n      $deleteFromAWS: Boolean\n    )", "content": "{\n      deleteRedshiftCluster(\n        clusterUri: $clusterUri\n        deleteFromAWS: $deleteFromAWS\n      )\n    }"}, {"type": "mutation", "name": "disableRedshiftClusterDatasetTableCopy(\n      $clusterUri: String\n      $datasetUri: String\n      $tableUri: String\n    )", "content": "{\n      disableRedshiftClusterDatasetTableCopy(\n        clusterUri: $clusterUri\n        datasetUri: $datasetUri\n        tableUri: $tableUri\n      )\n    }"}, {"type": "mutation", "name": "enableRedshiftClusterDatasetCopy(\n      $clusterUri: String\n      $datasetUri: String\n    )", "content": "{\n      enableRedshiftClusterDatasetCopy(\n        clusterUri: $clusterUri\n        datasetUri: $datasetUri\n      )\n    }"}, {"type": "query", "name": "GetRedshiftCluster($clusterUri: String!)", "content": "{\n      getRedshiftCluster(clusterUri: $clusterUri) {\n        clusterUri\n        environmentUri\n        name\n        label\n        description\n        tags\n        owner\n        created\n        updated\n        AwsAccountId\n        region\n        clusterArn\n        clusterName\n        created\n        databaseName\n        databaseUser\n        datahubSecret\n        masterUsername\n        masterSecret\n        masterDatabaseName\n        nodeType\n        numberOfNodes\n        kmsAlias\n        status\n        subnetGroupName\n        CFNStackName\n        CFNStackStatus\n        CFNStackArn\n        port\n        endpoint\n        IAMRoles\n        subnetIds\n        vpc\n        securityGroupIds\n        userRoleForCluster\n        userRoleInEnvironment\n        imported\n        SamlGroupName\n        organization {\n          organizationUri\n          label\n          name\n        }\n        environment {\n          environmentUri\n          label\n          name\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n      }\n    }"}, {"type": "query", "name": "getRedshiftClusterConsoleAccess($clusterUri: String!)", "content": "{\n      getRedshiftClusterConsoleAccess(clusterUri: $clusterUri)\n    }"}, {"type": "query", "name": "getRedshiftClusterDatabaseCredentials($clusterUri: String!)", "content": "{\n      getRedshiftClusterDatabaseCredentials(clusterUri: $clusterUri) {\n        clusterUri\n        user\n        database\n        port\n        endpoint\n        password\n      }\n    }"}, {"type": "mutation", "name": "importRedshiftCluster(\n      $environmentUri: String!\n      $clusterInput: ImportClusterInput!\n    )", "content": "{\n      importRedshiftCluster(\n        environmentUri: $environmentUri\n        clusterInput: $clusterInput\n      ) {\n        clusterUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "query", "name": "listRedshiftClusterAvailableDatasetTables(\n      $clusterUri: String!\n      $filter: DatasetTableFilter\n    )", "content": "{\n      listRedshiftClusterAvailableDatasetTables(\n        clusterUri: $clusterUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        count\n        nodes {\n          datasetUri\n          tableUri\n          name\n          label\n          GlueDatabaseName\n          GlueTableName\n          S3Prefix\n          dataset {\n            S3BucketName\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "ListRedshiftClusterAvailableDatasets(\n      $clusterUri: String!\n      $filter: RedshiftClusterDatasetFilter\n    )", "content": "{\n      listRedshiftClusterAvailableDatasets(\n        clusterUri: $clusterUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          datasetUri\n          name\n          AwsAccountId\n          region\n          S3BucketName\n          GlueDatabaseName\n          created\n          owner\n          label\n          region\n          tags\n          userRoleForDataset\n          redshiftClusterPermission(clusterUri: $clusterUri)\n          description\n          organization {\n            name\n            organizationUri\n            label\n          }\n          statistics {\n            tables\n            locations\n          }\n          environment {\n            environmentUri\n            name\n            AwsAccountId\n            SamlGroupName\n            region\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listRedshiftClusterCopyEnabledTables(\n      $clusterUri: String!\n      $filter: DatasetTableFilter\n    )", "content": "{\n      listRedshiftClusterCopyEnabledTables(\n        clusterUri: $clusterUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        count\n        nodes {\n          datasetUri\n          tableUri\n          name\n          label\n          GlueDatabaseName\n          GlueTableName\n          S3Prefix\n          AwsAccountId\n          RedshiftSchema(clusterUri: $clusterUri)\n          RedshiftCopyDataLocation(clusterUri: $clusterUri)\n        }\n      }\n    }"}, {"type": "query", "name": "ListRedshiftClusterDatasets(\n      $clusterUri: String!\n      $filter: RedshiftClusterDatasetFilter\n    )", "content": "{\n      listRedshiftClusterDatasets(clusterUri: $clusterUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          datasetUri\n          name\n          AwsAccountId\n          region\n          S3BucketName\n          GlueDatabaseName\n          created\n          owner\n          label\n          region\n          tags\n          userRoleForDataset\n          redshiftClusterPermission(clusterUri: $clusterUri)\n          redshiftDataCopyEnabled(clusterUri: $clusterUri)\n          description\n          organization {\n            name\n            organizationUri\n            label\n          }\n          statistics {\n            tables\n            locations\n          }\n          environment {\n            environmentUri\n            name\n            AwsAccountId\n            SamlGroupName\n            region\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listEnvironmentClusters(\n      $environmentUri: String!\n      $filter: RedshiftClusterFilter\n    )", "content": "{\n      listEnvironmentClusters(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          clusterUri\n          environmentUri\n          name\n          label\n          description\n          tags\n          owner\n          created\n          updated\n          AwsAccountId\n          region\n          clusterArn\n          clusterName\n          created\n          databaseName\n          databaseUser\n          masterUsername\n          masterDatabaseName\n          nodeType\n          numberOfNodes\n          kmsAlias\n          status\n          subnetGroupName\n          CFNStackName\n          CFNStackStatus\n          CFNStackArn\n          port\n          endpoint\n          IAMRoles\n          subnetIds\n          securityGroupIds\n          userRoleForCluster\n          userRoleInEnvironment\n          imported\n          stack {\n            status\n          }\n          vpc\n          organization {\n            organizationUri\n            label\n            name\n          }\n          environment {\n            environmentUri\n            label\n            name\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "pauseRedshiftCluster($clusterUri: String!)", "content": "{\n      pauseRedshiftCluster(clusterUri: $clusterUri)\n    }"}, {"type": "mutation", "name": "rebootRedshiftCluster($clusterUri: String!)", "content": "{\n      rebootRedshiftCluster(clusterUri: $clusterUri)\n    }"}, {"type": "mutation", "name": "removeDatasetFromRedshiftCluster(\n      $clusterUri: String\n      $datasetUri: String\n    )", "content": "{\n      removeDatasetFromRedshiftCluster(\n        clusterUri: $clusterUri\n        datasetUri: $datasetUri\n      )\n    }"}, {"type": "mutation", "name": "resumeRedshiftCluster($clusterUri: String!)", "content": "{\n      resumeRedshiftCluster(clusterUri: $clusterUri)\n    }"}, {"type": "query", "name": "searchRedshiftClusters($filter: RedshiftClusterFilter)", "content": "{\n      searchRedshiftClusters(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          clusterUri\n          environmentUri\n          name\n          label\n          description\n          tags\n          owner\n          created\n          updated\n          AwsAccountId\n          region\n          clusterArn\n          clusterName\n          created\n          databaseName\n          databaseUser\n          masterUsername\n          masterDatabaseName\n          nodeType\n          numberOfNodes\n          kmsAlias\n          status\n          subnetGroupName\n          CFNStackName\n          CFNStackStatus\n          CFNStackArn\n          port\n          endpoint\n          IAMRoles\n          subnetIds\n          securityGroupIds\n          userRoleForCluster\n          userRoleInEnvironment\n          imported\n          stack {\n            status\n          }\n          vpc\n          organization {\n            organizationUri\n            label\n            name\n          }\n          environment {\n            environmentUri\n            label\n            name\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "CreateSagemakerNotebook($input: NewSagemakerNotebookInput)", "content": "{\n      createSagemakerNotebook(input: $input) {\n        notebookUri\n        name\n        label\n        created\n        description\n        tags\n      }\n    }"}, {"type": "mutation", "name": "deleteSagemakerNotebook(\n      $notebookUri: String!\n      $deleteFromAWS: Boolean\n    )", "content": "{\n      deleteSagemakerNotebook(\n        notebookUri: $notebookUri\n        deleteFromAWS: $deleteFromAWS\n      )\n    }"}, {"type": "query", "name": "getSagemakerNotebook($notebookUri: String!)", "content": "{\n      getSagemakerNotebook(notebookUri: $notebookUri) {\n        notebookUri\n        name\n        owner\n        description\n        label\n        created\n        tags\n        NotebookInstanceStatus\n        SamlAdminGroupName\n        RoleArn\n        VpcId\n        SubnetId\n        VolumeSizeInGB\n        InstanceType\n        environment {\n          label\n          name\n          environmentUri\n          AwsAccountId\n          region\n        }\n        organization {\n          label\n          name\n          organizationUri\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n      }\n    }"}, {"type": "query", "name": "getSagemakerNotebookPresignedUrl($notebookUri: String!)", "content": "{\n      getSagemakerNotebookPresignedUrl(notebookUri: $notebookUri)\n    }"}, {"type": "query", "name": "ListSagemakerNotebooks($filter: SagemakerNotebookFilter)", "content": "{\n      listSagemakerNotebooks(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          notebookUri\n          name\n          owner\n          description\n          label\n          created\n          tags\n          NotebookInstanceStatus\n          userRoleForNotebook\n          SamlAdminGroupName\n          environment {\n            label\n            name\n            environmentUri\n            AwsAccountId\n            region\n          }\n          organization {\n            label\n            name\n            organizationUri\n          }\n          stack {\n            stack\n            status\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "StartSagemakerNotebook($notebookUri: String!)", "content": "{\n      startSagemakerNotebook(notebookUri: $notebookUri)\n    }"}, {"type": "mutation", "name": "StopSagemakerNotebook($notebookUri: String!)", "content": "{\n      stopSagemakerNotebook(notebookUri: $notebookUri)\n    }"}, {"type": "mutation", "name": "createSagemakerStudioUserProfile(\n      $input: NewSagemakerStudioUserProfileInput\n    )", "content": "{\n      createSagemakerStudioUserProfile(input: $input) {\n        sagemakerStudioUserProfileUri\n        name\n        label\n        created\n        description\n        tags\n      }\n    }"}, {"type": "mutation", "name": "deleteSagemakerStudioUserProfile(\n      $sagemakerStudioUserProfileUri: String!\n      $deleteFromAWS: Boolean\n    )", "content": "{\n      deleteSagemakerStudioUserProfile(\n        sagemakerStudioUserProfileUri: $sagemakerStudioUserProfileUri\n        deleteFromAWS: $deleteFromAWS\n      )\n    }"}, {"type": "query", "name": "getSagemakerStudioUserProfile(\n      $sagemakerStudioUserProfileUri: String!\n    )", "content": "{\n      getSagemakerStudioUserProfile(\n        sagemakerStudioUserProfileUri: $sagemakerStudioUserProfileUri\n      ) {\n        sagemakerStudioUserProfileUri\n        name\n        owner\n        description\n        label\n        created\n        tags\n        userRoleForSagemakerStudioUserProfile\n        sagemakerStudioUserProfileStatus\n        SamlAdminGroupName\n        sagemakerStudioUserProfileApps {\n          DomainId\n          UserProfileName\n          AppType\n          AppName\n          Status\n        }\n        environment {\n          label\n          name\n          environmentUri\n          AwsAccountId\n          region\n          EnvironmentDefaultIAMRoleArn\n        }\n        organization {\n          label\n          name\n          organizationUri\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n      }\n    }"}, {"type": "query", "name": "getSagemakerStudioUserProfilePresignedUrl(\n      $sagemakerStudioUserProfileUri: String!\n    )", "content": "{\n      getSagemakerStudioUserProfilePresignedUrl(\n        sagemakerStudioUserProfileUri: $sagemakerStudioUserProfileUri\n      )\n    }"}, {"type": "query", "name": "listSagemakerStudioUserProfiles(\n      $filter: SagemakerStudioUserProfileFilter\n    )", "content": "{\n      listSagemakerStudioUserProfiles(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          sagemakerStudioUserProfileUri\n          name\n          owner\n          description\n          label\n          created\n          tags\n          sagemakerStudioUserProfileStatus\n          userRoleForSagemakerStudioUserProfile\n          environment {\n            label\n            name\n            environmentUri\n            AwsAccountId\n            region\n            SamlGroupName\n          }\n          organization {\n            label\n            name\n            organizationUri\n          }\n          stack {\n            stack\n            status\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "CreateSavedQuery(\n      $scheduledQueryUri: String!\n      $input: NewSavedQueryInput\n    )", "content": "{\n      createSavedQuery(scheduledQueryUri: $scheduledQueryUri, input: $input) {\n        savedQueryUri\n        name\n        label\n        created\n        description\n        tags\n      }\n    }"}, {"type": "mutation", "name": "CreateScheduledQuery($input: NewScheduledQueryInput)", "content": "{\n      createScheduledQuery(input: $input) {\n        scheduledQueryUri\n        name\n        label\n        created\n        description\n        tags\n      }\n    }"}, {"type": "mutation", "name": "DeployScheduledQuery($scheduledQueryUri: String!)", "content": "{\n      deployScheduledQuery(scheduledQueryUri: $scheduledQueryUri)\n    }"}, {"type": "query", "name": "getSavedQuery($queryUri: String!)", "content": "{\n      getSavedQuery(queryUri: $queryUri) {\n        savedQueryUri\n        name\n        label\n        description\n        owner\n        description\n        sqlBody\n        label\n        created\n        tags\n      }\n    }"}, {"type": "query", "name": "GetScheduledQuery($scheduledQueryUri: String!)", "content": "{\n      getScheduledQuery(scheduledQueryUri: $scheduledQueryUri) {\n        scheduledQueryUri\n        name\n        label\n        cronexpr\n        description\n        owner\n        created\n        description\n        queries {\n          count\n          page\n          pages\n          nodes {\n            savedQueryUri\n            sqlBody\n            description\n            label\n            name\n            queryOrder\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "ListSavedQueries($filter: SavedQueryFilter)", "content": "{\n      listSavedQueries(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          savedQueryUri\n          name\n          owner\n          description\n          label\n          created\n          tags\n        }\n      }\n    }"}, {"type": "query", "name": "ListScheduledQueries($filter: ScheduledQueryFilter)", "content": "{\n      listScheduledQueries(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          scheduledQueryUri\n          name\n          owner\n          description\n          label\n          created\n          tags\n          environment {\n            AwsAccountId\n            region\n            name\n            label\n          }\n          organization {\n            organizationUri\n            name\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "ListScheduledQueryExecutions($scheduledQueryUri: String!)", "content": "{\n      listScheduledQueryExecutions(scheduledQueryUri: $scheduledQueryUri) {\n        executionArn\n        status\n        startDate\n        stopDate\n      }\n    }"}, {"type": "mutation", "name": "RemoveSavedQuery($queryUri: String!)", "content": "{\n      removeSavedQuery(savedQueryUri: $queryUri)\n    }"}, {"type": "query", "name": "RunSavedQuery($savedQueryUri: String!, $sqlBody: String)", "content": "{\n      runSavedQuery(savedQueryUri: $savedQueryUri, sqlBody: $sqlBody) {\n        metadata {\n          Name\n          DataType\n        }\n        rows {\n          data\n        }\n      }\n    }"}, {"type": "mutation", "name": "RunScheduledQuery($scheduledQueryUri: String!)", "content": "{\n      runScheduledQuery(scheduledQueryUri: $scheduledQueryUri)\n    }"}, {"type": "mutation", "name": "UpdateSavedQuery(\n      $queryUri: String!\n      $input: ModifySavedQueryInput\n    )", "content": "{\n      updateSavedQuery(queryUri: $queryUri, input: $input) {\n        savedQueryUri\n        name\n        description\n        label\n        created\n        sqlBody\n        tags\n      }\n    }"}, {"type": "query", "name": "SearchResources($filter: SearchInputFilter)", "content": "{\n      searchResources(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          objectUri\n          objectType\n          label\n          description\n          tags\n        }\n      }\n    }"}, {"type": "mutation", "name": "AddSharedItem($shareUri: String!, $input: AddSharedItemInput!)", "content": "{\n        addSharedItem(shareUri: $shareUri, input: $input) {\n          shareItemUri\n        }\n      }"}, {"type": "mutation", "name": "approveShareObject($shareUri: String!)", "content": "{\n      approveShareObject(shareUri: $shareUri) {\n        shareUri\n        status\n      }\n    }"}, {"type": "mutation", "name": "CreateShareObject(\n        $datasetUri: String!\n        $itemType: String\n        $itemUri: String\n        $input: NewShareObjectInput\n      )", "content": "{\n        createShareObject(\n          datasetUri: $datasetUri\n          itemType: $itemType\n          itemUri: $itemUri\n          input: $input\n        ) {\n          shareUri\n          created\n        }\n      }"}, {"type": "mutation", "name": "DeleteShareObject($shareUri: String!)", "content": "{\n      deleteShareObject(shareUri: $shareUri)\n    }"}, {"type": "query", "name": "getShareObject($shareUri: String!, $filter: ShareableObjectFilter)", "content": "{\n      getShareObject(shareUri: $shareUri) {\n        shareUri\n        created\n        owner\n        status\n        userRoleForShareObject\n        consumptionData {\n          s3AccessPointName\n          sharedGlueDatabase\n        }\n        principal {\n          principalId\n          principalType\n          principalName\n          principalIAMRoleName\n          SamlGroupName\n          environmentUri\n          environmentName\n          AwsAccountId\n          region\n          organizationUri\n          organizationName\n        }\n        items(filter: $filter) {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            itemUri\n            shareItemUri\n            itemType\n            itemName\n            status\n            action\n          }\n        }\n        dataset {\n          datasetUri\n          datasetName\n          SamlAdminGroupName\n          environmentName\n          AwsAccountId\n          region\n          exists\n        }\n      }\n    }"}, {"type": "query", "name": "getShareRequestsFromMe($filter: ShareObjectFilter)", "content": "{\n      getShareRequestsFromMe(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          owner\n          created\n          deleted\n          shareUri\n          status\n          userRoleForShareObject\n          principal {\n            principalId\n            principalType\n            principalName\n            principalIAMRoleName\n            SamlGroupName\n            environmentUri\n            environmentName\n            AwsAccountId\n            region\n            organizationUri\n            organizationName\n          }\n          statistics {\n            sharedItems\n            revokedItems\n            failedItems\n            pendingItems\n          }\n          dataset {\n            datasetUri\n            datasetName\n            SamlAdminGroupName\n            environmentName\n            exists\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "getShareRequestsToMe($filter: ShareObjectFilter)", "content": "{\n      getShareRequestsToMe(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          owner\n          created\n          deleted\n          shareUri\n          status\n          userRoleForShareObject\n          principal {\n            principalId\n            principalType\n            principalName\n            principalIAMRoleName\n            SamlGroupName\n            environmentUri\n            environmentName\n            AwsAccountId\n            region\n            organizationUri\n            organizationName\n          }\n          statistics {\n            tables\n            locations\n            sharedItems\n            revokedItems\n            failedItems\n            pendingItems\n          }\n          dataset {\n            datasetUri\n            datasetName\n            SamlAdminGroupName\n            environmentName\n            exists\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "ListDatasetShareObjects(\n      $datasetUri: String!\n      $filter: ShareObjectFilter\n    )", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        shares(filter: $filter) {\n          page\n          pages\n          pageSize\n          hasPrevious\n          hasNext\n          count\n          nodes {\n            shareUri\n            created\n            owner\n            status\n            userRoleForShareObject\n            statistics {\n              tables\n              locations\n            }\n            principal {\n              principalId\n              principalType\n              principalName\n              principalIAMRoleName\n              SamlGroupName\n              environmentUri\n              environmentName\n              AwsAccountId\n              region\n              organizationUri\n              organizationName\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "RejectShareObject($shareUri: String!)", "content": "{\n      rejectShareObject(shareUri: $shareUri) {\n        shareUri\n        status\n      }\n    }"}, {"type": "mutation", "name": "RemoveSharedItem($shareItemUri: String!)", "content": "{\n      removeSharedItem(shareItemUri: $shareItemUri)\n    }"}, {"type": "mutation", "name": "revokeItemsShareObject($input: RevokeItemsInput)", "content": "{\n      revokeItemsShareObject(input: $input) {\n        shareUri\n        status\n      }\n    }"}, {"type": "mutation", "name": "submitShareObject($shareUri: String!)", "content": "{\n      submitShareObject(shareUri: $shareUri) {\n        shareUri\n        status\n      }\n    }"}, {"type": "query", "name": "getStack($environmentUri: String!, $stackUri: String!)", "content": "{\n      getStack(environmentUri: $environmentUri, stackUri: $stackUri) {\n        status\n        stackUri\n        targetUri\n        accountid\n        region\n        stackid\n        link\n        outputs\n        resources\n        error\n        events\n        name\n      }\n    }"}, {"type": "query", "name": "getStackLogs($environmentUri: String!, $stackUri: String!)", "content": "{\n      getStackLogs(environmentUri: $environmentUri, stackUri: $stackUri) {\n        message\n        timestamp\n      }\n    }"}, {"type": "mutation", "name": "updateStack($targetUri: String!, $targetType: String!)", "content": "{\n      updateStack(targetUri: $targetUri, targetType: $targetType) {\n        stackUri\n        targetUri\n        name\n      }\n    }"}, {"type": "mutation", "name": "createQuicksightDataSourceSet ($vpcConnectionId: String!)", "content": "{\n      createQuicksightDataSourceSet(vpcConnectionId: $vpcConnectionId)\n    }"}, {"type": "query", "name": "getMonitoringDashboardId", "content": "{\n      getMonitoringDashboardId\n    }"}, {"type": "query", "name": "getMonitoringVPCConnectionId", "content": "{\n      getMonitoringVPCConnectionId\n    }"}, {"type": "query", "name": "getPlatformAuthorSession($awsAccount: String)", "content": "{\n      getPlatformAuthorSession(\n         awsAccount: $awsAccount\n      )\n    }"}, {"type": "query", "name": "getPlatformReaderSession($dashboardId: String)", "content": "{\n      getPlatformReaderSession(dashboardId: $dashboardId)\n    }"}, {"type": "query", "name": "GetUserRoleInTenant", "content": "{\n      getUserRoleInTenant\n    }"}, {"type": "query", "name": "listTenantGroups($filter: GroupFilter)", "content": "{\n      listTenantGroups(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          groupUri\n          tenantPermissions {\n            name\n            description\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listTenantPermissions", "content": "{\n      listTenantPermissions {\n        name\n        description\n      }\n    }"}, {"type": "mutation", "name": "updateSSMParameter ($name: String!, $value: String!)", "content": "{\n      updateSSMParameter(name: $name, value: $value)\n    }"}, {"type": "mutation", "name": "updateGroupTenantPermissions(\n      $input: UpdateGroupTenantPermissionsInput!\n    )", "content": "{\n      updateGroupTenantPermissions(input: $input)\n    }"}, {"type": "query", "name": "Test", "content": "{\n      test\n    }"}, {"type": "query", "name": "FindUser($page: Int, $pageSize: Int, $userName: String)", "content": "{\n      FindUser(userName: $userName, page: $page, pageSize: $pageSize) {\n        count\n        page\n        pageSize\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          userName\n          organizations\n        }\n      }\n    }"}, {"type": "query", "name": "GetUserProfile($username: String)", "content": "{\n      getUserProfile(username: $username) {\n        username\n        bio\n        b64EncodedAvatar\n        tags\n      }\n    }"}, {"type": "mutation", "name": "UpdateUserProfile($input: UserProfileInput!)", "content": "{\n      updateUserProfile(input: $input) {\n        username\n        bio\n        b64EncodedAvatar\n        tags\n      }\n    }"}, {"type": "query", "name": "countUpVotes($targetUri: String!, $targetType: String!)", "content": "{\n      countUpVotes(targetUri: $targetUri, targetType: $targetType)\n    }"}, {"type": "query", "name": "getVote($targetUri: String!, $targetType: String!)", "content": "{\n      getVote(targetUri: $targetUri, targetType: $targetType) {\n        upvote\n      }\n    }"}, {"type": "mutation", "name": "upVote($input: VoteInput!)", "content": "{\n      upVote(input: $input) {\n        voteUri\n        targetUri\n        targetType\n        upvote\n      }\n    }"}, {"type": "mutation", "name": "createNetwork($input: NewVpcInput)", "content": "{\n      createNetwork(input: $input) {\n        vpcUri\n        VpcId\n        label\n        description\n        tags\n        owner\n        SamlGroupName\n        privateSubnetIds\n        privateSubnetIds\n      }\n    }"}, {"type": "mutation", "name": "deleteNetwork($vpcUri: String!)", "content": "{\n      deleteNetwork(vpcUri: $vpcUri)\n    }"}, {"type": "query", "name": "getNetwork($vpcUri: String!)", "content": "{\n      getNetwork(vpcUri: $vpcUri) {\n        vpcUri\n        VpcId\n        label\n        description\n        tags\n        owner\n        SamlGroupName\n        privateSubnetIds\n        privateSubnetIds\n      }\n    }"}, {"type": "mutation", "name": "CreateWorksheet($input: NewWorksheetInput)", "content": "{\n      createWorksheet(input: $input) {\n        worksheetUri\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "deleteWorksheet($worksheetUri: String!)", "content": "{\n      deleteWorksheet(worksheetUri: $worksheetUri)\n    }"}, {"type": "query", "name": "GetWorksheet($worksheetUri: String!)", "content": "{\n      getWorksheet(worksheetUri: $worksheetUri) {\n        worksheetUri\n        label\n        description\n        SamlAdminGroupName\n        tags\n        sqlBody\n        chartConfig {\n          dimensions {\n            columnName\n          }\n          measures {\n            columnName\n            aggregationName\n          }\n        }\n        owner\n        created\n        updated\n        userRoleForWorksheet\n        lastSavedQueryResult {\n          AthenaQueryId\n          ElapsedTimeInMs\n          Error\n          DataScannedInBytes\n          Status\n          columns {\n            columnName\n            typeName\n          }\n          rows {\n            cells {\n              value\n              columnName\n            }\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetWorksheet($worksheetUri: String!, $filter: WorksheetFilter)", "content": "{\n      getWorksheet(worksheetUri: $worksheetUri) {\n        shares(filter: $filter) {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            worksheetShareUri\n            principalId\n            principalType\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "ListWorksheets($filter: WorksheetFilter)", "content": "{\n      listWorksheets(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          worksheetUri\n          label\n          description\n          tags\n          owner\n          created\n          userRoleForWorksheet\n          SamlAdminGroupName\n        }\n      }\n    }"}, {"type": "mutation", "name": "RemoveWorksheetShare($worksheetShareUri: String!)", "content": "{\n      removeWorksheetShare(worksheetShareUri: $worksheetShareUri)\n    }"}, {"type": "query", "name": "runAthenaSqlQuery($environmentUri: String!, $worksheetUri: String!, $sqlQuery: String!)", "content": "{\n      runAthenaSqlQuery(environmentUri: $environmentUri, worksheetUri: $worksheetUri, sqlQuery: $sqlQuery) {\n        rows {\n          cells {\n            columnName\n            typeName\n            value\n          }\n        }\n        columns {\n          columnName\n          typeName\n        }\n      }\n    }"}, {"type": "mutation", "name": "ShareWorksheet(\n      $worksheetUri: String!\n      $input: WorksheetShareInput!\n    )", "content": "{\n      shareWorksheet(worksheetUri: $worksheetUri, input: $input) {\n        worksheetShareUri\n      }\n    }"}, {"type": "mutation", "name": "StartWorksheetQuery(\n      $worksheetUri: String!\n      $input: WorksheetQueryInput!\n    )", "content": "{\n      startWorksheetQuery(worksheetUri: $worksheetUri, input: $input) {\n        AthenaQueryId\n        Error\n        Status\n        DataScannedInBytes\n        ElapsedTimeInMs\n      }\n    }"}, {"type": "mutation", "name": "UpdateWorksheet(\n      $worksheetUri: String!\n      $input: UpdateWorksheetInput\n    )", "content": "{\n      updateWorksheet(worksheetUri: $worksheetUri, input: $input) {\n        worksheetUri\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "RemoveWorksheetShare(\n      $worksheetShareUri: String!\n      $canEdit: Boolean\n    )", "content": "{\n      updateWorksheetShare(\n        worksheetShareUri: $worksheetShareUri\n        canEdit: $canEdit\n      ) {\n        worksheetShareUri\n        canEdit\n      }\n    }"}, {"type": "query", "name": "($cityName: String!)", "content": "{\n    cityWeather (city_name: $cityName) {\n      temp\n      max_temp\n      min_temp\n    }\n  }"}, {"type": "query", "name": "($personName: String!)", "content": "{\n    person (where: { name: { _eq: $personName }}) {\n     \tname\n     \tage\n     \tcity\n     \tcity_weather {\n     \t\ttemp\n     \t\tmax_temp\n     \t\tmin_temp\n     \t}\n    }\n  }"}, {"type": "query", "name": "blocks($timestamp: Int!)", "content": "{\n    blocks(first: 1, orderBy: timestamp, orderDirection: asc, where: { timestamp_gt: $timestamp }) {\n      id\n      number\n      timestamp\n    }\n  }"}, {"type": "query", "name": "blocks($timestamp: Int!)", "content": "{\n    blocks(first: 1, orderBy: timestamp, orderDirection: asc, where: { timestamp_gt: $timestamp }) {\n      id\n      number\n      timestamp\n    }\n  }"}, {"type": "query", "name": "blocks($timestamp: Int!)", "content": "{\n    blocks(first: 1, orderBy: timestamp, orderDirection: asc, where: { timestamp_gt: $timestamp }) {\n      id\n      number\n      timestamp\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n        getBasket {\n            ${getBasketAttributes}\n        }\n    }"}, {"type": "mutation", "name": "addProductToBasket($productId: String!, $quantity: Int!)", "content": "{\n        addProductToBasket(productId: $productId, quantity: $quantity) {\n            basketId\n            customerId\n            addProductMessage\n            getBasketMessage\n            totalProductsQuantity\n            products {\n                productId\n                itemId\n                quantity\n                productName\n                price\n            }\n        }\n    }"}, {"type": "mutation", "name": "updateShippingMethod(\n        $basketId: String!\n        $shipmentId: String!\n        $shippingMethodId: String!\n    )", "content": "{\n        updateShippingMethod(\n            basketId: $basketId\n            shipmentId: $shipmentId\n            shippingMethodId: $shippingMethodId\n        ) {\n            ${getBasketAttributes}\n        }\n    }"}, {"type": "mutation", "name": "removeItemFromBasket($itemId: String!)", "content": "{\n        removeItemFromBasket(itemId: $itemId) {\n            ${getBasketAttributes}\n        }\n    }"}, {"type": "mutation", "name": "addCouponToBasket($couponCode: String!)", "content": "{\n        addCouponToBasket(couponCode: $couponCode) {\n            ${basketQuery}\n        }\n    }"}, {"type": "mutation", "name": "removeCouponFromBasket($couponItemId: String!)", "content": "{\n        removeCouponFromBasket(couponItemId: $couponItemId) {\n            ${basketQuery}\n        }\n    }"}, {"type": "query", "name": "", "content": "{\n        getBasketProductCount\n    }"}, {"type": "query", "name": "($productId: String!, $selectedColor: String)", "content": "{\n        product(id: $productId, selectedColor: $selectedColor) {\n            name\n            id\n            masterId\n            longDescription\n            shortDescription\n            currency\n            price\n            prices {\n                sale\n                list\n            }\n            image\n            images(allImages: true, size: \"large\") {\n                title\n                alt\n                link\n            }\n            variants {\n                id\n                variationValues {\n                    key\n                    value\n                }\n            }\n            variationAttributes {\n                variationAttributeType {\n                    id\n                    name\n                }\n                variationAttributeValues {\n                    name\n                    value\n                    orderable\n                    swatchImage {\n                        link\n                        style\n                    }\n                }\n            }\n            inventory {\n                ats\n                backorderable\n                id\n                orderable\n                preorderable\n                stockLevel\n            }\n            type {\n                bundle\n                item\n                master\n                option\n                set\n                variant\n                variationGroup\n            }\n            productPromotions {\n                calloutMsg\n                promotionId\n                promotionalPrice\n            }\n        }\n    }"}, {"type": "query", "name": "($query: String!, $filters: [Filter])", "content": "{\n        productSearch(query: $query, filterParams: $filters) {\n            productHits {\n                productId\n                productName\n                prices {\n                    sale\n                    list\n                }\n                image {\n                    title\n                    link\n                    alt\n                }\n                colorSwatches {\n                    name\n                    value\n                    title\n                    link\n                    alt\n                    style\n                }\n            }\n            sortingOptions {\n                id\n                label\n            }\n            refinements {\n                values {\n                    label\n                    value\n                    hitCount\n                    values {\n                        label\n                        value\n                        hitCount\n                    }\n                }\n                label\n                attributeId\n            }\n            currentFilters {\n                id\n                value\n            }\n        }\n    }"}, {"type": "query", "name": "GetRepositoryIssues($name: String!, $login: String!)", "content": "{\n    repositoryOwner(login: $login) {\n      repository(name: $name) {\n        stargazers {\n          totalCount\n        }\n        watchers {\n          totalCount\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n          createUser(id: \"1234\", name: \"Bob\") {\n            id\n          }\n        }"}, {"type": "query", "name": "shopInfo", "content": "{\n        shop {\n            id\n            name\n            description\n            email\n            myshopifyDomain\n            plan {\n                displayName\n            }\n        }\n    }"}, {"type": "mutation", "name": "AddToCart ($input: CheckoutCreateInput!)", "content": "{\n        checkoutCreate(input: $input) {\n            checkoutUserErrors {\n                message\n                field\n            }\n            checkout {\n                ...ReturnFieldsCheckout\n            }\n        }\n    }\n    ${ReturnFieldsCheckout}"}, {"type": "mutation", "name": "checkoutLineItemsAdd($lineItems: [CheckoutLineItemInput!]!, $checkoutId: ID!)", "content": "{\n        checkoutLineItemsAdd(lineItems: $lineItems, checkoutId: $checkoutId) {\n            userErrors {\n                field\n                message\n            }\n            checkout {\n                ...ReturnFieldsCheckout\n            }\n        }\n    }\n    ${ReturnFieldsCheckout}"}, {"type": "mutation", "name": "checkoutCustomerAssociateV2($checkoutId: ID!, $customerAccessToken: String!)", "content": "{\n        checkoutCustomerAssociateV2(checkoutId: $checkoutId, customerAccessToken: $customerAccessToken) {\n            userErrors {\n                field\n                message\n            }\n            checkout {\n                ...ReturnFieldsCheckout\n            }\n            customer {\n                id\n            }\n        }\n    }\n    ${ReturnFieldsCheckout}"}, {"type": "mutation", "name": "customerAccessTokenDelete($customerAccessToken: String!)", "content": "{\n    customerAccessTokenDelete(customerAccessToken: $customerAccessToken) {\n        userErrors {\n            field\n            message\n        }\n        deletedAccessToken\n        deletedCustomerAccessTokenId\n    }\n}"}, {"type": "mutation", "name": "checkoutLineItemsRemove($checkoutId: ID!, $lineItemIds: [ID!]!)", "content": "{\n        checkoutLineItemsRemove(checkoutId: $checkoutId, lineItemIds: $lineItemIds) {\n            userErrors {\n                field\n                message\n            }\n            checkout {\n                ...ReturnFieldsCheckout\n            }\n        }\n    }\n    ${ReturnFieldsCheckout}"}, {"type": "mutation", "name": "customerActivate($id: ID!, $input: CustomerActivateInput!)", "content": "{\n    customerActivate(id: $id, input: $input) {\n        userErrors {\n            field\n            message\n        }\n        customer {\n            id\n        }\n        customerAccessToken {\n            accessToken\n            expiresAt\n        }\n    }\n}"}, {"type": "mutation", "name": "customerRecover($email: String!)", "content": "{\n    customerRecover(email: $email) {\n        userErrors {\n            field\n            message\n        }\n    }\n}"}, {"type": "query", "name": "($customerAccessToken: String!)", "content": "{\n    customer(customerAccessToken: $customerAccessToken) {\n        firstName\n        lastName\n        email\n        phone\n        defaultAddress {\n            firstName\n            lastName\n            address1\n            address2\n            city\n            provinceCode\n            zip\n            country\n        }\n        createdAt\n        acceptsMarketing\n        orders(first: 1, reverse: true) {\n            edges {\n                node {\n                    id\n                    name\n                    orderNumber\n                    statusUrl\n                    totalPrice\n                    customerUrl\n                }\n            }\n        }\n    }\n}"}, {"type": "mutation", "name": "customerAccessTokenCreate($input: CustomerAccessTokenCreateInput!)", "content": "{\n    customerAccessTokenCreate(input: $input) {\n        customerAccessToken {\n            accessToken\n            expiresAt\n        }\n        customerUserErrors {\n            field\n            message\n        }\n    }\n}"}, {"type": "mutation", "name": "customerCreate($input: CustomerCreateInput!)", "content": "{\n    customerCreate(input: $input) {\n        customer {\n            id\n        }\n        customerUserErrors {\n            code\n            field\n            message\n        }\n    }\n}"}, {"type": "mutation", "name": "customerReset($id: ID!, $input: CustomerResetInput!)", "content": "{\n    customerReset(id: $id, input: $input) {\n        userErrors {\n            field\n            message\n        }\n        customer {\n            id\n        }\n        customerAccessToken {\n            accessToken\n            expiresAt\n        }\n    }\n}"}, {"type": "query", "name": "checkoutQuery($id: ID!)", "content": "{\n        node(id: $id) {\n            ... on Checkout {\n                ...ReturnFieldsCheckout\n            }\n        }\n    }\n    ${ReturnFieldsCheckout}"}, {"type": "query", "name": "($handle: String!)", "content": "{\n    shop {\n        productByHandle(handle: $handle) {\n            variants(first: 1) {\n                edges {\n                    node {\n                        availableForSale\n                    }\n                }\n            }\n        }\n    }\n}"}, {"type": "query", "name": "RateLimit", "content": "{ rateLimit { remaining limit } }"}, {"type": "query", "name": "Repositories", "content": "{\n      ${cues.map(GithubService._buildGraphQLFromCue).join('\\n')}\n    }"}, {"type": "query", "name": "getMedia($offset: Int!, $limit: Int!)", "content": "{\n                    getMedia(offset: $offset, limit: $limit) {\n                      id\n                      thumbName\n                      name\n                      url\n                      fileDescription\n                    }\n                  }"}]
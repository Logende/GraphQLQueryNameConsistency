[{"type": "mutation", "name": "UpdateTimings($id:String!,$openingTimes:[TimingsInput])", "content": "{\n  rider(id:$id){\n    _id\n    location {coordinates}\n  }\n}"}, {"type": "mutation", "name": "EditCategory($category:CategoryInput)", "content": "{\n            obj: authenticateUserWithPhoneAndPassword(data: { phone: $phone, password: $password }) {\n                item {\n                    id\n                }\n                token\n            }\n        }"}, {"type": "query", "name": "listDeltaLakeCrawlerRuns($datasetUri: String!)", "content": "{\n      enableDataSubscriptions(environmentUri: $environmentUri, input: $input)\n    }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n    vendors{\n      _id\n      email\n      userType\n      restaurants{\n        _id\n        orderId\n        orderPrefix\n        slug\n        name\n        image\n        address\n        location{coordinates}\n        zone{\n          _id\n          title\n        }\n      }\n    }\n}"}, {"type": "query", "name": "SearchComments", "content": "{\n      getVote(targetUri: $targetUri, targetType: $targetType) {\n        upvote\n      }\n    }"}, {"type": "query", "name": "remoteAppGetUsersWhole($limit: Int!, $offset: Int!)", "content": "{\n    createServiceBinding(\n      serviceInstanceName: $serviceInstanceName\n      namespace: $namespace\n      parameters: $parameters\n    ) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "changeEmail($email: String!, $password: String!)", "content": "{\n            onDeleteTaskGroup(filter: $filter) {\n              id\n              title\n              description\n              priority\n              severity\n            }\n          }"}, {"type": "mutation", "name": "EditPost($id: Int!, $content: String!, $title: String!)", "content": "{\n                  allArchivedBlogs {\n                    id\n                    title\n                    content\n                    userId\n                    archived\n                  }\n                }"}, {"type": "query", "name": "nluInfer($input: String!, $model: String!, $source: NluModelSource = ACCOUNT)", "content": "{MODELS}Meta($where: ${MODEL}WhereInput) {\n        meta: _all${MODELS}Meta(where: $where) { count }\n        }"}, {"type": "mutation", "name": "LOGIN($password: String!, $username: String!)", "content": "{\n    addAppointment(\n      date: $date\n      startTime: $startTime\n      morningOrEvening: $morningOrEvening\n      endTime: $endTime\n      duration: $duration\n      price: $price\n      esthetician: $esthetician\n      client: {\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        phoneNumber: $phoneNumber\n        squareCustomerId: $squareCustomerId\n        unsavedSquareCardIDs: $unsavedSquareCardIDs\n      }\n      treatments: $treatments\n      addOns: $addOns\n      bookedWithCardSquareID: $bookedWithCardSquareID\n      notes: $notes\n    ) {\n      date\n      startTime\n      morningOrEvening\n      endTime\n      duration\n      price\n      createdAt\n      esthetician\n      client {\n        firstName\n        lastName\n        email\n        phoneNumber\n        squareCustomerId\n        unsavedSquareCardIDs\n      }\n      treatments {\n        name\n        price\n        duration\n      }\n      addOns {\n        name\n        price\n        duration\n      }\n      bookedWithCardSquareID\n      notes\n      confirmed\n    }\n  }"}, {"type": "query", "name": "Restaurants($latitude:Float,$longitude:Float)", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "query", "name": "TodoList", "content": "{\n      deleteNotification(notificationUri: $notificationUri)\n    }"}, {"type": "query", "name": "listNotifications($filter: NotificationFilter)", "content": "{\n    createActiveUsers(data: { activeUsers: $activeUsers }) {\n      data {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "SearchEnvironmentDataItems(\n      $filter: EnvironmentDataItemFilter\n      $environmentUri: String\n    )", "content": "{\n    importIdentitiesTask(page: $page, pageSize: $pageSize, filters: $filters) {\n      entities {\n        id\n        backend\n        url\n        interval\n        args\n        jobId\n        lastExecution\n        scheduledDatetime\n        failures\n        executions\n        failed\n      }\n    }\n  }"}, {"type": "mutation", "name": "deletePackage($id: ID!)", "content": "{\n      listKeyValueTags(targetUri: $targetUri, targetType: $targetType) {\n        tagUri\n        targetUri\n        targetType\n        key\n        value\n        cascade\n      }\n    }"}, {"type": "mutation", "name": "", "content": "{\n  categories(offset: $offset, limit: $limit, order: $order, namespace: $namespace) {\n    id,\n    name,\n    createdAt\n  }\n}"}, {"type": "mutation", "name": "UpdateOrderStatus($id:String!,$status:String!,$reason:String)", "content": "{\n  update_onchain_links(where: {onchain_proposal_id: {_eq: $proposalId}}, _set: {onchain_referendum_id: $referendumId}) {\n    affected_rows\n  }\n}"}, {"type": "mutation", "name": "addCommunity($input: CommunityInputType!)", "content": "{\n        result: signinAsUser(data: $data) { user { id } token }\n    }"}, {"type": "query", "name": "GetDataset($filter: DatasetLoaderFilter, $datasetUri: String!)", "content": "{\n    getProposalByRFPAndSupplier(sender: $sender rfpId: $rfpId) {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "mutation", "name": "deleteEventApi($id: ID!)", "content": "{\n    own_past_appointments(_id: $_id, email: $email) {\n      id\n      date\n      startTime\n      morningOrEvening\n      endTime\n      duration\n      price\n      treatments {\n        name\n        duration\n        price\n      }\n      addOns {\n        name\n        duration\n        price\n      }\n      client {\n        _id\n        squareCustomerId\n        unsavedSquareCardIDs\n        firstName\n        lastName\n        email\n        phoneNumber\n      }\n      bookedWithCardSquareID\n      notes\n      confirmed\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    uniswapInitializeFactory(\n      from: $from\n      exchange: $exchange\n      factory: $factory\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "getAll$", "content": "{query}"}, {"type": "query", "name": "GetDashboardTotal($startingDate: String, $endingDate: String,$restaurant:String!)", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n      ...communityMembers\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}\n  ${communityMembersFragment}"}, {"type": "mutation", "name": "EditFood($foodInput:FoodInput!)", "content": "{\n    makeOffer(\n      listingID: $listingID\n      finalizes: $finalizes\n      affiliate: $affiliate\n      commission: $commission\n      value: $value\n      currency: $currency\n      arbitrator: $arbitrator\n      data: $data\n      from: $from\n      withdraw: $withdraw\n      quantity: $quantity\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n              onCreateTask(\n                owner: \"${USERNAME1}\",\n                filter: { priority: { eq: 8 } }\n              ) {\n                id\n                title\n                priority\n                owner\n              }\n            }"}, {"type": "mutation", "name": "changeEmail($email: String!, $password: String!)", "content": "{\n  updateRiderLocation(latitude:$latitude,longitude:$longitude){\n    _id\n  }\n}"}, {"type": "mutation", "name": "CreateEnvironment($input: NewEnvironmentInput)", "content": "{\n        obj: authenticateUserWithPhoneAndPassword(data: { phone: $phone, password: $password }) {\n            item {\n                id\n            }\n        }\n    }"}, {"type": "query", "name": "GetContactConversations($id: ID!)", "content": "{\n  user(userId: $userId) {\n    id,\n    first_name,\n    last_name,\n    username,\n    payload\n  }\n}"}, {"type": "mutation", "name": "WithdrawListing(\n    $data: String!\n    $from: String!\n    $listingID: String\n    $offerID: String\n  )", "content": "{\n          updateNotificationStatus(offerNotification:$offerNotification,orderNotification:$orderNotification){\n            _id\n            notificationToken\n            isOrderNotification\n            isOfferNotification\n          }\n        }"}, {"type": "mutation", "name": "createTask ($status: String, $title: String!)", "content": "{\n        updatePost(\n          input: { id: \"P2\", type: \"Post\", content: \"Content #2 - UpdateComplex\", expectedVersion: 1 }\n          condition: {\n            or: [{ and: [{ content: { beginsWith: \"Content #2\" } }, { rating: { between: [4, 5] } }] }, { content: { eq: null } }]\n          }\n        ) {\n          id\n          content\n        }\n      }"}, {"type": "query", "name": "getVote($targetUri: String!, $targetType: String!)", "content": "{\n    delete_Follow(\n      where: {\n        follower_id: { _eq: $userId }\n        following_id: { _eq: $followingId }\n      }\n    ) {\n      affected_rows\n    }\n  }"}, {"type": "subscription", "name": "SubscriptionNewMessage($order:ID!)", "content": "{\n  selectAddress(id:$id){\n    _id\n    addresses{\n      _id\n      label\n      deliveryAddress\n      details\n      location{coordinates}\n      selected\n    }\n  }\n}"}, {"type": "mutation", "name": "DeleteStudent($input: DeleteStudentInput!)", "content": "{\n    deleteApplicationLabel(applicationID: $id, key: \"scenarios\") {\n      key\n      value\n    }\n  }"}, {"type": "query", "name": "GetPostgresSettings($appId: uuid!)", "content": "{\n  proposals(where: {proposalStatus_some: {AND: [{status: \"Proposed\"}, {blockNumber: {number_gte: $startBlock}}]}}) {\n    ...onchainProposal\n  }\n}\n    ${OnchainProposalFragmentDoc}"}, {"type": "mutation", "name": "", "content": "{\n    updateService(name: $name, namespace: $namespace, service: $service) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "ApproveTermAssociation($linkUri: String!)", "content": "{\n    deleteFunction(namespace: $namespace, function: $function) {\n      name\n    }\n  }"}, {"type": "subscription", "name": "serviceBindingUsageEvent(\n    $namespace: String!\n    $resourceKind: String\n    $resourceName: String\n  )", "content": "{\n    post (slug: $slug) {\n      id\n      title\n      slug\n      body\n      lgImageUrl\n      ...PostVotes\n      ...PostActions\n      ...PostHeader\n      market {\n        ...MarketHeader\n      }\n    }\n  }\n  ${PostVotes.fragments.post}\n  ${PostActions.fragments.post}\n  ${PostHeader.fragments.post}\n  ${MarketHeader.fragments.market}"}, {"type": "query", "name": "contact($id: ID!)", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        shares(filter: $filter) {\n          page\n          pages\n          pageSize\n          hasPrevious\n          hasNext\n          count\n          nodes {\n            shareUri\n            created\n            owner\n            status\n            userRoleForShareObject\n            statistics {\n              tables\n              locations\n            }\n            principal {\n              principalId\n              principalType\n              principalName\n              principalIAMRoleName\n              SamlGroupName\n              environmentUri\n              environmentName\n              AwsAccountId\n              region\n              organizationUri\n              organizationName\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "updateOrganizationIndustry($input: OrganizationUpdateInput!)", "content": "{\n    markets (first: 10, search: $search) {\n      nodes {\n        id\n        name\n        symbol\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateUserProfile($input: UserProfileInput!)", "content": "{\n    addAffiliate(from: $from, affiliate: $affiliate) {\n      id\n    }\n  }"}, {"type": "query", "name": "userPosts($pagination: PaginationInputType!)", "content": "{\n  celoSystemBalances {\n    height\n    goldTokenSupply\n    totalLockedGoldBalance\n    nonVotingLockedGoldBalance\n    totalCeloUSDValue\n  }\n}"}, {"type": "mutation", "name": "addEmailToOrganization($organizationId: ID!, $input: EmailInput!)", "content": "{\n            onCreateTaskGroup(filter: $filter) {\n              id\n              title\n              description\n              priority\n              severity\n            }\n          }"}, {"type": "mutation", "name": "createLabelDefinition($in: LabelDefinitionInput!)", "content": "{\n    unassignedOrder{\n      userId\n      origin\n      order{\n      _id\n      rider{\n        _id\n      }\n      order_id\n      delivery_address{\n        latitude\n        longitude\n        delivery_address\n        details\n        label\n      }\n      delivery_charges\n      payment_method\n      order_amount\n      paid_amount\n      order_status\n      payment_status\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      items{\n        _id\n        food{\n          _id\n          title\n        }\n        quantity\n        variation{\n          _id\n          title\n          price\n        }\n        addons{\n          _id\n          title\n          options{\n            _id\n            title\n            price\n          }\n        }\n      }\n      createdAt\n     }\n    }\n  }"}, {"type": "mutation", "name": "ResetDatabasePassword($appId: String!, $newPassword: String!)", "content": "{\n    thread(id: $id) {\n      ...threadInfo\n    }\n  }\n  ${threadInfoFragment}"}, {"type": "query", "name": "Post ($slug: String!)", "content": "{\n              createComment(blogId: \"${this.blogId}\", userId:\"${this.loggedInUser}\", content: \"${this.comment}\"){\n                content\n              }\n            }"}, {"type": "query", "name": "GetOrganizationSubsidiaries($id: ID!)", "content": "{\n        motion (\n            where: {\n\t\t\t\tnode: {\n\t\t\t\t\tmotionStatus_some: {\n\t\t\t\t\t\tAND: [\n\t\t\t\t\t\t\t{ status: \"Proposed\" },\n\t\t\t\t\t\t\t{ blockNumber: { number_gte: $startBlock } }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        ){\n            mutation\n            node {\n                author\n                id\n                motionProposalId\n                motionStatus(orderBy: id_DESC) {\n                    blockNumber {\n                        number\n                    }\n                    status\n                }\n                preimage {\n                    hash\n                }\n                section\n                motionProposalArguments{\n                    name\n                    value\n                }\n            }\n        }\n    }"}, {"type": "mutation", "name": "changePhoneNumberResidentUser ($data: ChangePhoneNumberResidentUserInput!)", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "query", "name": "Application($applicationId: ID!, $apiPackageId: ID!)", "content": "{\n    addAffiliate(from: $from, affiliate: $affiliate) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "RemoveDatasetLoader($loaderUri: String)", "content": "{\n            stats {\n              users_count\n              servers_count\n              groups_count\n            }\n          }"}, {"type": "mutation", "name": "createNetwork($input: NewVpcInput)", "content": "{\n      createApiKey {\n        ApiKeyId\n        ApiKeySecret\n        expires\n      }\n    }"}, {"type": "mutation", "name": "addEventDefinition($apiPackageId: ID!, $in: EventDefinitionInput!)", "content": "{\n  chatIds(chatId: $chatId, transport: $transport) {\n    transport,\n    user {\n      id,\n      username,\n      userId,\n      first_name,\n      last_name,\n      username,\n      language,\n      payload,\n      createdAt,\n      email,\n      chatIds {\n        chatId,\n        transport\n      }\n    }\n  }\n}"}, {"type": "query", "name": "countUpVotes($targetUri: String!, $targetType: String!)", "content": "{\n        __typename\n        insert_option_poll(objects: {post_id: $postId, question: $question, options: $options, end_at: $endAt}) {\n            affected_rows\n        }\n    }"}, {"type": "mutation", "name": "uploadImage($input: UploadImageInput!)", "content": "{\n      getGlossary(nodeUri: $nodeUri) {\n        nodeUri\n        label\n        readme\n        created\n        owner\n        status\n        path\n        admin\n        userRoleForGlossary\n        stats {\n          categories\n          terms\n          associations\n        }\n        associations {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            __typename\n            target {\n              ... on Dataset {\n                label\n              }\n              ... on DatasetTable {\n                label\n              }\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "sigin($identity: String, $secret: String)", "content": "{\n  logs(appID: $appID, service: $service, from: $from, to: $to) {\n    log\n    service\n    timestamp\n  }\n}"}, {"type": "query", "name": "($id: ID!)", "content": "{\n    verifyPhoneCode(\n      identity: $identity\n      prefix: $prefix\n      phone: $phone\n      code: $code\n    ) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "query", "name": "($limit: Int, $offset: Int, $order: String, $username: String, $userId: String, $chatbotId: String)", "content": "{\n    appointment(\n      date: $date\n      startTime: $startTime\n      morningOrEvening: $morningOrEvening\n      endTime: $endTime\n      duration: $duration\n      price: $price\n      bookedWithCardSquareID: $bookedWithCardSquareID\n      client: {\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        phoneNumber: $phoneNumber\n      }\n    ) {\n      date\n      startTime\n      morningOrEvening\n      endTime\n      duration\n      price\n      treatments {\n        name\n        duration\n        price\n      }\n      addOns {\n        name\n        duration\n        price\n      }\n      client {\n        firstName\n        lastName\n        email\n        phoneNumber\n      }\n      bookedWithCardSquareID\n      notes\n      confirmed\n    }\n  }"}, {"type": "query", "name": "clusterRoleBindings", "content": "{\n      getPostIAMWithKeysByDate(type: \"Post\") {\n        items {\n          id\n          title\n          type\n          date\n        }\n      }\n    }"}, {"type": "mutation", "name": "UpdateDataPipeline(\n      $input: UpdateDataPipelineInput\n      $DataPipelineUri: String!\n    )", "content": "{\n    currencies {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        decimals\n      }\n    }\n  }"}, {"type": "query", "name": "getMonitoringVPCConnectionId", "content": "{\n    web3 {\n      nodeAccounts {\n        id\n        balance {\n          eth\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "query", "name": "GetServerState", "content": "{\n    \taddressLinkConfirm(address_id: $address_id, signature: $signature) {\n\t\t\tmessage\n\t\t\ttoken\n\t\t}\n\t}"}, {"type": "query", "name": "selectOrganizationEmployee ($value: String, $organizationId: ID)", "content": "{\n    setCommunity(thread: $thread, id: $id, communityId: $communityId) {\n      id\n    }\n  }"}, {"type": "query", "name": "($offset: Int, $limit: Int, $order: String, $namespace: String)", "content": "{\n    subscribePlaceOrder(restaurant:$restaurant){\n        userId\n        origin\n        order{\n          _id\n          orderId\n          restaurant{\n            _id\n            name\n            image\n            address\n            location{coordinates}\n          }\n          deliveryAddress{\n            location{coordinates}\n            deliveryAddress\n            details\n            label\n          }\n          items{\n            _id\n            title\n            description\n            image\n            quantity\n            variation{\n              _id\n              title\n              price\n              discounted\n            }\n            addons{\n              _id\n              options{\n                _id\n                title\n                description\n                price\n              }\n              description\n              title\n              quantityMinimum\n              quantityMaximum\n            }\n            specialInstructions\n            isActive\n            createdAt\n            updatedAt\n          }\n          user{\n            _id\n            name\n            phone\n            email\n          }\n          paymentMethod\n          paidAmount\n          orderAmount\n          orderStatus\n          tipping\n          taxationAmount\n          status\n          paymentStatus\n          reason\n          isActive\n          createdAt\n          orderDate\n          deliveryCharges\n          isPickedUp\n          preparationTime\n          acceptedAt\n          isRinged\n          rider{\n            _id\n            name\n            username\n            available\n          }\n      }\n}\n}"}, {"type": "mutation", "name": "DeleteDatasetStorageLocation($locationUri: String)", "content": "{\n                  result: deleteCompanies(query: \"name BEGINSWITH 'deleteMe'\")\n                }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n    members {\n      isProfileSlugTaken(slug: $slug)\n    }\n  }"}, {"type": "query", "name": "getPostVote($post: String!)", "content": "{\n    toggleAvailablity(id:$id){\n      _id\n    }\n}"}, {"type": "mutation", "name": "StartWorksheetQuery(\n      $worksheetUri: String!\n      $input: WorksheetQueryInput!\n    )", "content": "{\n    keyRevoke(keyId: $keyId)\n  }"}, {"type": "mutation", "name": "updateOrganizationName($input: OrganizationUpdateInput!)", "content": "{\n      searchGlossary(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          __typename\n          ... on Glossary {\n            nodeUri\n            label\n            readme\n            created\n            owner\n            path\n          }\n          ... on Category {\n            nodeUri\n            label\n            parentUri\n            readme\n            created\n            owner\n            path\n          }\n          ... on Term {\n            nodeUri\n            parentUri\n            label\n            readme\n            created\n            owner\n            path\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "mutation", "name": "clearNotification", "content": "{\n      createQuicksightDataSourceSet(vpcConnectionId: $vpcConnectionId)\n    }"}, {"type": "mutation", "name": "moveIdentity($fromUuid: String!, $toUuid: String!)", "content": "{\n      listOrganizationGroups(\n        organizationUri: $organizationUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          groupUri\n          invitedBy\n          created\n        }\n      }\n    }"}, {"type": "query", "name": "", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "addComment($input: CommentInput!)", "content": "{\n    rider(id:$id){\n      _id\n      name\n      username\n      available\n    }\n  }"}, {"type": "mutation", "name": "StartProfilingJob($tableUri: String!)", "content": "{\n  options {\n    _id\n    title\n    description\n    price\n  }\n}"}, {"type": "query", "name": "UserTasks(\n    $listIds: [ID!]!\n    $sectionIds: [ID!]!\n    $offset: Int\n    $limit: Int\n  )", "content": "{\n      createStudent(input: $input) {\n        id\n        name\n        email\n        ssn\n        owner\n      }\n    }"}, {"type": "query", "name": "ListDatasetTableColumns(\n      $tableUri: String!\n      $filter: DatasetTableColumnFilter\n    )", "content": "{\n      countUpVotes(targetUri: $targetUri, targetType: $targetType)\n    }"}, {"type": "query", "name": "", "content": "{\n      getUser(userID: $userID) {\n        creditCards {\n          items {\n            number\n            name\n            issuer\n            userID\n            expYear\n            expMonth\n          }\n        }\n        firstname\n        lastname\n        birth\n        displayName\n        userID\n      }\n    }"}, {"type": "mutation", "name": "UpdateRiderLocation($latitude:String!,$longitude:String!)", "content": "{\n  categories(offset: $offset, limit: $limit, order: $order, namespace: $namespace) {\n    id,\n    name,\n    createdAt\n  }\n}"}, {"type": "mutation", "name": "", "content": "{\n        user: registerNewUser(data: $data) { ${USER_FIELDS} }\n    }"}, {"type": "mutation", "name": "AddressSignupStart($address: String!)", "content": "{\n  message: createMessage(message: $message) {\n    id,\n    chatId,\n    user {\n      username,\n      userId,\n      first_name,\n      last_name,\n      username,\n      language,\n      payload,\n      createdAt,\n      email\n    }\n  }\n}"}, {"type": "mutation", "name": "Refetch", "content": "{\n    githubSignin(code: $code) {\n      token\n      user {\n        nickname\n        bio\n      }\n    }\n  }"}, {"type": "query", "name": "GetIndividuals(\n    $page: Int!\n    $pageSize: Int!\n    $filters: IdentityFilterType\n    $orderBy: String\n  )", "content": "{\n  restaurant(id:$id){\n  _id\n  orderId\n  orderPrefix\n  name\n  image\n  address\n  location{coordinates}\n  deliveryTime\n  username\n  isAvailable\n  notificationToken\n  enableNotification\n  openingTimes{\n    day\n    times{\n      startTime\n      endTime\n    }\n  }\n}}"}, {"type": "mutation", "name": "ApproveTermAssociation($linkUri: String!)", "content": "{\n  organization(id: $id) {\n    notes(pagination: $pagination) {\n      content {\n        ...NoteContent\n      }\n    }\n  }\n}\n    ${NoteContentFragmentDoc}"}, {"type": "query", "name": "GetReaderSession($dashboardUri: String)", "content": "{\n    communities {\n      community(findBy: $communityInput) {\n        get {\n          id\n          name\n          events(filter: ACTIVE) {\n            id\n            name\n            slug\n            slogan\n            description\n            startDate\n            endDate\n            website\n            partners {\n              id\n              slug\n              level\n              placement\n              companyName\n              companyLogo\n            }\n            notifications {\n              id\n              shouldFeature\n              title\n              message\n              startDate\n              endDate\n              link\n              linkText\n            }\n            theme {\n              primary\n              secondary\n              heroSlug\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "ReportContent($network: String!, $type: String!, $content_id: String!, $reason: String!, $comments: String!)", "content": "{\n\t\tsongs {\n\t\t\tid\n\t\t\ttitle\n\t\t\tevents{\n\t\t\t\tactiveNotes\n\t\t\t\tduration\n\t\t\t}\n\t\t}\n\t}"}, {"type": "subscription", "name": "onNewBlock", "content": "{\n    verifyOAuthAttestation(\n      provider: $provider\n      identity: $identity\n      authUrl: $authUrl\n      redirect: $redirect\n      code: $code\n    ) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "mutation", "name": "SendFromWallet($from: String, $to: String, $value: String)", "content": "{\n  deleteContent(id: $id) {\n    id\n  }\n}"}, {"type": "query", "name": "", "content": "{\n  organization_SetRelationshipStage(\n    organizationId: $organizationId\n    relationship: $relationship\n    stage: $stage\n  ) {\n    id\n  }\n}"}, {"type": "query", "name": "listNotifications($filter: NotificationFilter)", "content": "{\n  __typename\n  insert_onchain_links(objects: {onchain_treasury_proposal_id: $onchainTreasuryProposalId, proposer_address: $proposerAddress, post: {data: {author_id: $authorId, content: $content, topic_id: $topicId, type_id: $typeId}}}) {\n    returning {\n      id\n    }\n  }\n}"}, {"type": "mutation", "name": "ReportContent($network: String!, $type: String!, $content_id: String!, $reason: String!, $comments: String!)", "content": "{\n          feed {\n            ...FeedWithRepository\n          }\n        }\n\n        ${feedWithRepository}"}, {"type": "query", "name": "getDiscussionTreasuryProposals", "content": "{\n        objs: allMeterResources(where: $where, orderBy: $orderBy, first: $first, skip: $skip) {\n            id\n            name\n        }\n    }"}, {"type": "mutation", "name": "CreatePost($input: CreatePostInput!)", "content": "{\n    deployIdentity(\n      from: $from\n      attestations: $attestations\n      profile: $profile\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "($commentId: ID!, $body: String!)", "content": "{\n    sendOtpToEmail(email: $email, otp: $otp) {\n      result\n    }\n  }"}, {"type": "mutation", "name": "resetUser ($data: ResetUserInput!)", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            topic: {\n                id: {\n                    _eq: $postTopic\n                }\n            },\n            onchain_link: {\n                onchain_proposal_id: {\n                    _is_null: false\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_proposal_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_proposal_id\n                onchain_proposal(where: {}) {\n                    id\n                    proposalStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "query", "name": "DiscussionPostsIdAsc($limit: Int! = 20)", "content": "{\n              updateBlogTitle(blogId: \"${this.blogId}\", title: \"${this.title}\"){\n                title\n                content\n              }\n            }"}, {"type": "query", "name": "SearchComments", "content": "{\n  note_CreateForOrganization(organizationId: $organizationId, input: $input) {\n    ...NoteContent\n  }\n}\n    ${NoteContentFragmentDoc}"}, {"type": "query", "name": "Options", "content": "{\n    benchmark(name: $name, repoSlug: $repoSlug) {\n      name\n      measurements {\n        collectedAt\n        commit {\n          message\n          sha\n          url\n        }\n        environment {\n          cpu\n          cpuCount\n          dependencyVersions {\n            name\n            version\n          }\n          elixirVersion\n          erlangVersion\n          memory\n        }\n        result {\n          average\n          ips\n          maximum\n          median\n          minimum\n          mode\n          runTimes\n          sampleSize\n          stdDev\n          stdDevIps\n          stdDevRatio\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "deleteCurrentUser", "content": "{\n      listScheduledQueryExecutions(scheduledQueryUri: $scheduledQueryUri) {\n        executionArn\n        status\n        startDate\n        stopDate\n      }\n    }"}, {"type": "subscription", "name": "OnCreateMember", "content": "{\n    deleteComment (input: { id: $commentId }) {\n      result\n    }\n  }"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n      createPostSecretFieldIAM(input: { title: \"Hello, World!\" }) {\n        id\n        title\n      }\n    }"}, {"type": "mutation", "name": "DeletePostReaction ($postId: Int!, $userId: Int!, $reaction: bpchar!)", "content": "{\n  updateTimings(id:$id,\n    openingTimes:$openingTimes){\n    _id\n    openingTimes{\n      day\n      times{\n        startTime\n        endTime\n      }\n    }\n  }\n}"}, {"type": "mutation", "name": "AddressLogin($address: String!, $signature: String!)", "content": "{\n    deleteCategory(id: $id) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "ImportWallet($role: String, $name: String, $privateKey: String!)", "content": "{\n  organization_RemoveSubsidiary(\n    organizationId: $organizationId\n    subsidiaryId: $subsidiaryId\n  ) {\n    id\n    subsidiaries {\n      organization {\n        id\n        name\n      }\n    }\n  }\n}"}, {"type": "mutation", "name": "DeleteDatasetQualityRule($ruleUri: String!)", "content": "{\n    delete_Follow(\n      where: {\n        follower_id: { _eq: $userId }\n        following_id: { _eq: $followingId }\n      }\n    ) {\n      affected_rows\n    }\n  }"}, {"type": "subscription", "name": "onWalletUpdate", "content": "{\n    deleteCategory(id: $id) {\n      id\n    }\n  }"}, {"type": "subscription", "name": "ServiceBinding($namespace: String!)", "content": "{\n      getMetrics(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        nodes {\n          metricName\n          metricValue\n          AwsAccountId\n          region\n          created\n        }\n      }\n    }"}, {"type": "query", "name": "getDiscussionBounties", "content": "{\n          onCreatePost(postOwner: \"${USERNAME1}\") {\n              id\n              title\n              postOwner\n          }\n      }"}, {"type": "mutation", "name": "insertRemoteAppUserRoles($roles: [authUserRoles_insert_input!]!)", "content": "{\n      getStack(environmentUri: $environmentUri, stackUri: $stackUri) {\n        status\n        stackUri\n        targetUri\n        accountid\n        region\n        stackid\n        link\n        outputs\n        resources\n        error\n        events\n        name\n      }\n    }"}, {"type": "mutation", "name": "DeltetRestaurant($id:String!)", "content": "{\n  phoneExist(phone:$phone){\n    _id\n  }\n}"}, {"type": "query", "name": "Orders($page:Int,$rows:Int,$search:String)", "content": "{\n        searchTodos {\n          items {\n            id\n            groups\n            content\n          }\n          nextToken\n        }\n      }"}, {"type": "query", "name": "Network", "content": "{\n    createCommunity(title: $title, desc: $desc, logo: $logo, raw: $raw) {\n      id\n      title\n      desc\n    }\n  }"}, {"type": "query", "name": "SearchPrincipal($filter: PrincipalFilter)", "content": "{\n        poll_votes(where: {poll_id: {_eq: $pollId}}) {\n            ...pollVotesFields\n        }\n    }\n    ${pollVotesFields}"}, {"type": "mutation", "name": "ResetPassword($password:String!,$email:String!)", "content": "{\n    finalizeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        transactions(first: $first, after: $after) {\n          totalCount\n          nodes {\n            ...basicTransactionFields\n          }\n        }\n      }\n    }\n    web3 {\n      blockNumber\n    }\n  }\n  ${fragments.Transaction.basic}"}, {"type": "mutation", "name": "MakeOffer(\n    $listingID: String\n    $finalizes: Int\n    $affiliate: String\n    $commission: String\n    $value: String\n    $currency: String\n    $arbitrator: String\n    $data: MakeOfferInput\n    $from: String\n    $withdraw: String\n    $quantity: Int\n  )", "content": "{\n    traceFilterOptions(graphId: $graphId) {\n      clientName\n      clientVersion\n      schemaTag\n      hasErrors\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "query", "name": "Orders", "content": "{\n      getPostSecretFieldIAM(id: $id) {\n        id\n        title\n        secret\n      }\n    }"}, {"type": "mutation", "name": "UpdateStatus($id:String!,$orderStatus:String!)", "content": "{\n        obj: registerServiceConsumer(data: $data) ${SERVICE_CONSUMER_FIELDS}\n    }"}, {"type": "mutation", "name": "EditPoll ($id: Int!,  $blockEnd: Int!)", "content": "{\n  uploadToken(pushToken:$pushToken){\n    _id\n    push_token\n  }\n}"}, {"type": "subscription", "name": "OnDeleteStudent", "content": "{\n    market (symbol: $symbol) {\n      name\n      ...MarketHeader\n    }\n  }\n  ${MarketHeader.fragments.market}"}, {"type": "mutation", "name": "addressLinkStart($network: String!, $address: String!)", "content": "{\n  counters {\n    categories {\n      count(namespace: $namespace, chatbotId: $chatbotId)\n    }\n  }\n  categories(\n    offset: $offset,\n    limit: $limit,\n    order: $order,\n    namespace: $namespace,\n    chatbotId: $chatbotId\n  ) {\n    id,\n    name,\n    createdAt,\n    chatbotId\n  }\n}"}, {"type": "query", "name": "($slug: String!)", "content": "{\n    serviceInstances(namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "($postId: Int!, $userId: String!)", "content": "{\n        searchPosts {\n          items {\n            id\n            content\n          }\n          nextToken\n        }\n      }"}, {"type": "query", "name": "getAllProposals", "content": "{\n      countDeletedNotifications\n    }"}, {"type": "mutation", "name": "CreateCategory($category:CategoryInput)", "content": "{\n  orders(offset:$offset){\n    _id\n    delivery_address{\n      latitude\n      longitude\n      delivery_address\n      details\n      label\n    }\n    delivery_charges\n    order_id\n    user{\n      _id\n      phone\n    }\n    \n    items{\n      _id\n      food{\n        _id\n        title\n        category{\n          _id\n        }\n        description\n        img_url\n      }\n      variation{\n        _id\n        title\n        price\n      }\n      addons{\n        _id\n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options{\n          _id\n          title\n          description\n          price\n        }\n      }\n      quantity\n    }\n    payment_status\n    payment_method\n    order_amount\n    paid_amount\n    order_status\n    status_queue{\n      pending\n      preparing\n      picked\n      delivered\n      cancelled\n    }\n    createdAt\n    review{\n      _id\n      rating\n      description\n    }\n    rider{\n      _id\n    }\n  }\n}"}, {"type": "mutation", "name": "setApplicationLabel($id: ID!, $scenarios: Any!)", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "mutation", "name": "AddressLogin($address: String!, $signature: String!)", "content": "{\n        createPostOwnerIAM(input: { title: \"Hello, World!\" }) {\n          id\n          title\n          owner\n        }\n      }"}, {"type": "mutation", "name": "addPostAndBountyMutation($onchainBountyId: Int!, $authorId: Int!, $proposerAddress: String!, $content: String!, $topicId: Int!, $typeId: Int!)", "content": "{\n    userLogout\n  }"}, {"type": "mutation", "name": "CreateVendor($vendorInput:VendorInput)", "content": "{\n    setCategory(categoryId: $categoryId, communityId: $communityId) {\n      id\n    }\n  }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n    individuals(\n      page: $page\n      pageSize: $pageSize\n      filters: $filters\n      orderBy: $orderBy\n    ) {\n      entities {\n        ...individual\n      }\n      pageInfo {\n        page\n        pageSize\n        numPages\n        totalResults\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "query", "name": "GetCrawlerStatus($datasetUri:String, name:String)", "content": "{\n        addressSignupConfirm(network: $network, address: $address, signature: $signature) {\n            token\n        }\n    }"}, {"type": "mutation", "name": "AllowToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n      getRedshiftClusterConsoleAccess(clusterUri: $clusterUri)\n    }"}, {"type": "query", "name": "", "content": "{\n      updateTerm(nodeUri: $nodeUri, input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "SubscribeMutation($email: String!)", "content": "{\n    thread(id: $id) {\n      ...threadInfo\n      ...threadMessageConnection\n    }\n  }\n  ${threadInfoFragment}\n  ${threadMessageConnectionFragment}"}, {"type": "query", "name": "clusterRole($name: String!)", "content": "{\n\t\t\t\tupdateBackupSnapshot(id: $snapshotID, hash: $resticSnapshotHash, status: $status, config: $metaData) {\n\t\t\t\t\tid\n\t\t\t\t\trepo_id\n\t\t\t\t\thash\n\t\t\t\t}\n\t\t\t}"}, {"type": "mutation", "name": "MakeOffer(\n    $listingID: String\n    $finalizes: Int\n    $affiliate: String\n    $commission: String\n    $value: String\n    $currency: String\n    $arbitrator: String\n    $data: MakeOfferInput\n    $from: String\n    $withdraw: String\n    $quantity: Int\n  )", "content": "{\n        __typename\n        insert_poll(objects: {post_id: $postId, block_end: $blockEnd}) {\n            affected_rows\n        }\n    }"}, {"type": "mutation", "name": "DeleteTask($input: DeleteTaskInput!)", "content": "{\n    account {\n      employeeId\n      firstName\n      lastName\n      needsMfaDevice\n      needsNewPassword\n      hasMfaDevice\n      resetPasswordToken\n      mfaRequiredDate\n      groups\n      email\n    }\n  }"}, {"type": "mutation", "name": "CreateUser($phone:String,$email:String,$password:String,$name:String,$notificationToken:String,$appleId:String)", "content": "{\n  organization_Create(input: $input) {\n    id\n    name\n  }\n}"}, {"type": "query", "name": "DataQuery(\n    $id: ID!\n    $class: String!\n    $q: String!\n    $page: Int = 1\n    $size: Int = 20\n    $query_all: Boolean!\n    $search_filter_args: SearchFilterArgs!\n  )", "content": "{\n      listAirflowClusterProjects(clusterUri: $clusterUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          projectUri\n          name\n          packageName\n          codeRepositoryName\n          codeRepositoryLink\n          codeRepositoryStatus\n          codePipelineName\n          codePipelineArn\n          codePipelineLink\n          description\n          created\n        }\n      }\n    }"}, {"type": "query", "name": "UnAssignedOrders", "content": "{\n    oAuth2Clients(namespace: $namespace) {\n      name\n      error {\n        code\n        description\n      }\n      spec {\n        secretName\n      }\n    }\n  }"}, {"type": "mutation", "name": "Login($wallet: String!)", "content": "{\n        obj: authenticateUserWithPhoneAndPassword(data: { phone: $phone, password: $password }) {\n            item {\n                id\n            }\n        }\n    }"}, {"type": "mutation", "name": "ReviewOrder(\n  $order:String!,\n  $rating:Int!,\n  $description:String,\n)", "content": "{\n  organizations(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      id\n      name\n      industry\n      locations {\n        ...LocationBaseDetails\n      }\n      subsidiaryOf {\n        type\n        organization {\n          name\n        }\n      }\n    }\n    totalElements\n    totalPages\n  }\n}\n    ${LocationBaseDetailsFragmentDoc}"}, {"type": "mutation", "name": "UpdateRefundMutation(\n    $offerID: String!\n    $amount: String!\n    $from: String\n  )", "content": "{\n      listDashboardShares(dashboardUri: $dashboardUri, filter: $filter) {\n        count\n        nodes {\n          dashboardUri\n          shareUri\n          SamlGroupName\n          owner\n          created\n          status\n        }\n      }\n    }"}, {"type": "query", "name": "GetDataset(\n      $datasetUri: String!\n      $filter: DatasetStorageLocationFilter\n    )", "content": "{\n    addTeam(\n      teamName: $teamName\n      organization: $organization\n      parentName: $parentName\n    ) {\n      team {\n        name\n      }\n    }\n  }"}, {"type": "query", "name": "getContactPersonalDetailsWithOrganizations($id: ID!)", "content": "{\n  selectAddress(id:$id){\n    _id\n    addresses{\n      _id\n      label\n      delivery_address\n      details\n      longitude\n      latitude\n      selected\n    }\n  }\n}"}, {"type": "query", "name": "Comments ($postId: ID!)", "content": "{\n    unassignedOrders{\n      _id\n      rider{\n        _id\n      }\n      order_id\n      delivery_address{\n        latitude\n        longitude\n        delivery_address\n        details\n        label\n      }\n      delivery_charges\n      payment_method\n      order_amount\n      paid_amount\n      order_status\n      payment_status\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      items{\n        _id\n        food{\n          _id\n          title\n        }\n        quantity\n        variation{\n          _id\n          title\n          price\n        }\n        addons{\n          _id\n          title\n          options{\n            _id\n            title\n            price\n          }\n        }\n      }\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "DeleteMember($input: DeleteMemberInput!)", "content": "{\n  insertAuthUserRoles(objects: $roles) {\n    affected_rows\n  }\n}"}, {"type": "mutation", "name": "deleteDataPipelineEnvironment(\n      $envPipelineUri: String!\n    )", "content": "{\n    addListOwner(\n      listId: $listId\n      companyId: $companyId\n      userEmails: $userEmails\n      teamIds: $teamIds\n    ) {\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    updateDice(diceId: $diceId, did: $did, name: $name, userId: $userId, actionIds: $actionIds, coverImg: $coverImg) {\n      _id\n    }\n  }"}, {"type": "query", "name": "ChatScreenQuery($id: String!)", "content": "{\n      updateStudent(input: $input) {\n        id\n        name\n        email\n        ssn\n        owner\n      }\n    }"}, {"type": "mutation", "name": "SignInUser(\n    $email: String!\n    $password: String!\n    $socialLogin: Boolean!\n    $provider: String!\n    $tokenID: String!\n    $uuID: String!\n  )", "content": "{\n    thread(id: $id) {\n      ...threadInfo\n      ...threadMessageConnection\n    }\n  }\n  ${threadInfoFragment}\n  ${threadMessageConnectionFragment}"}, {"type": "mutation", "name": "socialMediaLoginGoogle($input: String!)", "content": "{\n    createAddonsConfiguration(\n      name: $name\n      namespace: $namespace\n      urls: $urls\n      labels: $labels\n    ) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "deleteFunction(\n    $namespace: String!\n    $function: FunctionMetadataInput!\n  )", "content": "{\n    web3 {\n      metaMaskAvailable\n      metaMaskEnabled\n      metaMaskNetworkId\n      useMetaMask\n      networkId\n      metaMaskAccount {\n        id\n      }\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    communities(filter: $filter) {\n      entries {\n        id\n        title\n        desc\n        raw\n        logo\n        subscribersCount\n        insertedAt\n        updatedAt\n      }\n      pageNumber\n      pageSize\n      totalCount\n      totalPages\n    }\n  }"}, {"type": "subscription", "name": "getDeploymentsSub($id: uuid!, $limit: Int!, $offset: Int!)", "content": "{\n      getGlossary(nodeUri: $nodeUri) {\n        nodeUri\n        label\n        readme\n        created\n        owner\n        status\n        path\n        admin\n        userRoleForGlossary\n        stats {\n          categories\n          terms\n          associations\n        }\n        associations {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            __typename\n            target {\n              ... on Dataset {\n                label\n              }\n              ... on DatasetTable {\n                label\n              }\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "SendOtpToEmail($email: String!, $otp: String!)", "content": "{\n    config\n    configObj {\n      affiliate\n      arbitrator\n      discovery\n      growth\n      graphql\n      bridge\n      ipfsRPC\n      ipfsGateway\n      ipfsEventCache\n      provider\n      providerWS\n      proxyAccountsEnabled\n      relayerEnabled\n      originGraphQLVersion\n      relayer\n      performanceMode\n      marketplaceVersion\n      messaging {\n        globalKeyServer\n        messagingNamespace\n      }\n      centralizedIdentityEnabled\n      authServer\n    }\n  }"}, {"type": "query", "name": "securityKeys($userId: uuid!)", "content": "{\n        coupons {\n          _id\n          code\n          discount\n          enabled\n        }\n      }"}, {"type": "query", "name": "FoodByIds($ids:[String!]!)", "content": "{\n  users(limit: $limit, offset: $offset) {\n    ...RemoteAppGetUsers\n  }\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n    ${RemoteAppGetUsersFragmentDoc}"}, {"type": "query", "name": "Chat($order: ID!)", "content": "{\n      getWorksheet(worksheetUri: $worksheetUri) {\n        worksheetUri\n        label\n        description\n        SamlAdminGroupName\n        tags\n        sqlBody\n        chartConfig {\n          dimensions {\n            columnName\n          }\n          measures {\n            columnName\n            aggregationName\n          }\n        }\n        owner\n        created\n        updated\n        userRoleForWorksheet\n        lastSavedQueryResult {\n          AthenaQueryId\n          ElapsedTimeInMs\n          Error\n          DataScannedInBytes\n          Status\n          columns {\n            columnName\n            typeName\n          }\n          rows {\n            cells {\n              value\n              columnName\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "DeployMarketplace(\n    $from: String\n    $token: String!\n    $version: String!\n    $autoWhitelist: Boolean\n  )", "content": "{\n    notificationAdded {\n      notification {\n        id\n        notificationId\n        notificationType\n        message\n        user {\n          id\n          fullName\n        }\n        target {\n          id\n          fullName\n        }\n        cover\n        createdAt\n        link\n      }\n    }\n  }"}, {"type": "query", "name": "cosmosAccountHistory($address: String!, $fiat: String!)", "content": "{\n    deleteServiceBindingUsages(\n      serviceBindingUsageNames: $serviceBindingUsageNames\n      namespace: $namespace\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "totalUsersByDate($where: users_bool_exp!)", "content": "{\n        onCreateMember {\n          id\n          name\n          createdAt\n          updatedAt\n        }\n      }"}, {"type": "mutation", "name": "GenerateTelegramCode($identity: String!)", "content": "{\n    createServiceBindingUsage(\n      createServiceBindingUsageInput: $createServiceBindingUsageInput\n      namespace: $namespace\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "getEvent($slug: String!)", "content": "{\n        onCreateStudent {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "query", "name": "listSagemakerStudioUserProfiles(\n      $filter: SagemakerStudioUserProfileFilter\n    )", "content": "{\n  insertWorkspace(object: $workspace) {\n    name\n    id\n  }\n}"}, {"type": "mutation", "name": "DeployIdentityViaProxy(\n    $from: String!\n    $factoryAddress: String\n    $proxyAddress: String\n    $owner: String!\n  )", "content": "{\n    expand_e(id: $id, class: $class, io: $io, rid: $rid, page: $page, size: $size) {\n      id\n      class\n      color\n      name\n      alias\n      properties {\n        n\n        v\n      }\n      inV {\n        id\n        class\n        color\n        name\n        expand\n        analysis\n        alias\n        properties {\n          n\n          v\n        }\n      }\n      outV {\n        id\n        class\n        color\n        name\n        expand\n        analysis\n        alias\n        properties {\n          n\n          v\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "unmerge($uuids: [String!])", "content": "{\n    registerOrganization(input: $input){\n      organization {\n        name\n        address\n        role\n      }\n    }\n  }"}, {"type": "query", "name": "GetDatasetPresignedUrl(\n      $datasetUri: String!\n      $input: DatasetPresignedUrlInput\n    )", "content": "{\n    marketplaces {\n      address\n      totalListings\n      version\n      token {\n        id\n      }\n      owner {\n        id\n      }\n    }\n    tokens {\n      id\n      code\n      address\n      name\n      decimals\n      totalSupply\n    }\n    identityEvents {\n      id\n    }\n  }"}, {"type": "mutation", "name": "updateAPIDefinition($id: ID!, $in: APIDefinitionInput!)", "content": "{\n      deleteMember(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n      }\n    }"}, {"type": "query", "name": "", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_motion_id: {\n                    _is_null: false\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_motion_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_motion_id\n                onchain_motion(where: {}) {\n                    id\n                    motionStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "mutation", "name": "WithdrawOffer($offerID: String!, $from: String)", "content": "{\n          user(id: $id) {\n            id\n            firstName\n            lastName\n          }\n        }"}, {"type": "mutation", "name": "DeleteCoupon($id:String!)", "content": "{\n  orders(offset:$offset){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    cancelledAt\n    assignedAt\n    deliveredAt\n    acceptedAt\n    pickedAt\n    preparationTime\n  }\n}"}, {"type": "subscription", "name": "SubscriptionOrder($id:String!)", "content": "{\n    updateAdminPassword(password: $password) {\n      _id\n      permanentPasswordSet\n      firstName\n      lastName\n      email\n      phoneNumber\n      password\n    }\n  }"}, {"type": "mutation", "name": "registerMultiPaymentForOneReceipt ($data: RegisterMultiPaymentForOneReceiptInput!)", "content": "{\n        result: exportTicketAnalyticsToExcel(data: $data) { link }\n    }"}, {"type": "mutation", "name": "addPostAndTreasurySpendProposalMutation($onchainTreasuryProposalId: Int!, $authorId: Int!, $proposerAddress: String!, $content: String!, $topicId: Int!, $typeId: Int!)", "content": "{\n    currencies(tokens: $tokens) {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        id\n        decimals\n        balance(address: $account)\n        allowance(address: $account, target: $target)\n      }\n    }\n    proxyCurrencies: currencies(tokens: $tokens) @include(if: $useProxy) {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        id\n        decimals\n        balance(address: $proxy)\n        allowance(address: $account, target: $proxy)\n      }\n    }\n  }"}, {"type": "mutation", "name": "ownerLogin($email:String!,$password:String!)", "content": "{\n        obj: acceptOrRejectOrganizationInviteById(id: $id, data: $data) ${ORGANIZATION_EMPLOYEE_FIELDS}\n    }"}, {"type": "mutation", "name": "SendOtpToPhoneNumber($phone: String!, $otp: String!)", "content": "{\n    availableCountries {\n      id\n      code\n      name\n    }\n  }"}, {"type": "query", "name": "getOnchainTips($startBlock: Int!)", "content": "{\n  adminLogin(email:$email,password:$password){\n    userId\n    token\n    name\n    email\n  }\n}"}, {"type": "query", "name": "Listing($listingId: ID!)", "content": "{\n          onUpdateStudent {\n            id\n            name\n            email\n            ssn\n            owner\n          }\n        }"}, {"type": "query", "name": "ListGlossaries($filter: GlossaryFilter)", "content": "{\n    deleteClusterAddonsConfiguration(name: $name) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "query", "name": "ShopCountries", "content": "{\n  users(pagination: $pagination, where: $where) {\n    content {\n      id\n      firstName\n      lastName\n    }\n    totalElements\n  }\n}"}, {"type": "mutation", "name": "startConfirmPhoneAction($data: StartConfirmPhoneActionInput!)", "content": "{\n  posts(\n    limit: $limit\n    where: {type: {id: {_eq: $postType}}, topic: {id: {_eq: $postTopic}}, onchain_link: {onchain_bounty_id: {_is_null: false}}}\n    order_by: {onchain_link: {id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_bounty_id\n      onchain_bounty(where: {}) {\n        id\n        value\n        bountyStatus(last: 1) {\n          id\n          status\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "CharacterDetail($id: ID!)", "content": "{\n      listDatasetQualityRules(datasetUri: $datasetUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          ruleUri\n          name\n          label\n          description\n          created\n          query\n        }\n      }\n    }"}, {"type": "query", "name": "listEnvironmentClusters(\n      $environmentUri: String!\n      $filter: RedshiftClusterFilter\n    )", "content": "{\n\t\tsetDefaultAddress(address: $address) {\n\t\t\tmessage\n\t\t\ttoken\n\t\t}\n\t}"}, {"type": "mutation", "name": "ResetDatabasePassword($appId: String!, $newPassword: String!)", "content": "{\n      rejectShareObject(shareUri: $shareUri) {\n        shareUri\n        status\n      }\n    }"}, {"type": "mutation", "name": "updateProfileBasic($name: String!, $bio: String)", "content": "{\n  __typename\n  insert_option_poll_votes_one(\n    object: {option_poll_id: $optionPollId, user_id: $userId, option: $option}\n  ) {\n    id\n  }\n}"}, {"type": "mutation", "name": "CreateAddress($addressInput:AddressInput!)", "content": "{\n        transitionOrderToState(state: \"ArrangingPayment\") {\n            ...ActiveOrder\n        }\n    }\n    ${ORDER_FRAGMENT}"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n      getCommentConnection(id: $commentId) {\n        id\n        content\n        post {\n          id\n          title\n        }\n      }\n    }"}, {"type": "mutation", "name": "AddOptionPollVote($optionPollId: Int!, $userId: Int!, $option: String!)", "content": "{\n    hero(episode: $episode) {\n      name @include(if: $includeName)\n    }\n  }"}, {"type": "query", "name": "dashboardView_Contacts($pagination: Pagination!, $where: Filter, $sort: SortBy)", "content": "{\n    signInUser(\n      email: $email\n      password: $password\n      socialLogin: $socialLogin\n      provider: $provider\n      tokenID: $tokenID\n      uuID: $uuID\n    ) {\n      currentUser {\n        id\n        user {\n          id\n          fullName\n          email\n        }\n      }\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "query", "name": "selectContact ($organizationId: ID, $propertyId: ID, $unitName: String, $unitType: String)", "content": "{\n        getPostPrivate(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "subscription", "name": "getDeploymentsSub($id: uuid!, $limit: Int!, $offset: Int!)", "content": "{\n  tags {\n    id\n    name\n  }\n}"}, {"type": "mutation", "name": "deleteService($name: String!, $namespace: String!)", "content": "{\n  onchain_links(where: {onchain_motion_id: {_is_null: false}}) {\n    ...discussionMotion\n  }\n}\n    ${DiscussionMotionFragmentDoc}"}, {"type": "query", "name": "GetContactList($pagination: Pagination!, $where: Filter, $sort: [SortBy!])", "content": "{\n      getUser(userID: $userID) {\n        creditCards {\n          items {\n            number\n            name\n            issuer\n            userID\n            expYear\n            expMonth\n          }\n        }\n        firstname\n        lastname\n        birth\n        displayName\n        userID\n      }\n    }"}, {"type": "mutation", "name": "DeleteTag($id: ID!)", "content": "{query}"}, {"type": "mutation", "name": "deleteNamespace($name: String!)", "content": "{\n    newNotification {\n      totalCount\n      totalUnread\n      node {\n        id\n        title\n        timestamp\n        content\n      }\n    }\n  }"}, {"type": "query", "name": "($postId: ID!)", "content": "{\n    tips {\n      _id\n      tipVariations\n      enabled\n    }\n  }"}, {"type": "mutation", "name": "DeleteMarriageCertificateUploadedFile(\n    $attachmentKey: String!\n    $uploadSessionId: String!\n  )", "content": "{\n    user: currentUser {\n      ...userInfo\n      email\n      pendingEmail\n      ...userSettings\n    }\n  }\n  ${userInfoFragment}\n  ${userSettingsFragment}"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n    setRPCProvider(uri: $uri) {\n      globalRegistryAddress\n      orgRegistryAddress\n      organizationName\n      organizationRole\n      organizationAddress\n      organizationWhisperKey\n      rpcProvider\n    }\n  }"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    addAction(name: $name, action: $action, equation: $equation) {\n      _id\n    }\n  }"}, {"type": "query", "name": "GetTerm($nodeUri: String!)", "content": "{\n          searchBlogs(aggregates: [{ name: \"Terms\", type: terms, field: secret }]) {\n            aggregateItems {\n              name\n              result {\n                ... on SearchableAggregateBucketResult {\n                  buckets {\n                    doc_count\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n    addTaskOwners(\n      taskID: $taskID\n      userOwners: $userOwners\n      userReviewers: $userReviewers\n      teamOwners: $teamOwners\n      teamReviewers: $teamReviewers\n    ) {\n      errors {\n        path\n        message\n      }\n      success\n      task {\n        id\n        name\n        priority\n        status\n        dueDate\n        updatedAt\n        userOwners {\n          id\n          email\n          fullName\n          profileUrl\n        }\n        teamOwners {\n          id\n          name\n        }\n        userReviewers {\n          id\n          email\n          fullName\n          profileUrl\n        }\n        teamReviewers {\n          id\n          name\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "signin($identity: String, $secret: String)", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "query", "name": "Users($first: Int, $after: String, $sort: String)", "content": "{\n  deleteZone(id:$id){\n    _id\n    title\n    description\n    location{coordinates}\n    isActive\n  }\n}"}, {"type": "query", "name": "", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n      ...communityMembers\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}\n  ${communityMembersFragment}"}, {"type": "mutation", "name": "UpdateOrderStatusRider($id:String!,$status:String!)", "content": "{\n  createCategory(category: $category) {\n    id,\n    name\n  }\n}"}, {"type": "query", "name": "searchRedshiftClusters($filter: RedshiftClusterFilter)", "content": "{\n      removeUserFromEnvironment(\n        environmentUri: $environmentUri\n        userName: $userName\n      )\n    }"}, {"type": "query", "name": "GetReaderSession($dashboardUri: String)", "content": "{\n  posts(\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_motion_id: {_in: $onchainMotionIds}}}\n    order_by: {onchain_link: {onchain_motion_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_motion_id\n      onchain_motion(where: {}) {\n        id\n        motionStatus(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "(\n  $title: String,\n  $id: Int,\n  $slug: String,\n  $namespace: String,\n  $search: String,\n  $chatbotId: String\n)", "content": "{\n  login(password: $password, username: $username) {\n    token\n  }\n}"}, {"type": "query", "name": "ReferendumPostAndComments ($id:Int!)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "query", "name": "", "content": "{\n      createCommentConnection(input: { content: \"Comment\", commentConnectionPostId: $postId }) {\n        id\n        content\n      }\n    }"}, {"type": "mutation", "name": "removeEmailFromOrganization($organizationId: ID!, $id: ID!)", "content": "{\n                blogById(blogId: \"${this.blogId}\") {\n                  title\n                  content\n                }\n              }"}, {"type": "mutation", "name": "", "content": "{\n      deleteTaskGroup(input: $input) {\n        id\n        title\n        description\n        priority\n        severity\n        groups\n        singleGroup\n      }\n    }"}, {"type": "query", "name": "DataQuery(\n    $id: ID!\n    $class: String!\n    $q: String!\n    $page: Int = 1\n    $size: Int = 20\n    $query_all: Boolean!\n    $search_filter_args: SearchFilterArgs!\n  )", "content": "{\n  options {\n    _id\n    title\n    description\n    price\n  }\n}"}, {"type": "mutation", "name": "($categoryId: ID!, $communityId: ID!)", "content": "{\n    filteredServiceClasses @client {\n      name\n      displayName\n      externalName\n    }\n  }"}, {"type": "mutation", "name": "removeContactJobRole($contactId: ID!, $roleId: ID!)", "content": "{\n      createTodo(input: $input) {\n        id\n        description\n        name\n      }\n    }"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n  reviewOrder(reviewInput:{\n    order:$order,\n    rating:$rating,\n    description:$description,\n  }){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    orderDate\n    expectedTime\n    isPickedUp\n    tipping\n    taxationAmount\n    createdAt\n    completionTime\n    preparationTime\n  }\n}"}, {"type": "mutation", "name": "resendVerifyEmailToken", "content": "{\n  update_posts(where: {id: {_eq: $id}}, _set: {content: $content, title: $title}) {\n    affected_rows\n  }\n}"}, {"type": "mutation", "name": "createPoll($postId: Int!, $blockEnd: Int!)", "content": "{\n  orders(offset:$offset){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    cancelledAt\n    assignedAt\n    deliveredAt\n    acceptedAt\n    pickedAt\n    preparationTime\n  }\n}"}, {"type": "mutation", "name": "noteLinkAttachment($noteId: ID!, $attachmentId: ID!)", "content": "{\n    deleteAddonsConfiguration(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "AddFavourite($id:String!)", "content": "{\n      createSagemakerStudioUserProfile(input: $input) {\n        sagemakerStudioUserProfileUri\n        name\n        label\n        created\n        description\n        tags\n      }\n    }"}, {"type": "query", "name": "celoValidatorGroups", "content": "{\n          searchPosts(aggregates: [{ name: \"Terms\", type: terms, field: secret }]) {\n            aggregateItems {\n              name\n              result {\n                ... on SearchableAggregateBucketResult {\n                  buckets {\n                    doc_count\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }"}, {"type": "query", "name": "TodoList", "content": "{\n    undoDislikeComment(thread: $thread, id: $id) {\n      id\n      viewerHasDisliked\n      dislikesCount\n    }\n  }"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n    clusterRole(name: $name) {\n      name\n      rules {\n        apiGroups\n        resources\n        verbs\n      }\n    }\n  }"}, {"type": "mutation", "name": "updateOAuthClient(\n    $namespace: String!\n    $name: String!\n    $generation: Int!\n    $params: OAuth2ClientSpecInput!\n  )", "content": "{\n    search_e(id: $id, rid: $rid) {\n      inE {\n        class\n        color\n        count\n        alias\n      }\n      outE {\n        class\n        color\n        count\n        alias\n      }\n    }\n  }"}, {"type": "query", "name": "getRecommendations($productId: ID!)", "content": "{\n    events {\n      event(findBy: { id: $eventId }) {\n        partners {\n          level(level: $level) {\n            id\n            slug\n            companyName\n            companyLogo\n            placement\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "(\n    $firstName: String\n    $lastName: String\n    $email: String\n    $phoneNumber: String\n    $password: String\n  )", "content": "{\n    application(id: $applicationId) {\n      name\n      id\n      package(id: $apiPackageId) {\n        id\n        name\n        apiDefinition(id: $apiDefinitionId) {\n          id\n          name\n          description\n          targetURL\n          spec {\n            data\n            format\n            type\n          }\n          group\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "delete$", "content": "{\n    createWallet(role: $role, name: $name) {\n      ...balanceFields\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "mutation", "name": "DeleteAddress($id:ID!)", "content": "{\n    keyCreate(graphId: $graphId) {\n      id\n      secret\n      prefix\n      createdAt\n    }\n  }"}, {"type": "query", "name": "DiscussionPostsIdDesc($limit: Int! = 20)", "content": "{\n  delete_option_poll_votes(\n    where: {_and: [{option_poll_id: {_eq: $optionPollId}}, {user_id: {_eq: $userId}}]}\n  ) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "RestaurantByOwner($id:String)", "content": "{\n    web3 {\n      metaMaskAvailable\n      metaMaskEnabled\n      metaMaskNetworkId\n      useMetaMask\n      networkId\n      metaMaskAccount {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "getPivotRolePresignedUrl($organizationUri: String!)", "content": "{\n    createWallet(role: $role, name: $name) {\n      ...balanceFields\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "query", "name": "Products($id:Int)", "content": "{\n  allOrders(page:$page,rows:$rows,search:$search){\n    _id\n    delivery_address{\n      latitude\n      longitude\n      delivery_address\n      details\n      label\n    }\n    delivery_charges\n    order_amount\n    paid_amount\n    payment_method\n    order_id\n    user{\n      _id\n      name\n      email\n      phone\n    }\n    items{\n      _id\n      food{\n        _id\n        title\n        description\n        img_url\n      }\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        \n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options{\n         \n          title\n          price\n        }\n      }\n      quantity\n    }\n    reason\n    status\n    payment_status\n    order_status\n    createdAt\n    review{\n      _id\n      rating\n      description\n    }\n    rider{\n      _id\n      name\n    }\n  }\n}"}, {"type": "subscription", "name": "OnUpdateTaskGroup(\n            $filter: ModelSubscriptionTaskGroupFilterInput\n          )", "content": "{\n        onCreateTask(filter: $filter, owner: $owner) {\n          id\n          title\n          description\n          priority\n          severity\n          owner\n          readOwners\n        }\n      }"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n    user(username: $username) {\n      ...userInfo\n    }\n  }\n  ${userInfoFragment}"}, {"type": "query", "name": "getCommunityById($id: ID)", "content": "{\n    createAssociatedCompany(\n      companyId: $companyId\n      ownerEmail: $ownerEmail\n      newCompanyName: $newCompanyName\n      isParent: $isParent\n      isBroker: $isBroker\n    ) {\n      company {\n        id\n        name\n        logoUrl\n      }\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n  deleteApp(id: $appId) {\n    id\n  }\n}"}, {"type": "mutation", "name": "DeployToken(\n    $name: String\n    $symbol: String\n    $decimals: String\n    $supply: String\n    $type: String\n    $from: String\n  )", "content": "{\n      createPost(input: $input) {\n        id\n        content\n      }\n    }"}, {"type": "query", "name": "", "content": "{\n    user: currentUser {\n      ...userInfo\n      communityConnection {\n        edges {\n          node {\n            id\n            name\n            slug\n            profilePhoto\n            communityPermissions {\n              isMember\n              isBlocked\n              isOwner\n              isModerator\n            }\n          }\n        }\n      }\n      channelConnection {\n        edges {\n          node {\n            id\n            name\n            slug\n            isDefault\n            isPrivate\n            isArchived\n            community {\n              id\n            }\n            channelPermissions {\n              isMember\n              isPending\n              isBlocked\n              isOwner\n              isModerator\n            }\n          }\n        }\n      }\n    }\n  }\n  ${userInfoFragment}"}, {"type": "query", "name": "getPaginatedMemeCategories", "content": "{\n  celoValidatorGroups {\n    group\n    name\n    metadataURL\n    blockNumber\n    votingPower\n    votingPowerFraction\n    capacityAvailable\n    totalCapacity\n    multiplier\n    groupShare\n    groupScore\n    validatorDetails {\n      validatorAddress\n      validator_score\n    }\n  }\n}"}, {"type": "query", "name": "Post ($slug: String!)", "content": "{\n    stampCmsPassport(userId: $userId, rules: $rules) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "($postId: Int!, $userId: String!)", "content": "{\n    createFunction(\n      name: $name\n      namespace: $namespace\n      labels: $labels\n      size: $size\n      runtime: $runtime\n    ) {\n      name\n      namespace\n      labels\n      size\n      runtime\n    }\n  }"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n        posts(where: {id: {_eq: $id}}) {\n            ...discussionPost\n        }\n    }\n    ${discussionPost}"}, {"type": "query", "name": "LatestDemocracyTreasuryProposalPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5)", "content": "{\n        post (slug: $slug) {\n          slug\n          ...PostVotes\n        }\n      }\n      ${PostVotes.fragments.post}"}, {"type": "query", "name": "getCouncilMembers", "content": "{\n  insertWorkspace(object: $workspace) {\n    name\n    id\n  }\n}"}, {"type": "mutation", "name": "CreateDataset($input: NewDatasetInput)", "content": "{\n    countStatus {\n      communitiesCount\n      postsCount\n      jobsCount\n      videosCount\n      reposCount\n      categoriesCount\n      tagsCount\n      threadsCount\n    }\n  }"}, {"type": "mutation", "name": "(\n    $title: String!\n    $body: String!\n    $digest: String!\n    $length: Int!\n    $linkAddr: String\n    $communityId: ID!\n  )", "content": "{\n  proposals(where: {proposalStatus_some: {AND: [{status: \"Proposed\"}, {blockNumber: {number_gte: $startBlock}}]}}) {\n    ...onchainProposal\n  }\n}\n    ${OnchainProposalFragmentDoc}"}, {"type": "mutation", "name": "CreateListing(\n    $from: String!\n    $deposit: String\n    $depositManager: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n      getDatasetTable(tableUri: $tableUri) {\n        tableUri\n        userRoleForTable\n        permissions {\n          count\n          nodes {\n            userName\n            userRoleForTable\n            created\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "UpdateUser($name:String!,$phone:String,$phoneIsVerified:Boolean,$emailIsVerified:Boolean)", "content": "{\n    uniswapCreateExchange(from: $from, tokenAddress: $tokenAddress) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "registerApplicationFromTemplate($in: ApplicationFromTemplateInput!)", "content": "{\n    hero(episode: $episode) {\n      ...HeroDetails\n    }\n  }\n  ${HeroDetailsFragmentDoc}"}, {"type": "query", "name": "", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "mutation", "name": "", "content": "{\n        result: predictTransactionClassification(data: $data) { id name isOutcome category }\n    }"}, {"type": "mutation", "name": "addPartner($input: AddPartnerInput!)", "content": "{\n    withdrawListing(\n      listingID: $listingID\n      target: $target\n      reason: $reason\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n  counters {\n    categories {\n      count(namespace: $namespace, chatbotId: $chatbotId)\n    }\n  }\n  categories(\n    offset: $offset,\n    limit: $limit,\n    order: $order,\n    namespace: $namespace,\n    chatbotId: $chatbotId\n  ) {\n    id,\n    name,\n    createdAt,\n    chatbotId\n  }\n}"}, {"type": "query", "name": "RidersByZone($id:String!)", "content": "{\n    updateGitRepository(namespace: $namespace, name: $name, spec: $spec) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "UniswapInitFactory(\n    $from: String!\n    $exchange: String\n    $factory: String\n  )", "content": "{\n  insertWorkspace(object: $workspace) {\n    name\n    id\n  }\n}"}, {"type": "query", "name": "Tips", "content": "{\n    updateTokenAllowance(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "query", "name": "getOrganizationEmployeeById($id: ID!)", "content": "{\n      createPost(input: $input) {\n        id\n        title\n        postOwner\n      }\n    }"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n    me {\n      _id\n    }\n  }"}, {"type": "query", "name": "Conversations($id: String)", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "mutation", "name": "addReferendumIdToProposalMutation($proposalId: Int!, $referendumId: Int!)", "content": "{\n    scheduleJob(repoSlug: $repoSlug, branchName: $branchName, commitSha: $commitSha) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "(\n    $id: ID!\n    $color: RainbowColorEnum!\n    $title: String!\n    $communityId: ID!\n  )", "content": "{\n  orderCount(restaurant:$restaurant)\n}"}, {"type": "query", "name": "loadMoreEverythingThreads($after: String)", "content": "{\n  posts(\n    limit: $limit\n    where: {type: {id: {_eq: $postType}}, topic: {id: {_eq: $postTopic}}, onchain_link: {onchain_bounty_id: {_is_null: false}}}\n    order_by: {onchain_link: {id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_bounty_id\n      onchain_bounty(where: {}) {\n        id\n        value\n        bountyStatus(last: 1) {\n          id\n          status\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "mutation", "name": "createOnBoardingByType ($data: CreateOnBoardingInput!)", "content": "{\n    createServiceBindingUsage(\n      createServiceBindingUsageInput: $createServiceBindingUsageInput\n      namespace: $namespace\n    ) {\n      name\n    }\n  }"}, {"type": "subscription", "name": "$", "content": "{\n      createTodo(input: $input) {\n        id\n        description\n        name\n      }\n    }"}, {"type": "mutation", "name": "AddPollVote($pollId: Int!, $userId: Int!, $vote: bpchar!)", "content": "{\n    toggleMetaMask(enabled: $enabled)\n  }"}, {"type": "mutation", "name": "", "content": "{\n    channel(channelSlug: $channelSlug, communitySlug: $communitySlug) {\n      ...channelInfo\n    }\n  }\n  ${channelInfoFragment}"}, {"type": "query", "name": "($minecraftId: ID!)", "content": "{\n    user: currentUser {\n      ...userInfo\n      email\n      pendingEmail\n      ...userSettings\n    }\n  }\n  ${userInfoFragment}\n  ${userSettingsFragment}"}, {"type": "query", "name": "HumanWithNullHeight", "content": "{\n    entities: runtimes {\n      data {\n        name\n        id\n        labels\n      }\n    }\n  }"}, {"type": "query", "name": "Listing($listingId: ID!)", "content": "{\n      listAllEnvironmentGroups(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          groupUri\n          invitedBy\n          created\n          description\n          environmentIAMRoleArn\n          environmentIAMRoleName\n          environmentAthenaWorkGroup\n          environmentPermissions(environmentUri: $environmentUri) {\n            name\n            permissionUri\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "exportPropertiesToExcel ($data: ExportPropertiesToExcelInput!)", "content": "{\n      countUnreadNotifications\n    }"}, {"type": "query", "name": "SearchEnvironmentDataItems(\n      $filter: EnvironmentDataItemFilter\n      $environmentUri: String\n    )", "content": "{\n    merge(fromUuids: $fromUuids, toUuid: $toUuid) {\n      uuid\n      individual {\n        ...individual\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "query", "name": "GetContactLocations($id: ID!)", "content": "{\n  updateUser(pk_columns: {id: $id}, _set: $user) {\n    id\n  }\n}"}, {"type": "query", "name": "($limit: Int, $offset: Int, $order: String)", "content": "{\n  emailUpdateInContact(contactId: $contactId, input: $input) {\n    primary\n    label\n    email\n    id\n  }\n}"}, {"type": "query", "name": "", "content": "{\n  signup(email: $email, password: $password, username: $username) {\n    token\n  }\n}"}, {"type": "query", "name": "Post ($slug: String!)", "content": "{\n    teams(pageSize: 500, filters: $filters) {\n      entities {\n        name\n        numchild\n        id\n        enrollments {\n          individual {\n            mk\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "AddPaymentToOrder($input: PaymentInput!)", "content": "{\n  logout {\n    message\n  }\n}"}, {"type": "query", "name": "synthesizeMarkdown($markdown: String!, $voice: String!)", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "query", "name": "accountQuery(\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n    isLoggedIn(wallet: $wallet)\n  }"}, {"type": "mutation", "name": "UpdateListing(\n    $listingID: ID!\n    $from: String!\n    $additionalDeposit: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n      deleteTodo(input: $input) {\n        id\n        description\n        name\n      }\n    }"}, {"type": "mutation", "name": "sendResetPasswordEmail ($username: String!)", "content": "{\n  user: mergeUser(fromId: $fromId, toId: $toId, chatbotId: $chatbotId) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email,\n    chatIds {\n      id,\n      transport,\n      chatId\n    }\n  }\n}"}, {"type": "query", "name": "getProjectLogs($appID: String!, $service: String, $from: Timestamp, $to: Timestamp)", "content": "{\n        result: importBankTransactions(data: $data) { bankAccount ${BANK_ACCOUNT_FIELDS} }\n    }"}, {"type": "query", "name": "getSchema($id: String!)", "content": "{\n  updateOrderStatus(id:$id,status:$status,reason:$reason){\n    _id\n    order_status\n    payment_status\n  }\n}"}, {"type": "query", "name": "", "content": "{\n  orders(offset:$offset){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    cancelledAt\n    assignedAt\n    deliveredAt\n    acceptedAt\n    pickedAt\n    preparationTime\n  }\n}"}, {"type": "query", "name": "Tips", "content": "{\n        result: registerResident(data: $data) ${RESIDENT_FIELDS}\n    }"}, {"type": "mutation", "name": "", "content": "{\n    config\n    configObj {\n      affiliate\n      arbitrator\n      discovery\n      growth\n      graphql\n      bridge\n      ipfsRPC\n      ipfsGateway\n      ipfsEventCache\n      provider\n      providerWS\n      proxyAccountsEnabled\n      relayerEnabled\n      originGraphQLVersion\n      relayer\n      performanceMode\n      marketplaceVersion\n      messaging {\n        globalKeyServer\n        messagingNamespace\n      }\n      centralizedIdentityEnabled\n      authServer\n    }\n  }"}, {"type": "mutation", "name": "EditComment ($id: uuid!, $content: String!)", "content": "{\n    addDomain(\n      domain: $domain\n      isTopDomain: $isTopDomain\n      organization: $organization\n    ) {\n      domain {\n        domain\n        isTopDomain\n        organization {\n          name\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "getWorkspaceMembers($workspaceId: uuid!)", "content": "{\n        result: exportPaymentsToExcel(data: $data) { status, linkToFile }\n    }"}, {"type": "mutation", "name": "DeleteOption($id:String!)", "content": "{\n        feed(limit: $limit) {\n          id\n          commentCount\n          repository {\n            full_name\n            html_url\n            owner {\n              avatar_url\n            }\n          }\n        }\n      }"}, {"type": "subscription", "name": "ServiceBindingUsageEvent($namespace: String!)", "content": "{\n\t\t\t\tbackupSites(uuid: $repoID) {\n\t\t\t\t\tid\n\t\t\t\t\tuuid\n\t\t\t\t\tpassword\n\t\t\t\t}\n\t\t\t}"}, {"type": "query", "name": "HeroParentTypeDependentField($episode: Episode)", "content": "{\n    insert_Like(objects: [{ post_id: $postId, user_id: $userId }]) {\n      affected_rows\n    }\n  }"}, {"type": "query", "name": "getTabledProposalAtBlock($blockNumber: Int!)", "content": "{\n    serviceBindingUsages(\n      namespace: $namespace\n      resourceKind: $resourceKind\n      resourceName: $resourceName\n    ) {\n      name\n      parameters {\n        envPrefix {\n          name\n        }\n      }\n      serviceBinding {\n        name\n        serviceInstanceName\n        secret {\n          name\n          data\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetContactTags($id: ID!)", "content": "{\n  orders(offset:$offset){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    cancelledAt\n    assignedAt\n    deliveredAt\n    acceptedAt\n    pickedAt\n    preparationTime\n  }\n}"}, {"type": "mutation", "name": "", "content": "{\n  emailRemoveFromContactById(contactId: $contactId, id: $id) {\n    result\n  }\n}"}, {"type": "query", "name": "getMember", "content": "{\n    deleteApplicationLabel(applicationID: $id, key: \"scenarios\") {\n      key\n      value\n    }\n  }"}, {"type": "mutation", "name": "CreateDatasetTable(\n      $datasetUri: String\n      $input: NewDatasetTableInput\n    )", "content": "{\n    newNotification {\n      totalCount\n      totalUnread\n      node {\n        id\n        title\n        timestamp\n        content\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreateTask($input: CreateTaskInput!)", "content": "{\n        onUpdateStudent {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "mutation", "name": "($thread: String!, $id: ID!, $tagId: ID!, $communityId: ID!)", "content": "{\n        createUser(input: $input, condition: $condition) {\n            id\n            username\n            cognitoId\n            tenantId\n            contact {\n                emailAddress\n            }\n            displayName\n            name\n            roles\n            dateOfBirth\n            riderResponsibility\n            disabled\n            createdAt\n            updatedAt\n            _version\n            _deleted\n            _lastChangedAt\n        }\n    }"}, {"type": "mutation", "name": "deleteOAuthClient($namespace: String!, $name: String!)", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "mutation", "name": "approveShareObject($shareUri: String!)", "content": "{\n        searchTodos {\n          items {\n            id\n            groups\n            content\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "DeployMarketplace(\n    $from: String\n    $token: String\n    $version: String\n    $autoWhitelist: Boolean\n  )", "content": "{\n\t\tmemes_aggregate(limit: $limit, offset: $offset) {\n\t\t\tnodes {\n\t\t\t\tid\n\t\t\t\tdownloads\n\t\t\t\tlikes\n\t\t\t\tviews\n\t\t\t\timage_link\n\t\t\t\tcategory\n\t\t\t\ttitle\n\t\t\t}\n\t\t}\n\t}"}, {"type": "mutation", "name": "UniswapAddLiquidity(\n    $from: String!\n    $exchange: String!\n    $value: String!\n    $tokens: String!\n    $liquidity: String!\n  )", "content": "{\n\t\tchangeUsername(username: $username, password: $password){\n\t\t\tmessage\n\t\t\ttoken\n\t\t}\n\t}"}, {"type": "mutation", "name": "DisputeOffer($offerID: String, $from: String)", "content": "{\n      deleteStudent(input: $input) {\n        id\n        name\n        email\n        ssn\n        owner\n      }\n    }"}, {"type": "mutation", "name": "VerifyPhoneCode(\n    $identity: String!\n    $prefix: String!\n    $phone: String!\n    $code: String!\n  )", "content": "{\n        updateSchema(input: $input) {\n          id\n        }\n      }"}, {"type": "mutation", "name": "SyncDatasetTableColumns($tableUri: String!)", "content": "{\n    deleteIdentity(uuid: $uuid) {\n      uuid\n    }\n  }"}, {"type": "mutation", "name": "VerifyMfaDevice($sessionId: String!, $pairingCode: String!)", "content": "{\n  update_posts(where: {id: {_eq: $id}}, _set: {content: $content, title: $title}) {\n    affected_rows\n  }\n}"}, {"type": "mutation", "name": "socialMediaLoginGoogle($input: String!)", "content": "{\n      updateMember(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n      }\n    }"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n      countDeletedNotifications\n    }"}, {"type": "mutation", "name": "CreateDashboard($input: NewDashboardInput)", "content": "{\n      listUserActivities(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          activityUri\n          created\n          summary\n          targetUri\n          targetType\n          action\n        }\n      }\n    }"}, {"type": "mutation", "name": "resetPassword($newPassword: String!, $userId: Int!, $token: String!)", "content": "{\n    newTransaction {\n      totalCount\n      node {\n        ...basicTransactionFields\n      }\n    }\n  }\n  ${fragments.Transaction.basic}"}, {"type": "mutation", "name": "($thread: CmsThread, $id: ID!)", "content": "{\n  users(id: $id,username: $username, search: $search, chatbotId: $chatbotId) {\n    id,\n    userId,\n    chatbotId,\n    username,\n    language,\n    first_name,\n    last_name,\n    chatIds {\n      chatId,\n      transport\n    }\n  }\n}"}, {"type": "query", "name": "remoteAppGetUsers($where: users_bool_exp!, $limit: Int!, $offset: Int!)", "content": "{\n    traceFilterOptions(graphId: $graphId) {\n      clientName\n      clientVersion\n      schemaTag\n      hasErrors\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n      getPostConnection(id: $postId) {\n        id\n        title\n        comments {\n          items {\n            id\n            content\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "", "content": "{\n  __typename\n  insert_poll(objects: {post_id: $postId, block_end: $blockEnd}) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "GRAPH_LIST(\n    $traceFilters: [TraceFilter]\n    $to: DateTime\n    $from: DateTime\n  )", "content": "{\n              createBlog(title: \"${this.title}\", content:\"${this.content}\", archived: false, userId: \"${this.loggedInUser}\"){\n                title\n                content\n              }\n            }"}, {"type": "mutation", "name": "SIGNUP($email: String, $password: String!, $username: String!)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        sales(first: $first, after: $after, filter: $filter) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            ...basicOfferFields\n            listing {\n              ...basicListingFields\n            }\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "mutation", "name": "ChangePassword($oldPassword:String!,$newPassword:String!)", "content": "{\n    acceptOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateStudent($input: UpdateStudentInput!)", "content": "{\n    createRider(\n        riderInput:$riderInput\n    ){\n    _id\n    name\n    username\n    password\n    phone\n    available\n      zone{\n        _id\n      }\n    }\n  }"}, {"type": "mutation", "name": "SaveEmailConfiguration($configurationInput:EmailConfigurationInput!)", "content": "{\n        postUnsubscribe(post_id: $postId) {\n            message\n        }\n    }"}, {"type": "query", "name": "runAthenaSqlQuery($environmentUri: String!, $worksheetUri: String!, $sqlQuery: String!)", "content": "{\n\t\t\t\tdeleteBackupRepoRecord(\n\t\t\t\t\tsite_id: $backupSiteID,\n\t\t\t\t\tid: $backupRepoID,\n\t\t\t\t) {\n\t\t\t\t\tsuccess\n\t\t\t\t}\n\t\t\t}"}, {"type": "query", "name": "getMembers", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "query", "name": "getEvent($eventId: ID!)", "content": "{\n    createListing(\n      deposit: $deposit\n      depositManager: $depositManager\n      from: $from\n      data: $data\n      autoApprove: $autoApprove\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "WithdrawOffer($offerID: String!, $from: String)", "content": "{\n    vouchForAgent(agentId: $agentId)\n  }"}, {"type": "mutation", "name": "($slug: String!, $title: String!, $body: String!, $smImageUrl: String, $lgImageUrl: String)", "content": "{\n  tag_Update(input: $input) {\n    id\n    name\n  }\n}"}, {"type": "query", "name": "listOrganizationGroups(\n      $filter: GroupFilter\n      $organizationUri: String!\n    )", "content": "{\n    job(id: $id) {\n      branchName\n      claimedAt\n      commitSha\n      completedAt\n      id\n      log\n      repoSlug\n    }\n  }"}, {"type": "mutation", "name": "UpdateTodo($input: UpdateTodoInput!)", "content": "{\n        onCreateTask(filter: {\n          and: [\n            { priority: { eq: 8 } }\n            { severity: { gt: 5 } }\n          ]\n        }) {\n          id\n          title\n          description\n          priority\n          severity\n          owner\n          readOwners\n        }\n      }"}, {"type": "query", "name": "GetAvailableCountries", "content": "{\n  posts(\n    order_by: {last_update: {last_update: desc}}\n    limit: $limit\n    where: {type: {id: {_eq: 1}}}\n  ) {\n    ...postFields\n  }\n}\n    ${PostFieldsFragmentDoc}"}, {"type": "mutation", "name": "registerMultiPaymentForVirtualReceipt ($data: RegisterMultiPaymentForVirtualReceiptInput!)", "content": "{\n  saveStripeConfiguration(configurationInput:$configurationInput){\n    _id\n    publishableKey\n    secretKey\n  }\n}"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n    config\n  }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n    marketplace {\n      totalEvents\n      events(offset: $offset, limit: $limit) {\n        id\n        event\n        blockNumber\n        block {\n          id\n          timestamp\n        }\n        returnValues {\n          ipfsHash\n          party\n          offerID\n          listingID\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetEnvironment($environmentUri: String)", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "query", "name": "cosmosAccountInformation($address: String!)", "content": "{\n      deleteWorksheet(worksheetUri: $worksheetUri)\n    }"}, {"type": "mutation", "name": "updateContactPhoneNumber($contactId: ID!, $input: PhoneNumberUpdateInput!)", "content": "{\n    delete_Follow(\n      where: {\n        follower_id: { _eq: $userId }\n        following_id: { _eq: $followingId }\n      }\n    ) {\n      affected_rows\n    }\n  }"}, {"type": "query", "name": "totalUsers", "content": "{\n    deployIdentityProxy(from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "GetAvailableCountries", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "deleteApplicationLabel($id: ID!)", "content": "{\n    config\n  }"}, {"type": "query", "name": "($slug: String!)", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n                      userByMinecraftId(minecraftId: $minecraftId) {\n                        id\n                        minecraftId\n                        role\n                        customTagText\n                        customTagColor\n                        reportsSummary\n                      }\n                      suspicious(minecraftId: $minecraftId)\n                    }"}, {"type": "query", "name": "", "content": "{\n    executeRuling(\n      offerID: $offerID\n      amount: $amount\n      ruling: $ruling\n      commission: $commission\n      message: $message\n      refund: $refund\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "($id: Int!, $record: InputRecord!)", "content": "{\n    importWallet(role: $role, name: $name, privateKey: $privateKey) {\n      id\n      role\n      name\n    }\n  }"}, {"type": "query", "name": "system", "content": "{\n    ordersByRestId(restaurant:$restaurant,page:$page,rows:$rows,search:$search){\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      deliveryCharges\n      tipping\n      taxationAmount\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n  }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n    signMessage(address: $address, message: $message)\n  }"}, {"type": "mutation", "name": "unify($criteria: [String], $exclude: Boolean)", "content": "{\n    user: currentUser {\n      id\n      ...userEverythingConnection\n    }\n  }\n  ${userEverythingConnectionFragment}"}, {"type": "query", "name": "GetPersonalAccessTokens", "content": "{\n      getDataPipelineFileContent(input: $input)\n    }"}, {"type": "query", "name": "GetDataPipelineDag($DataPipelineUri: String!)", "content": "{\n    replyComment(thread: $thread, id: $id, body: $body) {\n      id\n      body\n    }\n  }"}, {"type": "query", "name": "($limit: Int, $offset: Int, $order: String, $username: String, $userId: String)", "content": "{\n  organization_Update(input: $input) {\n    id\n    name\n  }\n}"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n    community(slug: $slug) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "organization($id: ID!)", "content": "{\nupdateRiderLocation(latitude:$latitude,longitude:$longitude){\n  _id\n}\n}"}, {"type": "query", "name": "account", "content": "{\n      createTask(input: $input) {\n        id\n        description\n        name\n      }\n    }"}, {"type": "query", "name": "Balance($id: ID!, $token: String!)", "content": "{\n    webRTCMessage(yourUser: $id) {\n      callID\n      type\n      message\n      fromUser\n      chat {\n        _id\n        users {\n          _id\n          name\n          email\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "VerifyEmailCode(\n    $identity: String!\n    $email: String!\n    $code: String!\n  )", "content": "{\n        createNote3(input: $input) {\n            noteId\n            noteType\n            group\n        }\n      }"}, {"type": "mutation", "name": "LOGIN($password: String!, $username: String!)", "content": "{\n    entities: applications {\n      data {\n        name\n        id\n        labels\n      }\n    }\n  }"}, {"type": "query", "name": "getSessionById($sessionId: ID!)", "content": "{\n      removeConsumptionRoleFromEnvironment(\n        environmentUri: $environmentUri\n        consumptionRoleUri: $consumptionRoleUri\n      )\n    }"}, {"type": "query", "name": "getDevices", "content": "{\n    deployMarketplace(\n      from: $from\n      token: $token\n      version: $version\n      autoWhitelist: $autoWhitelist\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "CREATE_GRAPH(\n    $name: String!\n    $traceFilters: [TraceFilter]\n    $to: DateTime\n    $from: DateTime\n  )", "content": "{\n  orders(offset:$offset){\n    _id\n    delivery_address{\n      latitude\n      longitude\n      delivery_address\n      details\n      label\n    }\n    delivery_charges\n    order_id\n    user{\n      _id\n      phone\n    }\n    \n    items{\n      _id\n      food{\n        _id\n        title\n        category{\n          _id\n        }\n        description\n        img_url\n      }\n      variation{\n        _id\n        title\n        price\n      }\n      addons{\n        _id\n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options{\n          _id\n          title\n          description\n          price\n        }\n      }\n      quantity\n    }\n    payment_status\n    payment_method\n    order_amount\n    paid_amount\n    order_status\n    status_queue{\n      pending\n      preparing\n      picked\n      delivered\n      cancelled\n    }\n    createdAt\n    review{\n      _id\n      rating\n      description\n    }\n    rider{\n      _id\n    }\n  }\n}"}, {"type": "mutation", "name": "changePassword($oldPassword: String!, $newPassword: String!)", "content": "{\n    assignedOrders(id:$id){\n      _id\n      rider{\n        _id\n      }\n      order_id\n      delivery_address{\n        latitude\n        longitude\n        delivery_address\n        details\n        label\n      }\n      delivery_charges\n      payment_method\n      order_amount\n      paid_amount\n      order_status\n      payment_status\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      items{\n        _id\n        food{\n          _id\n          title\n        }\n        quantity\n        variation{\n          _id\n          title\n          price\n        }\n        addons{\n          title\n          options{\n            title\n            price\n          }\n        }\n      }\n      createdAt\n    }\n  }"}, {"type": "query", "name": "ListRedshiftClusterDatasets(\n      $clusterUri: String!\n      $filter: RedshiftClusterDatasetFilter\n    )", "content": "{\n  phoneNumberRemoveFromOrganizationById(organizationId: $organizationId, id: $id) {\n    result\n  }\n}"}, {"type": "query", "name": "getPaginatedMemes($limit: Int, $offset: Int)", "content": "{\n        onCreatePost(postOwner: \"${USERNAME2}\") {\n          id\n          title\n          postOwner\n        }\n      }"}, {"type": "query", "name": "UserTransactions($id: ID!, $first: Int, $after: String)", "content": "{\n        deleteCategory(id:$id){\n          _id\n        }\n      }"}, {"type": "mutation", "name": "_internalSyncContactsWithResidentsForOrganization ($data: _internalSyncContactsWithResidentsForOrganizationInput!)", "content": "{\n  updateRiderLocation(latitude:$latitude,longitude:$longitude){\n    _id\n  }\n}"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n        deleteCoupon(id:$id)\n      }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n    notices {\n      ...NOTICE_ATTRIBUTES\n    }\n  }\n  ${NOTICE_ATTRIBUTES}"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n  editOption(optionInput:$optionInput){\n          _id\n          title\n          description\n          price\n        }\n      }"}, {"type": "mutation", "name": "setApplicationLabel($id: ID!, $scenarios: Any!)", "content": "{\n  fiatPriceData(currency: $currency, fiat: $fiat) {\n    price\n    lastDayChange\n  }\n}"}, {"type": "mutation", "name": "deleteOrganization($id: ID!)", "content": "{\n          feed {\n            ...Item\n          }\n          allFeeds: feed {\n            ...Item\n          }\n        }"}, {"type": "query", "name": "Restaurants($latitude:Float,$longitude:Float)", "content": "{\n    directMessageThread(id: $id) {\n      ...directMessageThreadInfo\n    }\n  }\n  ${directMessageThreadInfoFragment}"}, {"type": "mutation", "name": "inviteGroupOnEnvironment($input: InviteGroupOnEnvironmentInput!)", "content": "{\n    secret(namespace: $namespace, name: $name) {\n      name\n      namespace\n      data\n      labels\n      annotations\n      json\n    }\n  }"}, {"type": "mutation", "name": "AddressSignupStart($address: String!)", "content": "{\n    verifyWebsite(identity: $identity, website: $website) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n          onUpdateMember {\n            id\n            name\n            createdAt\n            updatedAt\n          }\n        }"}, {"type": "query", "name": "GetMessages($tab: String!)", "content": "{\n      createUser(userInput:{\n          phone:$phone,\n          email:$email,\n          password:$password,\n          name:$name,\n          notificationToken:$notificationToken,\n          appleId:$appleId\n      }){\n          userId\n          token\n          tokenExpiration\n          name\n          email\n          phone\n      }\n    }"}, {"type": "mutation", "name": "recommendMatches(\n    $criteria: [String]\n    $exclude: Boolean\n    $sourceUuids: [String]\n  )", "content": "{\n      removeUserFromEnvironment(\n        environmentUri: $environmentUri\n        userName: $userName\n      )\n    }"}, {"type": "mutation", "name": "VerifyWebsite($identity: String!, $website: String!)", "content": "{\n    organizations(page: $page, pageSize: $pageSize, filters: $filters) {\n      entities {\n        id\n        name\n        enrollments {\n          id\n          individual {\n            mk\n          }\n        }\n        domains {\n          domain\n          isTopDomain\n        }\n      }\n      pageInfo {\n        page\n        pageSize\n        numPages\n        totalResults\n      }\n    }\n  }"}, {"type": "mutation", "name": "editCoupon($couponInput:CouponInput!)", "content": "{\n    removeOneUnsavedSquareCardIDs(\n      unsavedSquareCardID: $unsavedSquareCardID\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n    ) {\n      squareCustomerId\n      unsavedSquareCardIDs\n      firstName\n      lastName\n      email\n    }\n  }"}, {"type": "query", "name": "WalletStatus", "content": "{\n  cosmosSlashingParameters(network: $network) {\n    max_evidence_age\n    signed_blocks_window\n    min_signed_per_window\n    double_sign_unbond_duration\n    downtime_unbond_duration\n    slash_fraction_double_sign\n    slash_fraction_downtime\n  }\n}"}, {"type": "mutation", "name": "($configuration: InputConfiguration!)", "content": "{\n  insertSecret(appID: $appId, secret: $secret) {\n    name\n  }\n}"}, {"type": "query", "name": "getAppointmentQuery(\n    $date: String\n    $startTime: String\n    $morningOrEvening: String\n    $endTime: String\n    $duration: Int\n    $price: Int\n    $firstName: String\n    $lastName: String\n    $email: String\n    $phoneNumber: String\n    $bookedWithCardSquareID: String\n  )", "content": "{\n      updateDatasetContributor(\n        datasetUri: $datasetUri\n        userName: $userName\n        role: $role\n      ) {\n        datasetUri\n        label\n        userRoleForDataset\n      }\n    }"}, {"type": "mutation", "name": "($title: String!, $desc: String!, $logo: String!, $raw: String!)", "content": "{\n    commissions {\n      id\n      name\n      openSeats\n      homepageUrl\n    }\n  }"}, {"type": "query", "name": "eventTriggers($namespace: String!, $serviceName: String!)", "content": "{\n  deleteTask(id: $id, queue: $queue) {\n    id\n  }\n}"}, {"type": "subscription", "name": "onTransactionUpdated", "content": "{\n    clearNotification @client\n  }"}, {"type": "subscription", "name": "OnUpdateTaskGroup(\n            $filter: ModelSubscriptionTaskGroupFilterInput\n          )", "content": "{\n  interactionEvent_Create(\n    event: {channel: \"VOICE\", sentTo: [{contactID: $contactId}], sentBy: [{email: $sentBy}], appSource: \"Openline\", content: $content, contentType: $contentType}\n  ) {\n    ...InteractionEventFragment\n  }\n}\n    ${InteractionEventFragmentFragmentDoc}"}, {"type": "subscription", "name": "treasurySpendProposalSubscription($startBlock: Int!)", "content": "{\n        posts(where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_referendum_id: {\n                    _in: $onchainReferendumIds\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_referendum_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_referendum_id\n                onchain_referendum(where: {}) {\n                    id\n                    end\n                    referendumStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "mutation", "name": "ShareWorksheet(\n      $worksheetUri: String!\n      $input: WorksheetShareInput!\n    )", "content": "{\n  updateCommission(id:$id,commissionRate:$commissionRate){\n    _id\n    commissionRate\n  }\n}"}, {"type": "mutation", "name": "SyncTables($datasetUri: String!)", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            topic: {\n                id: {\n                    _eq: $postTopic\n                }\n            },\n            onchain_link: {\n                onchain_proposal_id: {\n                    _is_null: false\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_proposal_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_proposal_id\n                onchain_proposal(where: {}) {\n                    id\n                    proposalStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n      updateDatasetQualityRule(ruleUri: $ruleUri, input: $input) {\n        ruleUri\n        name\n        label\n        description\n        created\n        query\n      }\n    }"}, {"type": "query", "name": "LatestDemocracyProposalPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5 )", "content": "{\n  rider(id:$id){\n    _id\n    location {coordinates}\n  }\n}"}, {"type": "mutation", "name": "create$", "content": "{\n  config(appID: $appId, resolve: true) {\n    ...ServiceResources\n  }\n}\n    ${ServiceResourcesFragmentDoc}"}, {"type": "mutation", "name": "updateSubscription(\n    $namespace: String!\n    $name: String!\n    $params: EventSubscriptionSpecInput!\n  )", "content": "{\n    vendorResetPassword(oldPassword: $oldPassword, newPassword: $newPassword)\n}"}, {"type": "mutation", "name": "ChangePassword($oldPassword:String!,$newPassword:String!)", "content": "{\n  addons{\n  _id\n  title\n  description\n  options{\n    _id\n    title\n    description\n    price\n  }\n  quantity_minimum\n  quantity_maximum\n}}"}, {"type": "mutation", "name": "CreateTodo($input: CreateTodoInput!)", "content": "{\n  editCoupon(couponInput:$couponInput){\n        _id\n        title\n        discount\n        enabled\n        }\n      }"}, {"type": "mutation", "name": "CreateApiKey", "content": "{\n    finalizeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "($commentId: ID!)", "content": "{\n        getPostPrivate(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "createBackupSite($siteName: String!, $siteUrl: String!)", "content": "{\n    createLimitRange(\n      namespace: $namespace\n      name: $name\n      limitRange: $limitRange\n    ) {\n      name\n    }\n  }"}, {"type": "subscription", "name": "OnCreateStudent", "content": "{\n    tags(filter: $filter) {\n      totalCount\n    }\n  }"}, {"type": "query", "name": "GRAPH_LIST(\n    $traceFilters: [TraceFilter]\n    $to: DateTime\n    $from: DateTime\n  )", "content": "{\n  counters {\n    users {\n     count(username: $username, userId: $userId)\n    }\n  }\n  users(limit: $limit, offset: $offset, order: $order, username: $username, userId: $userId) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email,\n    chatIds {\n      id,\n      transport,\n      chatId\n    }\n  }\n}"}, {"type": "query", "name": "cosmosTransaction($hash: String!, $network: String!)", "content": "{\n      importRedshiftCluster(\n        environmentUri: $environmentUri\n        clusterInput: $clusterInput\n      ) {\n        clusterUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "query", "name": "Servers($page: Int!, $first: Int!)", "content": "{\n        objs: allOrganizationEmployees(\n            where: {\n                id: $id\n            }\n            first: 1\n        ) {\n            id\n            inviteCode\n        }\n    }"}, {"type": "query", "name": "getAll$", "content": "{\n    updateClientProfilePicture(id: $id, profilePicture: $profilePicture) {\n      _id\n      firstName\n      lastName\n      email\n      phoneNumber\n      profilePicture\n    }\n  }"}, {"type": "mutation", "name": "( $UserId: String! , $FileCategory: String!)", "content": "{\n  option_poll(where: {post_id: {_eq: $postId}}) {\n    ...optionPollFields\n  }\n}\n    ${OptionPollFieldsFragmentDoc}"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n    company(id: $id) {\n      id\n      name\n      logoUrl\n      parents {\n        id\n        name\n        logoUrl\n      }\n      brokers {\n        id\n        name\n        logoUrl\n      }\n      totalUsers\n      totalStorage\n      subscription {\n        id\n        maxUsers\n        maxStorage\n      }\n      autoPdf\n      autoWatermark\n      previewOnly\n    }\n  }"}, {"type": "query", "name": "getOrganizationEmployeeByIdWithInviteCode (\n        $id: ID!\n    )", "content": "{\n      restaurant(id:$id){\n      _id\n      orderId\n      orderPrefix\n      slug\n      name\n      image\n      address\n      location{coordinates}\n      deliveryTime\n      minimumOrder\n      tax\n      categories{\n        _id\n        title\n        foods{\n          _id\n          title\n          description\n          variations{\n            _id\n            title\n            price\n            discounted\n            addons\n          }\n          image\n          isActive\n        }\n      }\n      options{\n        _id\n        title\n        description\n        price\n      }\n      addons{\n        _id\n        options\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n      \n    }\n}"}, {"type": "mutation", "name": "deleteNamespace($name: String!)", "content": "{\n    marketplaces {\n      address\n      totalListings\n      version\n      token {\n        id\n      }\n      owner {\n        id\n      }\n    }\n    tokens {\n      id\n      code\n      address\n      name\n      decimals\n      totalSupply\n    }\n    identityEvents {\n      id\n    }\n  }"}, {"type": "query", "name": "LatestTipPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5 )", "content": "{\n    executeRuling(\n      offerID: $offerID\n      amount: $amount\n      ruling: $ruling\n      commission: $commission\n      message: $message\n      refund: $refund\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n          feed {\n            ...FeedWithRepository\n          }\n        }\n\n        ${feedWithRepository}"}, {"type": "subscription", "name": "secretEvent($namespace: String!)", "content": "{\n  note_CreateForContact(contactId: $contactId, input: $input) {\n    ...NoteContent\n  }\n}\n    ${NoteContentFragmentDoc}"}, {"type": "mutation", "name": "createPost($userId: Int!, $content: String!, $topicId: Int!, $title: String!)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "query", "name": "getThreadById($id: ID!)", "content": "{\n    deleteLabelDefinition(key: $key) {\n      key\n      schema\n    }\n  }"}, {"type": "mutation", "name": "SavePaypalConfiguration($configurationInput:PaypalConfigurationInput!)", "content": "{\n    submitComment(repoFullName: $repoFullName, commentContent: $commentContent) {\n      ...CommentsPageComment\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "query", "name": "TreasuryProposalPostAndComments ($id:Int!)", "content": "{\n        createPost(input: { id: \"P5\", type: \"Post\", category: \"T1\", content: \"Content #5\", slug: \"content-5\", rating: 4 }) {\n          id\n        }\n      }"}, {"type": "mutation", "name": "changeUsername($username: String!, $password: String!)", "content": "{\n      restaurant(id:$id){\n      _id\n      orderId\n      orderPrefix\n      slug\n      name\n      image\n      address\n      location{coordinates}\n      deliveryTime\n      minimumOrder\n      tax\n      categories{\n        _id\n        title\n        foods{\n          _id\n          title\n          description\n          variations{\n            _id\n            title\n            price\n            discounted\n            addons\n          }\n          image\n          isActive\n        }\n      }\n      options{\n        _id\n        title\n        description\n        price\n      }\n      addons{\n        _id\n        options\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n      \n    }\n}"}, {"type": "query", "name": "CallScreenQuery", "content": "{\n  deployments(\n    where: {deploymentStatus: {_in: [\"SCHEDULED\"]}, appId: {_eq: $appId}}\n  ) {\n    ...DeploymentRow\n  }\n}\n    ${DeploymentRowFragmentDoc}"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n                blogById(blogId: \"${this.blogId}\") {\n                  title\n                  content\n                }\n              }"}, {"type": "mutation", "name": "", "content": "{\n        reportContent(network: $network, type: $type, content_id: $content_id, reason: $reason, comments: $comments) {\n            message\n        }\n    }"}, {"type": "query", "name": "Restaurant($id:String)", "content": "{\n      shareDashboard(dashboardUri: $dashboardUri, principalId: $principalId) {\n        shareUri\n        status\n      }\n    }"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n  configuration{\n    _id\n    currency\n    currencySymbol\n    deliveryRate\n  }\n}"}, {"type": "mutation", "name": "ForgotPassword($email:String!, $otp:String!)", "content": "{\n      updatePipelineStack(DataPipelineUri: $DataPipelineUri)\n    }"}, {"type": "mutation", "name": "addPhoneToOrganization($organizationId: ID!, $input: PhoneNumberInput!)", "content": "{\n        result: exportPropertyScopesToExcel(data: $data) { status, linkToFile }\n    }"}, {"type": "mutation", "name": "updateSecret($namespace: String!, $name: String!, $secret: JSON!)", "content": "{\n  categories(offset: $offset, limit: $limit, order: $order, namespace: $namespace) {\n    id,\n    name,\n    createdAt\n  }\n}"}, {"type": "query", "name": "CommitToPR($query: String!)", "content": "{\n    resyncAddonsConfiguration(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    configuration{\n      _id\n      currency\n      currencySymbol\n    }\n  }"}, {"type": "mutation", "name": "AddAffiliate($affiliate: String, $from: String)", "content": "{\n    deleteAPIRule(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "query", "name": "($chatbotId: String!)", "content": "{\n    disputeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "AllTechCommitteeProposalPosts($postType: Int!, $limit: Int! = 5 )", "content": "{\n      enableRedshiftClusterDatasetCopy(\n        clusterUri: $clusterUri\n        datasetUri: $datasetUri\n      )\n    }"}, {"type": "mutation", "name": "", "content": "{\n      createSavedQuery(scheduledQueryUri: $scheduledQueryUri, input: $input) {\n        savedQueryUri\n        name\n        label\n        created\n        description\n        tags\n      }\n    }"}, {"type": "subscription", "name": "OnCreateTaskGroup(\n            $filter: ModelSubscriptionTaskGroupFilterInput\n          )", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n        result: createBankAccountRequest(data: $data) { status id }\n    }"}, {"type": "mutation", "name": "($title: String!, $desc: String!, $logo: String!, $raw: String!)", "content": "{\n          onUpdateMember {\n            id\n            name\n            createdAt\n            updatedAt\n          }\n        }"}, {"type": "query", "name": "GetNotification", "content": "{\n  chat(order: $order) {\n    id\n    message\n    user {\n      id\n      name\n    }\n    createdAt\n  }\n}"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n    addData(offerID: $offerID, from: $from, data: $data) {\n      id\n    }\n  }"}, {"type": "subscription", "name": "SubscriptionAssignRider($riderId:String!)", "content": "{\n    own_past_appointments(_id: $_id, email: $email) {\n      id\n      date\n      startTime\n      morningOrEvening\n      endTime\n      duration\n      price\n      treatments {\n        name\n        duration\n        price\n      }\n      addOns {\n        name\n        duration\n        price\n      }\n      client {\n        _id\n        squareCustomerId\n        unsavedSquareCardIDs\n        firstName\n        lastName\n        email\n        phoneNumber\n      }\n      bookedWithCardSquareID\n      notes\n      confirmed\n    }\n  }"}, {"type": "query", "name": "Balance($id: ID!)", "content": "{\n      getOrganization(organizationUri: $organizationUri) {\n        environments(filter: $filter) {\n          count\n          page\n          pageSize\n          hasNext\n          pages\n          hasPrevious\n          nodes {\n            environmentUri\n            label\n            name\n            description\n            owner\n            region\n            EnvironmentDefaultIAMRoleArn\n            EnvironmentDefaultIAMRoleName\n            SamlGroupName\n            created\n            deleted\n            validated\n            roleCreated\n            tags\n            environmentType\n            AwsAccountId\n            dashboardsEnabled\n            notebooksEnabled\n            mlStudiosEnabled\n            pipelinesEnabled\n            warehousesEnabled\n            userRoleInEnvironment\n            stack {\n              stack\n              status\n              stackUri\n              targetUri\n              accountid\n              region\n              stackid\n              link\n              outputs\n              resources\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "updateContactPhoneNumber($contactId: ID!, $input: PhoneNumberUpdateInput!)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "mutation", "name": "UpdateMember($input: UpdateMemberInput!)", "content": "{\n    updateListing(\n      listingID: $listingID\n      additionalDeposit: $additionalDeposit\n      from: $from\n      data: $data\n      autoApprove: $autoApprove\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "requestResetPassword($email: String!)", "content": "{\n        result: startPasswordRecovery(data: $data) { status }\n    }"}, {"type": "query", "name": "Feed", "content": "{\n        createPostPrivate(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "function($name: String!, $namespace: String!)", "content": "{\n    newProposal {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "query", "name": "Users($page:Int)", "content": "{\n        onDeleteMember {\n          id\n          name\n          createdAt\n          updatedAt\n        }\n      }"}, {"type": "query", "name": "service($name: String!, $namespace: String!)", "content": "{\n      getPostSecretFieldIAM(id: $id) {\n        id\n        title\n        secret\n      }\n    }"}, {"type": "query", "name": "getDiscussionTreasurySpendProposalById($onchainTreasuryProposalId: Int!)", "content": "{\n  orderCount\n}"}, {"type": "query", "name": "GetPlans($where: plans_bool_exp)", "content": "{\n      createDataPipeline(input: $input) {\n        DataPipelineUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "AddressLoginStart($address: String!)", "content": "{\n    subscribeOrderStatus(_id:$_id){\n        _id\n        orderId\n        orderStatus\n        rider{\n            name\n        }\n    }\n}"}, {"type": "query", "name": "", "content": "{\n        updatePost(\n          input: { id: \"P1\", type: \"Post\", content: \"Content #1 - Update\", expectedVersion: 1 }\n          condition: { rating: { eq: 5 } }\n        ) {\n          id\n        }\n      }"}, {"type": "mutation", "name": "AddPostComment($authorId: Int!, $content: String!, $postId: Int!)", "content": "{\n        createPostPublicIAM(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "secret($namespace: String!, $name: String!)", "content": "{\n\tcontents(\n    title: $title,\n    id: $id,\n    slug: $slug,\n    namespace: $namespace,\n    search: $search,\n    chatbotId: $chatbotId\n  ) {\n    id,\n    title,\n    language,\n    slug\n  }\n}"}, {"type": "query", "name": "getBackupSite ($repoID: String)", "content": "{\n  insertFeedbackOne(object: $feedback) {\n    id\n  }\n}"}, {"type": "query", "name": "getPaymentMethods($workspaceId: uuid!)", "content": "{\n      deleteTerm(nodeUri: $nodeUri)\n    }"}, {"type": "query", "name": "TrackerReferendaPosts($postType: Int!, $onchainReferendumIds: [Int!]!)", "content": "{\n                post (slug: $slug) {\n                  id\n                  slug\n                  numberOfComments\n                }\n              }"}, {"type": "query", "name": "exportTicketAnalyticsToExcel ($data: ExportTicketAnalyticsToExcelInput!)", "content": "{\n        obj: authenticateUserWithPhoneAndPassword(data: { phone: $phone, password: $password }) {\n            item {\n                id\n            }\n        }\n    }"}, {"type": "mutation", "name": "updateDatasetStack($datasetUri: String!)", "content": "{\n  getActiveOrders(restaurantId:$restaurantId){\n    _id\n    zone{\n      _id\n    }\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      address\n      location{coordinates}\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n      details\n      label\n    }\n    items{\n      _id\n      title\n      description\n      image\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        description\n        title\n        quantityMinimum\n        quantityMaximum\n      }\n      specialInstructions\n      isActive\n      createdAt\n      updatedAt\n    }\n    user{\n      _id\n      name\n      phone\n      email\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    isPickedUp\n    status\n    paymentStatus\n    reason\n    isActive\n    createdAt\n    deliveryCharges\n    rider{\n      _id\n      name\n      username\n      available\n    }\n  }\n}"}, {"type": "mutation", "name": "", "content": "{\n    enroll(\n      uuid: $uuid\n      group: $group\n      fromDate: $fromDate\n      toDate: $toDate\n      parentOrg: $parentOrg\n    ) {\n      uuid\n      individual {\n        ...individual\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "query", "name": "securityKeys($userId: uuid!)", "content": "{\n        result: sendMessageToSupport(data: $data) { id, status }\n    }"}, {"type": "query", "name": "TrackerTipPosts($postType: Int!, $onchainTipIds: [String!]!)", "content": "{\n    submitComment(repoFullName: $repoFullName, commentContent: $commentContent) {\n      ...CommentsPageComment\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "mutation", "name": "Login($email:String,$password:String,$type:String!,$appleId:String,$name:String,$notificationToken:String)", "content": "{\n    sessions {\n      session(id: $sessionId) {\n        update {\n          update(session: $session) {\n            id\n            title\n            status\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n    createClusterAddonsConfiguration(\n      name: $name\n      urls: $urls\n      labels: $labels\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "($chatbotId: String)", "content": "{\n        __typename\n        insert_option_poll_votes_one(object: {option_poll_id: $optionPollId, user_id: $userId, option: $option}) {\n            id\n        }\n    }"}, {"type": "mutation", "name": "CreateReviewForEpisode($episode: Episode!, $review: ReviewInput!)", "content": "{\n    addAppointment(\n      date: $date\n      startTime: $startTime\n      morningOrEvening: $morningOrEvening\n      endTime: $endTime\n      duration: $duration\n      price: $price\n      esthetician: $esthetician\n      client: {\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        phoneNumber: $phoneNumber\n        squareCustomerId: $squareCustomerId\n        unsavedSquareCardIDs: $unsavedSquareCardIDs\n      }\n      treatments: $treatments\n      addOns: $addOns\n      bookedWithCardSquareID: $bookedWithCardSquareID\n      notes: $notes\n    ) {\n      date\n      startTime\n      morningOrEvening\n      endTime\n      duration\n      price\n      createdAt\n      esthetician\n      client {\n        firstName\n        lastName\n        email\n        phoneNumber\n        squareCustomerId\n        unsavedSquareCardIDs\n      }\n      treatments {\n        name\n        price\n        duration\n      }\n      addOns {\n        name\n        price\n        duration\n      }\n      bookedWithCardSquareID\n      notes\n      confirmed\n    }\n  }"}, {"type": "query", "name": "TrackerDemocracyTreasuryProposalPosts($postType: Int!, $onchainTreasuryProposalIds: [Int!]! )", "content": "{\n    directMessageThread(id: $id) {\n      ...directMessageThreadInfo\n      ...directMessageThreadMessageConnection\n    }\n  }\n  ${directMessageThreadInfoFragment}\n  ${directMessageThreadMessageConnectionFragment}"}, {"type": "subscription", "name": "OnCreateStudent", "content": "{\n    markConversationRead(id: $id) {\n      success\n      messagesRead\n    }\n  }"}, {"type": "mutation", "name": "PostUnsubscribe ($postId: Int!)", "content": "{\n      getShareRequestsToMe(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          owner\n          created\n          deleted\n          shareUri\n          status\n          userRoleForShareObject\n          principal {\n            principalId\n            principalType\n            principalName\n            principalIAMRoleName\n            SamlGroupName\n            environmentUri\n            environmentName\n            AwsAccountId\n            region\n            organizationUri\n            organizationName\n          }\n          statistics {\n            tables\n            locations\n            sharedItems\n            revokedItems\n            failedItems\n            pendingItems\n          }\n          dataset {\n            datasetUri\n            datasetName\n            SamlAdminGroupName\n            environmentName\n            exists\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "pagedPosts($filter: PagedFilter!)", "content": "{\n  rider(id:$id){\n    _id\n    location {coordinates}\n  }\n}"}, {"type": "mutation", "name": "DeleteTodo($input: DeleteTodoInput!)", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "mutation", "name": "ForgotPassword($email:String!, $otp:String!)", "content": "{\n    signup(email: $email, password: $password, name: $name) {\n      token\n      user {\n        id\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreateFood($foodInput:FoodInput!)", "content": "{\n      posts (filter: { pinnedUntil: { value: $now, comparator: GREATER_THAN } }) {\n        ...PostList\n      }\n    }\n    ${PostList.fragments.postList}"}, {"type": "query", "name": "MyFeed", "content": "{\n  createAddress(addressInput:$addressInput){\n    _id\n    addresses{\n      _id\n      label\n      deliveryAddress\n      details\n      location{coordinates}\n      selected\n    }\n  }\n}"}, {"type": "query", "name": "UserLists", "content": "{\n        __typename\n        insert_post_reactions(objects: {post_id: $postId, user_id: $userId, reaction: $reaction}) {\n            affected_rows\n        }\n    }"}, {"type": "query", "name": "SkinnyIdentity($id: ID!)", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        datasetUri\n        locations(filter: $filter) {\n          count\n          nodes {\n            locationUri\n            created\n            S3Prefix\n            name\n            description\n            created\n            userRoleForStorageLocation\n          }\n        }\n      }\n    }"}, {"type": "subscription", "name": "OnCreateTaskGroup(\n            $filter: ModelSubscriptionTaskGroupFilterInput\n          )", "content": "{\n      create${modelName} (input: { profileId: \"${v4()}\", firstName: \"Amplify\", lastName: \"CLI\", title: \"Test\" }) {\n        profileId\n        firstName\n        lastName\n      }\n    }"}, {"type": "mutation", "name": "($postId: ID!, $value: PostVoteValueEnum!)", "content": "{\n    uniswapCreateExchange(\n      from: $from\n      tokenAddress: $tokenAddress\n      factory: $factory\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $phoneNumber: String\n  )", "content": "{\n      getPostIAMWithKeysByDate(type: \"Post\") {\n        items {\n          id\n          title\n          type\n          date\n        }\n      }\n    }"}, {"type": "query", "name": "activeServiceClassFilters", "content": "{\n  pushToken(token:$token){\n    _id\n    notificationToken\n  }\n}"}, {"type": "mutation", "name": "resyncClusterAddonsConfiguration($name: String!)", "content": "{\n        all: _allTicketsMeta(where: $where) {\n            count\n        }\n        ${TicketStatusTypeType.NewOrReopened}: _allTicketsMeta(where: { AND: [$whereWithoutStatuses, { status: { type: ${TicketStatusTypeType.NewOrReopened} } }]}) {\n            count\n        }\n        ${TicketStatusTypeType.Processing}: _allTicketsMeta(where: { AND: [$whereWithoutStatuses, { status: { type: ${TicketStatusTypeType.Processing} } }]}) {\n            count\n        }\n        ${TicketStatusTypeType.Deferred}: _allTicketsMeta(where: { AND: [$whereWithoutStatuses, { status: { type: ${TicketStatusTypeType.Deferred} } }]}) {\n            count\n        }\n        ${TicketStatusTypeType.Canceled}: _allTicketsMeta(where: { AND: [$whereWithoutStatuses, { status: { type: ${TicketStatusTypeType.Canceled} } }]}) {\n            count\n        }\n        ${TicketStatusTypeType.Completed}: _allTicketsMeta(where: { AND: [$whereWithoutStatuses, { status: { type: ${TicketStatusTypeType.Completed} } }]}) {\n            count\n        }\n        ${TicketStatusTypeType.Closed}: _allTicketsMeta(where: { AND: [$whereWithoutStatuses, { status: { type: ${TicketStatusTypeType.Closed} } }]}) {\n            count\n        }\n    }"}, {"type": "query", "name": "countReadNotifications", "content": "{\n    notices {\n      ...NOTICE_ATTRIBUTES\n    }\n  }\n  ${NOTICE_ATTRIBUTES}"}, {"type": "query", "name": "BrowseDataPipelineRepository($input: DataPipelineBrowseInput!)", "content": "{\n  deleteAddress(id:$id){\n    _id\n    addresses{\n      _id\n      label\n      delivery_address\n      details\n      longitude\n      latitude\n      selected\n    }\n  }\n}"}, {"type": "query", "name": "GetSearchE($id: ID!, $rid: String!)", "content": "{\n    communitySubscribers(id: $id, filter: $filter) {\n      entries {\n        ${F.user}\n      }\n      ${F.pagedCounts}\n    }\n  }"}, {"type": "query", "name": "(\n  $offset: Int,\n  $limit: Int,\n  $order: String,\n  $categoryId: Int,\n  $slug: String,\n  $language: String,\n  $namespace: String,\n  $search: String,\n  $chatbotId: String\n)", "content": "{\n      createComment(input: $input) {\n        id\n        content\n        owner\n      }\n    }"}, {"type": "mutation", "name": "UpdateTask(\n    $id: ID!\n    $name: String\n    $description: String\n    $priority: String\n    $status: String\n    $dueDate: String\n  )", "content": "{\n    channel(id: $id) {\n      ...channelInfo\n    }\n  }\n  ${channelInfoFragment}"}, {"type": "query", "name": "AllTemplates", "content": "{\n    subscriptionSubscription(ownerName: $ownerName, namespace: $namespace) {\n      type\n      subscription {\n        name\n        namespace\n        spec {\n          filter {\n            filters {\n              eventType {\n                property\n                type\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "resetOrganization ($data: ResetOrganizationInput!)", "content": "{\n    getDashboardOrders(starting_date: $startingDate, ending_date: $endingDate,restaurant:$restaurant){\n      orders{\n        day\n        count\n      }\n    }\n  }"}, {"type": "mutation", "name": "updateService($name: String!, $namespace: String!, $service: JSON!)", "content": "{\n  orderStripe(id:$id){\n    _id\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n      details\n      label\n    }\n    deliveryCharges\n    orderId\n    user{\n      _id\n      phone\n      email\n      name\n    }\n    items{\n      _id\n      food\n      variation{\n        _id\n        title\n        price\n      }\n      addons{\n        _id\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n        options{\n          _id\n          title\n          description\n          price\n        }\n      }\n      quantity\n    }\n    taxationAmount\n    tipping\n    paymentStatus\n    paymentMethod\n    orderAmount\n    paidAmount\n    orderStatus\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    preparationTime\n  }\n}"}, {"type": "query", "name": "Users($page: Int!, $first: Int!)", "content": "{\n  organizations(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      id\n      name\n    }\n  }\n}"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n  updateUser(pk_columns: {id: $id}, _set: $user) {\n    id\n  }\n}"}, {"type": "mutation", "name": "registerMultiPayment ($data: RegisterMultiPaymentInput!)", "content": "{\n    deletePostVote (input: { id: $voteId }) {\n      result\n    }\n  }"}, {"type": "query", "name": "operationHeader(\n    $graphId: ID!\n    $operationId: ID!\n    $to: DateTime\n    $from: DateTime\n    $traceFilters: [TraceFilter]\n  )", "content": "{\n    tokenVerify(token: $token) {\n      id\n      email\n      createdAt\n    }\n  }"}, {"type": "query", "name": "cosmosDistributionCommunityPool($network: String!)", "content": "{\n    makeOffer(\n      listingID: $listingID\n      finalizes: $finalizes\n      affiliate: $affiliate\n      commission: $commission\n      value: $value\n      currency: $currency\n      arbitrator: $arbitrator\n      data: $data\n      from: $from\n      withdraw: $withdraw\n      quantity: $quantity\n      autoswap: $autoswap\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "cosmosStakingParameters($network: String!)", "content": "{\n          feed {\n            ...MyEntry\n          }\n        }\n\n        fragment MyEntry on Entry {\n          id\n          commentCount\n        }"}, {"type": "query", "name": "GetAvailableCountries", "content": "{\n  contact_AddNewLocation(contactId: $contactId) {\n    id\n  }\n}"}, {"type": "mutation", "name": "EditFood($foodInput:FoodInput!)", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "query", "name": "", "content": "{\n            result: signinAsUser(data: $data) { user { id } token }\n        }"}, {"type": "query", "name": "TrackerReferendaPosts($postType: Int!, $onchainReferendumIds: [Int!]!)", "content": "{\n      deleteTodo(input: $input) {\n        id\n        name\n        description\n        level\n        owner\n        sharedOwners\n        status\n      }\n    }"}, {"type": "mutation", "name": "deleteTeam($teamName: String!, $organization: String)", "content": "{\n    addOrganization(name: $name) {\n      organization {\n        name\n      }\n    }\n  }"}, {"type": "query", "name": "listAllEnvironmentConsumptionRoles(\n      $filter: ConsumptionRoleFilter\n      $environmentUri: String!\n    )", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "query", "name": "HeroAndFriendsNames($episode: Episode)", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "AddTablePermission(\n      $tableUri: String!\n      $userName: String!\n      $role: DatasetRole!\n    )", "content": "{\n    pagedCommunities(filter: $filter) {\n      entries {\n        id\n        title\n        raw\n        logo\n      }\n      pageNumber\n      pageSize\n      totalCount\n      totalPages\n    }\n  }"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n        objs: allOrganizationEmployees(\n            where: {\n                id: $id\n            }\n            first: 1\n        ) {\n            id\n            inviteCode\n        }\n    }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n      sendResetPasswordEmail(username: $username) {\n        result\n      }\n    }"}, {"type": "mutation", "name": "($voteId: ID!)", "content": "{\n    moloches(orderBy: summoningTime, first: 100, skip: $skip) {\n      id\n      apiData @client\n      version\n      title\n      totalShares\n      summoningTime\n      guildBankAddress\n      guildBankBalanceV1\n      members {\n        id\n        memberAddress\n        createdAt\n      }\n      proposals {\n        id\n        createdAt\n        votes {\n          id\n          createdAt\n        }\n      }\n      depositToken {\n        tokenAddress\n        symbol\n        decimals\n      }\n      tokenBalances {\n        id\n        tokenBalance\n        guildBank\n        token {\n          decimals\n          tokenAddress\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "addCommunity($input: CommunityInputType!)", "content": "{\n            fetchNotesFromBalance(\n                assetAddress: $assetAddress\n                equalTo: $equalTo\n                greaterThan: $greaterThan\n                lessThan: $lessThan\n                numberOfNotes: $numberOfNotes\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                notes {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "subscription", "name": "GetPartnerUpdate", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "mutation", "name": "deleteApi($id: ID!)", "content": "{\n    createAssociatedCompany(\n      companyId: $companyId\n      ownerEmail: $ownerEmail\n      newCompanyName: $newCompanyName\n      isParent: $isParent\n      isBroker: $isBroker\n    ) {\n      company {\n        id\n        name\n        logoUrl\n      }\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "mutation", "name": "($marketId: ID!, $title: String!, $body: String!, $smImageUrl: String, $lgImageUrl: String)", "content": "{\n        result: ticketReportWidgetData(data: $data) { data { statusName, currentValue, growth, statusType } }\n    }"}, {"type": "subscription", "name": "addonsConfigurationEvent($namespace: String!)", "content": "{\n    sendOtpToEmail(email: $email, otp: $otp) {\n      result\n    }\n  }"}, {"type": "query", "name": "SearchGlossary($filter: GlossaryNodeSearchFilter)", "content": "{\n    joinNetwork(agentId: $agentId)\n  }"}, {"type": "mutation", "name": "CreateNote($input: CreateNoteInput!)", "content": "{\n  resetPassword(password:$password,email:$email){\n    result\n  }\n}"}, {"type": "query", "name": "Conversations($id: String)", "content": "{\n\t\taddressLinkStart(network: $network, address: $address) {\n\t\t\tsign_message\n\t\t\tmessage\n\t\t\taddress_id\n\t\t}\n\t}"}, {"type": "query", "name": "UserFavourite ($latitude:Float,$longitude:Float)", "content": "{\n    riderLogin(username:$username,password:$password,notificationToken:$notificationToken){\n      userId\n      token\n    }\n  }"}, {"type": "mutation", "name": "($username: String!, $fullName: String!, $email: String!, $website: String!)", "content": "{\n    generateWebsiteCode(identity: $identity, website: $website) {\n      success\n      reason\n      code\n    }\n  }"}, {"type": "query", "name": "TrackerMotionPosts($postType: Int!, $onchainMotionIds: [Int!]!)", "content": "{\n      rejectShareObject(shareUri: $shareUri) {\n        shareUri\n        status\n      }\n    }"}, {"type": "query", "name": "Orders", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n    }\n    messaging(id: \"defaultAccount\") {\n      id\n      pubKey\n      pubSig\n      enabled\n      isKeysLoading\n      synced\n      syncProgress\n      totalUnread\n    }\n  }"}, {"type": "query", "name": "Vendors", "content": "{\n  editContent(id: $id, content: $content) {\n    id,\n    slug,\n    title,\n    body,\n    language,\n    payload,\n    fields {\n      id,\n      name,\n      value,\n      type\n    }\n  }\n}"}, {"type": "query", "name": "post($id: ID!)", "content": "{\n  posts(\n    limit: $limit\n    where: {type: {id: {_eq: $postType}}, topic: {id: {_eq: $postTopic}}, onchain_link: {onchain_treasury_proposal_id: {_is_null: false}, onchain_motion_id: {_is_null: true}}}\n    order_by: {onchain_link: {onchain_treasury_proposal_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_treasury_proposal_id\n      onchain_treasury_spend_proposal(where: {}) {\n        id\n        treasuryStatus(last: 1) {\n          id\n          status\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n    secret(namespace: $namespace, name: $name) {\n      name\n      namespace\n      data\n      labels\n      annotations\n      json\n    }\n  }"}, {"type": "query", "name": "selectTicketsCount ($where: TicketWhereInput, $whereWithoutStatuses: TicketWhereInput)", "content": "{\n    web3 {\n      networkId\n      networkName\n      metaMaskNetworkId\n      metaMaskNetworkName\n      metaMaskAccount {\n        id\n        balance {\n          eth\n        }\n      }\n      walletType\n      primaryAccount {\n        id\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreateTodo($input: CreateTodoInput!)", "content": "{\n  nodes(ids: $prIds) {\n    ...on PullRequest {\n      id\n      state\n    }\n  }\n}"}, {"type": "mutation", "name": "setApplicationLabel($id: ID!, $scenarios: Any!)", "content": "{\n    updateComment (input: { id: $commentId, body: $body }) {\n      comment {\n        ...CommentForm\n      }\n    }\n  }\n  ${CommentForm.fragments.comment}"}, {"type": "mutation", "name": "insertWorkspace($workspace: workspaces_insert_input!)", "content": "{\n    currencies {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        decimals\n      }\n    }\n  }"}, {"type": "mutation", "name": "createContact($input: ContactInput!)", "content": "{\n          feed @client {\n            id\n          }\n        }"}, {"type": "mutation", "name": "PostFeedMessage(\n      $targetUri: String!\n      $targetType: String!\n      $input: FeedMessageInput!\n    )", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "mutation", "name": "create$", "content": "{\n  location_Update(input: $input) {\n    locality\n    rawAddress\n    postalCode\n    street\n  }\n}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n    deleteApplicationLabel(applicationID: $id, key: \"scenarios\") {\n      key\n      value\n    }\n  }"}, {"type": "query", "name": "CompanyUsers($companyId: ID!, $teamId: ID, $limit: Int, $offset: Int)", "content": "{\n          feed {\n            ...Item\n          }\n          allFeeds: feed {\n            ...Item\n          }\n        }"}, {"type": "mutation", "name": "UpdateDice($diceId: ID!, $did: String!, $name: String!, $userId: String!, $actionIds: [String]!, $coverImg: String)", "content": "{\n    activeServiceClassFilters @client {\n      basic\n      provider\n      tag\n      connectedApplication\n    }\n  }"}, {"type": "mutation", "name": "createSession($eventId: ID!, $session: SessionCreateInput!)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "mutation", "name": "", "content": "{\n        getPostPublicIAM(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "cosmosSlashingParameters($network: String!)", "content": "{\n  content(id: $id) {\n    id,\n    slug,\n    title,\n    body,\n    categoryId,\n    language,\n    createdAt,\n    payload,\n    namespace,\n    category {\n      id,\n      name\n    }\n    fields {\n      id,\n      name,\n      value,\n      type\n    }\n  }\n}"}, {"type": "query", "name": "GetDashboardSales($startingDate: String, $endingDate: String,$restaurant:String!)", "content": "{\n    updateTokenAllowance(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n  meeting_UnlinkRecording(meetingId: $meetingId, attachmentId: $attachmentId) {\n    id\n    includes {\n      id\n    }\n  }\n}"}, {"type": "mutation", "name": "createContactNote($contactId: ID!, $input: NoteInput!)", "content": "{\n        resetPassword(newPassword: $newPassword, userId: $userId, token: $token){\n            message\n        }\n    }"}, {"type": "mutation", "name": "CreateUser($phone:String,$email:String,$password:String,$name:String,$notificationToken:String,$appleId:String)", "content": "{\n    cancelOrder(_id:$_id,reason:$reason){\n        _id\n      orderStatus\n    }\n}"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n  organization(id: $id) {\n    locations {\n      ...LocationBaseDetails\n      rawAddress\n    }\n  }\n}\n    ${LocationBaseDetailsFragmentDoc}"}, {"type": "query", "name": "DiscussionPostsIdDesc($limit: Int! = 20)", "content": "{\n  deleteZone(id:$id){\n    _id\n    title\n    description\n    location{coordinates}\n    isActive\n  }\n}"}, {"type": "query", "name": "($id: String!)", "content": "{\n  insertAuthUserRoles(objects: $roles) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "Orders", "content": "{\n    web3 {\n      account(id: $id) {\n        identity {\n          id\n          ipfsHash\n          owner {\n            id\n            proxy {\n              id\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "AllContracts", "content": "{\n      createMarketFollow (input: { market: $marketId }) {\n        marketFollow {\n          id\n          market {\n            symbol\n            price\n            priceClose\n            numberOfFollowers\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "removePhoneNumberFromContact($contactId: ID!, $id: ID!)", "content": "{\n        onCreateTodo {\n          id\n          description\n          name\n        }\n      }"}, {"type": "query", "name": "getCommunitySettingsById($id: ID)", "content": "{\n  organization(id: $id) {\n    ...OrganizationDetails\n    subsidiaryOf {\n      organization {\n        id\n        name\n      }\n    }\n  }\n}\n    ${OrganizationDetailsFragmentDoc}"}, {"type": "query", "name": "GetDashboardOrders($startingDate: String, $endingDate: String)", "content": "{\n    updateCommunity(\n      id: $id\n      title: $title\n      desc: $desc\n      logo: $logo\n      raw: $raw\n    ) {\n      id\n      title\n      desc\n    }\n  }"}, {"type": "mutation", "name": "DeleteTaskGroup($input: DeleteTaskGroupInput!)", "content": "{\n  organizations(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      id\n      name\n    }\n  }\n}"}, {"type": "query", "name": "Orders", "content": "{\n  deleteVendor(id:$id)\n}"}, {"type": "mutation", "name": "RemoveSharedItem($shareItemUri: String!)", "content": "{\n  deployments(\n    where: {deploymentStatus: {_eq: \"DEPLOYED\"}, appId: {_eq: $appId}}\n    order_by: {deploymentStartedAt: desc}\n    limit: 1\n    offset: 0\n  ) {\n    ...DeploymentRow\n  }\n}\n    ${DeploymentRowFragmentDoc}"}, {"type": "query", "name": "getDiscussionTreasurySpendProposalById($onchainTreasuryProposalId: Int!)", "content": "{\n            getCrawlerStatus(datasetUri:$datasetUri,name:$name){\n                Name\n                AwsAccountId\n                region\n                status\n            }\n        }"}, {"type": "subscription", "name": "OnUpdateTaskGroup(\n            $filter: ModelSubscriptionTaskGroupFilterInput\n          )", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "ImportWallet($role: String, $name: String, $privateKey: String!)", "content": "{\n    recommendMatches(\n      criteria: $criteria\n      exclude: $exclude\n      sourceUuids: $sourceUuids\n    ) {\n      jobId\n    }\n  }"}, {"type": "query", "name": "myPartners", "content": "{\n  getActiveOrders(restaurantId:$restaurantId){\n    _id\n    zone{\n      _id\n    }\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      address\n      location{coordinates}\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n      details\n      label\n    }\n    items{\n      _id\n      title\n      description\n      image\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        description\n        title\n        quantityMinimum\n        quantityMaximum\n      }\n      specialInstructions\n      isActive\n      createdAt\n      updatedAt\n    }\n    user{\n      _id\n      name\n      phone\n      email\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    isPickedUp\n    status\n    paymentStatus\n    reason\n    isActive\n    createdAt\n    deliveryCharges\n    rider{\n      _id\n      name\n      username\n      available\n    }\n  }\n}"}, {"type": "query", "name": "Addons", "content": "{\nupdateRiderLocation(latitude:$latitude,longitude:$longitude){\n  _id\n}\n}"}, {"type": "mutation", "name": "DeleteCoupon($id:String!)", "content": "{\n      previewTable(tableUri: $tableUri, queryExecutionId: $queryExecutionId) {\n        count\n        status\n        queryExecutionId\n        nodes {\n          data\n        }\n      }\n    }"}, {"type": "query", "name": "PostReactions ($postId: Int!)", "content": "{\n      updateWorksheetShare(\n        worksheetShareUri: $worksheetShareUri\n        canEdit: $canEdit\n      ) {\n        worksheetShareUri\n        canEdit\n      }\n    }"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n      getPostConnection(id: $postId) {\n        id\n        title\n      }\n    }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n    deathCertificates {\n      search(\n        query: $query\n        page: $page\n        startYear: $startYear\n        endYear: $endYear\n      ) {\n        page\n        pageSize\n        pageCount\n        resultCount\n        results {\n          id\n          firstName\n          lastName\n          deathYear\n          deathDate\n          pending\n          age\n          birthDate\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "ViewerLogin", "content": "{\n    createLimitRange(\n      namespace: $namespace\n      name: $name\n      limitRange: $limitRange\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "GetTeams($filters: TeamFilterType)", "content": "{\n    r2: hero {\n      name\n    }\n    luke: hero(episode: EMPIRE) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "AddFunds($offerID: String!, $amount: String!, $from: String)", "content": "{\n  setCredentialsConfirm(\n    address: $address\n    email: $email\n    signature: $signature\n    username: $username\n    password: $password\n  ) {\n    message\n    token\n  }\n}"}, {"type": "query", "name": "rfp($uuid: String!)", "content": "{\n  celoGovernanceTransactions(address: $address) {\n    blockNumber\n    timestamp\n    hash\n    from\n    to\n    details {\n      nonce\n      gasLimit\n      gasPrice\n      gasUsed\n      feeCurrency\n      gatewayFeeRecipient\n      gatewayFee\n      to\n      value\n    }\n    tags {\n      eventname\n      source\n      parameters\n    }\n  }\n}"}, {"type": "mutation", "name": "AssignRider($id:String!,$riderId:String!)", "content": "{\n  deleteRestaurant(id:$id){\n    _id\n    isActive\n  }\n}"}, {"type": "mutation", "name": "($revision: ID!)", "content": "{\n    channel(channelSlug: $channelSlug, communitySlug: $communitySlug) {\n      ...channelInfo\n    }\n  }\n  ${channelInfoFragment}"}, {"type": "mutation", "name": "($followingId: String!, $userId: String!)", "content": "{\n    communitySubscribers(id: $id, filter: $filter) {\n      entries {\n        ${F.user}\n      }\n      ${F.pagedCounts}\n    }\n  }"}, {"type": "mutation", "name": "JoinNetwork($agentId: ID!)", "content": "{\n      listDatasetsCreatedInEnvironment(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          datasetUri\n          label\n          AwsAccountId\n          region\n          GlueDatabaseName\n          SamlAdminGroupName\n          name\n          S3BucketName\n          created\n          owner\n          stack {\n            status\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "getWorkspaceMembers($workspaceId: uuid!)", "content": "{\n    user: currentUser {\n      ...userInfo\n      ...userDirectMessageThreadConnection\n    }\n  }\n  ${userInfoFragment}\n  ${userDirectMessageThreadsConnectionFragment}"}, {"type": "query", "name": "HeroAppearsIn", "content": "{\n  availableRiders{\n    _id\n    name\n    username\n    phone\n    available\n  }\n}"}, {"type": "query", "name": "listEnvironmentClusters(\n      $environmentUri: String!\n      $filter: RedshiftClusterFilter\n    )", "content": "{\n        objs: allMeterResources(\n            where: {\n                id: $id\n            }\n        ) {\n            id\n            number\n            unitName\n            organization {\n                id\n            }\n        }\n    }"}, {"type": "mutation", "name": "AddTodo($title:String!, $userId: ID!, $completed:Boolean!)", "content": "{\n    merge(fromUuids: $fromUuids, toUuid: $toUuid) {\n      uuid\n      individual {\n        ...individual\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "mutation", "name": "addAPIDefinition($apiPackageId: ID!, $in: APIDefinitionInput!)", "content": "{\n    createAddonsConfiguration(\n      name: $name\n      namespace: $namespace\n      urls: $urls\n      labels: $labels\n    ) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "UpdateEnvironment(\n      $environmentUri: String!\n      $input: ModifyEnvironmentInput\n    )", "content": "{\n  note_CreateForOrganization(organizationId: $organizationId, input: $input) {\n    ...NoteContent\n  }\n}\n    ${NoteContentFragmentDoc}"}, {"type": "query", "name": "getUserCommunityConnection($id: ID)", "content": "{\n        objs: allPropertyScopeProperties(where: $where, first: $first) {\n            id\n            propertyScope { id }\n            property { id }\n        }\n    }"}, {"type": "mutation", "name": "mergeContacts($primaryContactId: ID!, $mergedContactIds: [ID!]!)", "content": "{\n    gassiest: badges(first: 10, orderBy: totalGas, orderDirection: desc) {\n      memberAddress\n      totalGas\n    }\n  }"}, {"type": "mutation", "name": "UpdateNamespace($name: String!, $labels: Labels!)", "content": "{\n    foods(page:$page){\n      _id\n      title\n      description\n      stock\n      tag\n      img_url\n      variations{\n        _id\n        title\n        price\n        discounted\n        addons{\n          _id\n          title\n          description\n          quantity_minimum\n          quantity_maximum\n          options{\n            _id\n            title\n            price\n          }\n        }\n      }\n      category{\n          _id\n          title\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateDevice($deviceId: ID!, $mac: String!, $name: String!, $ownerId: String!, $followerIds: [String])", "content": "{\n    makeOffer(\n      listingID: $listingID\n      finalizes: $finalizes\n      affiliate: $affiliate\n      commission: $commission\n      value: $value\n      currency: $currency\n      arbitrator: $arbitrator\n      data: $data\n      from: $from\n      withdraw: $withdraw\n      quantity: $quantity\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "recommendedMergeNumber", "content": "{\n    withdrawOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "AllTechCommitteeProposalPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n        createPostPublic(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "createBankAccountRequest ($data: CreateBankAccountRequestInput!)", "content": "{\n  updateOrderStatus(id:$id,status:$status,reason:$reason){\n    _id\n    order_status\n    payment_status\n  }\n}"}, {"type": "mutation", "name": "AddFavourite($id:String!)", "content": "{\n  posts(\n    limit: $limit\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_motion_id: {_is_null: false}}}\n    order_by: {onchain_link: {onchain_motion_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_motion_id\n      onchain_motion(where: {}) {\n        id\n        motionStatus(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "AllRoles", "content": "{\n  oasisAccountHistory(address: $address, fiat: $fiat) {\n    date\n    height\n    address\n    rewards\n    balance\n    meta {\n      is_validator\n      is_delegator\n    }\n    delegations {\n      delegator\n      validator\n      amount\n    }\n    debonding_balance {\n      balance\n      shares\n    }\n    staked_balance {\n      balance\n      shares\n    }\n  }\n}"}, {"type": "query", "name": "GRAPH_LIST(\n    $traceFilters: [TraceFilter]\n    $to: DateTime\n    $from: DateTime\n  )", "content": "{\n  resetPassword(newPassword: $newPassword, userId: $userId, token: $token) {\n    message\n  }\n}"}, {"type": "subscription", "name": "OnDeleteTaskGroup(\n            $filter: ModelSubscriptionTaskGroupFilterInput\n          )", "content": "{\n      deleteDashboard(dashboardUri: $dashboardUri)\n    }"}, {"type": "mutation", "name": "createTopic(\n      $organizationUri: String\n      $input: OrganizationTopicInput\n    )", "content": "{\n        searchPosts {\n          items {\n            id\n            content\n            secret\n          }\n          nextToken\n        }\n      }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n    messagingStatusChange {\n      newStatus\n    }\n  }"}, {"type": "mutation", "name": "WithdrawOffer($offerID: String, $from: String)", "content": "{\n    createRider(\n        riderInput:$riderInput\n    ){\n    _id\n    name\n    username\n    password\n    phone\n    available\n      zone{\n        _id\n      }\n    }\n  }"}, {"type": "mutation", "name": "BookTrips($launchIds: [ID]!)", "content": "{\n        onDeleteTodo {\n          id\n          description\n          name\n        }\n      }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n\t\t\t\tbackupSites(uuid: $repoID) {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tuuid\n\t\t\t\t\tpassword\n\t\t\t\t}\n\t\t\t}"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n    createAPIRule(name: $name, namespace: $namespace, params: $params) {\n      name\n    }\n  }"}, {"type": "query", "name": "UserTasks(\n    $listIds: [ID!]!\n    $sectionIds: [ID!]!\n    $offset: Int\n    $limit: Int\n  )", "content": "{\n      archiveOrganization(organizationUri: $organizationUri)\n    }"}, {"type": "query", "name": "getPaymentMethods($workspaceId: uuid!)", "content": "{\n        getPostPrivateIAM(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "GetUserProfile($username: String)", "content": "{\n  meeting_UnlinkAttachment(meetingId: $meetingId, attachmentId: $attachmentId) {\n    id\n    includes {\n      id\n      name\n      mimeType\n    }\n  }\n}"}, {"type": "query", "name": "GetAllOffers($id: ID!)", "content": "{ getAllShorts{ archived, user{  name  },shortTag{ tag },userId,id, thumbnail}}"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n      createBlog(input: $input) {\n        id\n        title\n        ups\n        downs\n        percentageUp\n        isPublished\n        createdAt\n        updatedAt\n        owner\n        groupsField\n        secret\n      }\n    }"}, {"type": "mutation", "name": "CreateRider($riderInput:RiderInput!)", "content": "{\n    createSubscription(name: $name, namespace: $namespace, params: $params) {\n      name\n    }\n  }"}, {"type": "query", "name": "ListScheduledQueries($filter: ScheduledQueryFilter)", "content": "{\n      removeUserFromEnvironment(\n        environmentUri: $environmentUri\n        userName: $userName\n      )\n    }"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n    createLabelDefinition(in: $in) {\n      key\n      schema\n    }\n  }"}, {"type": "query", "name": "Restaurants($latitude:Float,$longitude:Float)", "content": "{\n    userLogout\n  }"}, {"type": "query", "name": "SkinnyIdentity($id: ID!)", "content": "{MODELS}($where: ${whereName}, $first: Int = ${DEFAULT_PAGE_SIZE}, $skip: Int, $sortBy: [${sortName}!]) {\n             objs: ${queryName}(where: $where, first: $first, skip: $skip, sortBy: $sortBy) ${fields}\n             meta: ${metaQueryName}(where: $where) { count }\n         }"}, {"type": "mutation", "name": "updateOrganizationName($input: OrganizationUpdateInput!)", "content": "{\n    user(id: \"1\") {\n      ...userFields\n    }\n\n    friend: user(id: \"2\") {\n      ...usernameFragment\n    }\n  }\n\n  ${userFields}\n  ${usernameFragment}"}, {"type": "query", "name": "SearchPosts($term: String!)", "content": "{\n        onCreateStudent {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n      rebootRedshiftCluster(clusterUri: $clusterUri)\n    }"}, {"type": "query", "name": "GetAuthenticationSettings($appId: uuid!)", "content": "{\n\t\t\t\tcreateBackupSite(name: $siteName, url: $siteUrl) {\n\t\t\t\t\tid\n\t\t\t\t\tuuid\n\t\t\t\t\tpassword\n\t\t\t  }\n\t\t\t}"}, {"type": "mutation", "name": "updateOrganizationEmail($organizationId: ID!, $input: EmailUpdateInput!)", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "query", "name": "Configuration", "content": "{\n    user: currentUser {\n      ...userInfo\n      communityConnection {\n        edges {\n          node {\n            id\n            name\n            slug\n            profilePhoto\n            communityPermissions {\n              isMember\n              isBlocked\n              isOwner\n              isModerator\n            }\n          }\n        }\n      }\n      channelConnection {\n        edges {\n          node {\n            id\n            name\n            slug\n            isDefault\n            isPrivate\n            isArchived\n            community {\n              id\n            }\n            channelPermissions {\n              isMember\n              isPending\n              isBlocked\n              isOwner\n              isModerator\n            }\n          }\n        }\n      }\n    }\n  }\n  ${userInfoFragment}"}, {"type": "query", "name": "HeroAndFriendsNames($episode: Episode)", "content": "{\n        result: sendMessageToResidentScopes(data: $data) { status }\n    }"}, {"type": "query", "name": "getEverythingThreads($after: String)", "content": "{\n  comment_reactions(where: {comment_id: {_eq: $commentId}}) {\n    ...commentReactionFields\n  }\n}\n    ${CommentReactionFieldsFragmentDoc}"}, {"type": "query", "name": "(\n  $id: Int,\n  $slug: String,\n  $ids: [Int],\n  $slugs: [String],\n  $chatbotId: String\n)", "content": "{\n    createCommentVote (input: { comment: $commentId, value: $value }) {\n      commentVote {\n        value\n      }\n    }\n  }"}, {"type": "mutation", "name": "WithdrawListing(\n    $listingID: String!\n    $target: String!\n    $reason: String\n    $from: String\n  )", "content": "{\n    bindableResources(namespace: $namespace) {\n      kind\n      displayName\n      resources {\n        name\n        namespace\n      }\n    }\n  }"}, {"type": "mutation", "name": "($postId: Int!, $userId: String!)", "content": "{\n    setOrderShippingAddress(input: $input) {\n      ...ActiveOrder\n    }\n  }\n  ${ORDER_FRAGMENT}"}, {"type": "query", "name": "getOrganizationTableData($pagination: Pagination, $where: Filter, $sort: [SortBy!])", "content": "{\n    directMessageThread(id: $id) {\n      ...directMessageThreadInfo\n      ...directMessageThreadMessageConnection\n    }\n  }\n  ${directMessageThreadInfoFragment}\n  ${directMessageThreadMessageConnectionFragment}"}, {"type": "mutation", "name": "AddFavourite($id:String!)", "content": "{\n      createNetwork(input: $input) {\n        vpcUri\n        VpcId\n        label\n        description\n        tags\n        owner\n        SamlGroupName\n        privateSubnetIds\n        privateSubnetIds\n      }\n    }"}, {"type": "query", "name": "Rider($id:String)", "content": "{\n    createList(\n      name: $name\n      description: $description\n      requesterId: $requesterId\n      responderId: $responderId\n      tasks: $tasks\n    ) {\n      list {\n        id\n        name\n      }\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "query", "name": "SearchPosts", "content": "{\n    serverSettingsUpdate {\n      globalRegistryAddress\n      orgRegistryAddress\n      organizationName\n      organizationRole\n      organizationAddress\n      organizationWhisperKey\n      rpcProvider\n    }\n  }"}, {"type": "subscription", "name": "OrderStatusChanged($userId:String!)", "content": "{\n          onUpdateMember {\n            id\n            name\n            createdAt\n            updatedAt\n          }\n        }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n        posts(where: {onchain_link: {onchain_proposal_id: {_eq: $id}}}) {\n            ...proposalPost\n        }\n    }\n    ${proposalPost}"}, {"type": "mutation", "name": "addClusterAddonsConfigurationURLs(\n    $name: String!\n    $urls: [String!]!\n  )", "content": "{\n      createCommentConnection(input: { content: \"Comment\", commentConnectionPostId: $postId }) {\n        id\n        content\n      }\n    }"}, {"type": "mutation", "name": "addPostAndProposalMutation($onchainProposalId: Int!, $authorId: Int!, $proposerAddress: String!, $content: String!, $topicId: Int!, $typeId: Int!)", "content": "{\n      createCommentConnection(input: { content: \"Comment\", commentConnectionPostId: $postId }) {\n        id\n        content\n      }\n    }"}, {"type": "mutation", "name": "ChangePassword(\n    $currentPassword: String!\n    $newPassword: String!\n    $confirmPassword: String!\n  )", "content": "{\n    namespaces(\n      withSystemNamespaces: $showSystemNamespaces\n      withInactiveStatus: $withInactiveStatus\n    ) {\n      name\n      labels\n      status\n      podsCount\n      healthyPodsCount\n      applicationsCount\n      isSystemNamespace\n    }\n  }"}, {"type": "mutation", "name": "UpdateEnvironment(\n      $environmentUri: String!\n      $input: ModifyEnvironmentInput\n    )", "content": "{\n    registerApplicationFromTemplate(in: $in) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "DeleteStudent($input: DeleteStudentInput!)", "content": "{\n    deleteDomain(domain: $domain) {\n      domain {\n        domain\n      }\n    }\n  }"}, {"type": "mutation", "name": "updateSession($sessionId: ID!, $session: SessionUpdateInput!)", "content": "{\n    sendFromNode(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "login ($username: String!, $password: String!)", "content": "{\n        obj: shareTicket(data: $data) { status }\n    }"}, {"type": "mutation", "name": "ForgotPassword($email:String!)", "content": "{\n        obj: authenticateUserWithPhoneAndPassword(data: { phone: $phone, password: $password }) {\n            item {\n                id\n            }\n        }\n    }"}, {"type": "mutation", "name": "AcceptOffer($offerID: String!, $from: String)", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "DeleteStudent($input: DeleteStudentInput!)", "content": "{\n  swapContent(id: $id, withId: $withId) {\n    id,\n    order\n  }\n}"}, {"type": "query", "name": "($minecraftId: ID!)", "content": "{\n    sendFromWallet(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "query", "name": "getTabledProposalAtBlock($blockNumber: Int!)", "content": "{\n      updateStudent(input: $input) {\n        id\n        name\n        email\n        ssn\n        owner\n      }\n    }"}, {"type": "mutation", "name": "importIdentities(\n    $backend: String!\n    $interval: Int\n    $params: JSONString\n    $url: String\n  )", "content": "{\n  jobRole_Delete(contactId: $contactId, roleId: $roleId) {\n    result\n  }\n}"}, {"type": "mutation", "name": "updateDatasetStack($datasetUri: String!)", "content": "{\n    unsetThread(communityId: $communityId, threadId: $threadId) {\n      id\n      threads {\n        title\n      }\n    }\n  }"}, {"type": "query", "name": "clusterAddonsConfigurations", "content": "{\n    token(id: $id) {\n      symbol\n      decimals\n    }\n  }"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n    currentUser {\n      login\n    }\n    feed(type: $type, offset: $offset, limit: $limit) {\n      ...FeedEntry\n    }\n  }\n  ${FeedEntryFragmentDoc}"}, {"type": "query", "name": "LatestMotionPosts($postType: Int!, $limit: Int! = 5 )", "content": "{\n    setNetwork(network: $network, customConfig: $customConfig)\n  }"}, {"type": "mutation", "name": "($postId: ID!)", "content": "{\n        searchTodos {\n          items {\n            id\n            groups\n            content\n          }\n          nextToken\n        }\n      }"}, {"type": "query", "name": "InviteInfo($code: String!)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        offers(first: $first, after: $after, filter: $filter) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            ...basicOfferFields\n            listing {\n              ...basicListingFields\n            }\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "query", "name": "AllAccounts", "content": "{\n        obj: acceptOrRejectOrganizationInviteById(id: $id, data: $data) ${ORGANIZATION_EMPLOYEE_FIELDS}\n    }"}, {"type": "mutation", "name": "DeleteServiceInstance($name: String!, $namespace: String!)", "content": "{\n  meeting_LinkRecording(meetingId: $meetingId, attachmentId: $attachmentId) {\n    id\n    attendedBy {\n      ... on UserParticipant {\n        userParticipant {\n          id\n          firstName\n          lastName\n        }\n      }\n      ... on ContactParticipant {\n        contactParticipant {\n          id\n          firstName\n          lastName\n          name\n        }\n      }\n    }\n    recording {\n      id\n    }\n    meetingStartedAt: startedAt\n    agenda\n  }\n}"}, {"type": "mutation", "name": "AddFavourite($id:String!)", "content": "{\n    sendFromNode(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "EnableMessaging", "content": "{\n  availableRiders{\n    _id\n    name\n    username\n    phone\n    available\n  }\n}"}, {"type": "subscription", "name": "OrderStatusChanged($userId:String!)", "content": "{\n  workspace(id: $workspaceId) {\n    id\n    creatorUser {\n      id\n    }\n    workspaceMembers(order_by: {createdAt: asc}) {\n      ...getWorkspaceMembersWorkspaceMember\n    }\n    workspaceMemberInvites(order_by: {createdAt: asc}) {\n      ...getWorkspaceMembersWorkspaceMemberInvite\n    }\n  }\n}\n    ${GetWorkspaceMembersWorkspaceMemberFragmentDoc}\n${GetWorkspaceMembersWorkspaceMemberInviteFragmentDoc}"}, {"type": "query", "name": "Sales($id: ID!, $first: Int, $after: String, $filter: String)", "content": "{\n    a\n  }"}, {"type": "mutation", "name": "UpdateRiderLocation($latitude:String!,$longitude:String!)", "content": "{\n    pagedCommunities(filter: $filter) {\n      entries {\n        id\n        title\n        raw\n        logo\n      }\n      pageNumber\n      pageSize\n      totalCount\n      totalPages\n    }\n  }"}, {"type": "mutation", "name": "updateEventDefinition($id: ID!, $in: EventDefinitionInput!)", "content": "{\n      getPostConnection(id: $postId) {\n        id\n        title\n      }\n    }"}, {"type": "query", "name": "ViewerLogin", "content": "{\n    finalizeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "ReportContent($network: String!, $type: String!, $content_id: String!, $reason: String!, $comments: String!)", "content": "{\n  riders{\n    _id\n    name\n    username\n    password\n    phone\n    available\n  }\n}"}, {"type": "query", "name": "GetPlans($where: plans_bool_exp)", "content": "{\n    messaging(id: \"defaultAccount\") {\n      decryptOutOfBandMessage(encrypted: $encrypted) {\n        content\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreatePost($input: CreatePostInput!)", "content": "{\n    labelDefinitions {\n      key\n      schema\n    }\n  }"}, {"type": "mutation", "name": "($id: ID!, $action: String!, $type: String!)", "content": "{\n              test(foo: $foo)\n            }"}, {"type": "query", "name": "exportPaymentsToExcel ($data: ExportPaymentsToExcelInput!)", "content": "{\n            upload(filename: $Filename , userId: $UserId , fileCategory:$FileCategory  , fileExtension: $FileExtension , file: $Files)\n          }"}, {"type": "query", "name": "predictTicketClassification ($data: PredictTicketClassificationInput!)", "content": "{\n  rider(id:$id){\n    _id\n    location {coordinates}\n  }\n}"}, {"type": "query", "name": "GetStorageSettings($appId: uuid!)", "content": "{\n        posts(where: {onchain_link: {onchain_motion_id: {_eq: $id}}}) {\n            ...motionPost\n        }\n    }\n    ${motionPost}"}, {"type": "query", "name": "GetSignInMethods($appId: uuid!)", "content": "{\n    createServiceBindingUsage(\n      createServiceBindingUsageInput: $createServiceBindingUsageInput\n      namespace: $namespace\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "DataQuery(\n    $id: ID!\n    $class: String!\n    $q: String!\n    $page: Int = 1\n    $size: Int = 20\n    $query_all: Boolean!\n    $search_filter_args: SearchFilterArgs!\n  )", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            topic: {\n                id: {\n                    _eq: $postTopic\n                }\n            },\n            onchain_link: {\n                onchain_tip_id: {\n                    _is_null: false\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_tip_id\n                onchain_tip(where: {}) {\n                    id\n                    reason\n                    tipStatus(last: 1) {\n                        id\n                        status\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "query", "name": "UserFavourite ($latitude:Float,$longitude:Float)", "content": "{\n    getPosts(input: $input, filter: $filter) {\n      page\n      per_page\n      total\n      data {\n        id\n        postId\n        slug\n        content\n        cover\n        likes\n        comments\n        community {\n          id\n          name\n          logo\n          slug\n        }\n        tags {\n          id\n          tagName\n        }\n        user {\n          id\n          fullName\n          photo\n          totalLikes\n        }\n        createdAt\n      }\n    }\n  }"}, {"type": "subscription", "name": "SubscribePlaceOrder($restaurant:String!)", "content": "{\n  subscriptionNewMessage(order:$order){\n    id\n    message\n    user {\n      id\n      name\n    }\n    createdAt\n  }\n}"}, {"type": "query", "name": "UserListings($id: ID!, $first: Int, $after: String)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "query", "name": "cosmosGovernanceParametersDeposit($network: String!)", "content": "{\n  deleteAuthUserRoles(\n    where: {_and: [{userId: {_eq: $userId}}, {role: {_in: $roles}}]}\n  ) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "getComposerCommunitiesAndChannels", "content": "{\n      archiveOrganization(organizationUri: $organizationUri)\n    }"}, {"type": "query", "name": "GetDatasetTable($tableUri: String!)", "content": "{\n      getRedshiftCluster(clusterUri: $clusterUri) {\n        clusterUri\n        environmentUri\n        name\n        label\n        description\n        tags\n        owner\n        created\n        updated\n        AwsAccountId\n        region\n        clusterArn\n        clusterName\n        created\n        databaseName\n        databaseUser\n        datahubSecret\n        masterUsername\n        masterSecret\n        masterDatabaseName\n        nodeType\n        numberOfNodes\n        kmsAlias\n        status\n        subnetGroupName\n        CFNStackName\n        CFNStackStatus\n        CFNStackArn\n        port\n        endpoint\n        IAMRoles\n        subnetIds\n        vpc\n        securityGroupIds\n        userRoleForCluster\n        userRoleInEnvironment\n        imported\n        SamlGroupName\n        organization {\n          organizationUri\n          label\n          name\n        }\n        environment {\n          environmentUri\n          label\n          name\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n      }\n    }"}, {"type": "query", "name": "Zones", "content": "{\n    editUser(input: $input) {\n      ...userInfo\n    }\n  }\n  ${userInfoFragment}"}, {"type": "query", "name": "GetOrganizationName($id: ID!)", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "query", "name": "Application($id: ID!)", "content": "{\n  createConfiguration(configuration: $configuration) {\n    id,\n    namespace,\n    payload\n  }\n}"}, {"type": "mutation", "name": "SubmitDeathCertificateOrder(\n    $contactName: String!\n    $contactEmail: String!\n    $confirmContactEmail: String!\n    $contactPhone: String!\n    $shippingName: String!\n    $shippingCompanyName: String!\n    $shippingAddress1: String!\n    $shippingAddress2: String!\n    $shippingCity: String!\n    $shippingState: String!\n    $shippingZip: String!\n    $cardToken: String!\n    $cardLast4: String!\n    $cardholderName: String!\n    $billingAddress1: String!\n    $billingAddress2: String!\n    $billingCity: String!\n    $billingState: String!\n    $billingZip: String!\n    $items: [DeathCertificateOrderItemInput!]!\n    $idempotencyKey: String!\n  )", "content": "{\n    verifyOAuthAttestation(\n      provider: $provider\n      identity: $identity\n      authUrl: $authUrl\n      redirect: $redirect\n      code: $code\n    ) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "mutation", "name": "ExecuteRulingMutation(\n    $offerID: String!\n    $ruling: String!\n    $commission: String!\n    $message: String\n    $refund: String\n    $from: String\n  )", "content": "{\n      getAirflowClusterConsoleAccess(clusterUri: $clusterUri)\n    }"}, {"type": "query", "name": "countReadNotifications", "content": "{\n    organizations(filters: $filters) {\n      entities {\n        name\n        domains {\n          id\n          domain\n          isTopDomain\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreateMember($input: CreateMemberInput!)", "content": "{\n      sendResetPasswordEmail(username: $username) {\n        result\n      }\n    }"}, {"type": "subscription", "name": "getDeploymentsSub($id: uuid!, $limit: Int!, $offset: Int!)", "content": "{\n    tokenVerify(token: $token) {\n      id\n      email\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "RemoveUser($input: RemoveOrganizationUserInput)", "content": "{\n      addDatasetToRedshiftCluster(\n        clusterUri: $clusterUri\n        datasetUri: $datasetUri\n      )\n    }"}, {"type": "mutation", "name": "UpdateTag($input: TagUpdateInput!)", "content": "{\n        objs: allProperties(where: $where, orderBy: $orderBy, first: $first, skip: $skip) {\n            id\n            address\n        }\n    }"}, {"type": "query", "name": "loadMoreChannelThreads($id: ID, $after: String)", "content": "{\n  createContent(content: $content) {\n    id,\n    slug,\n    title,\n    body,\n    language,\n    payload,\n    fields {\n      id,\n      name,\n      value,\n      type\n    }\n  }\n}"}, {"type": "mutation", "name": "UpdateMember($input: UpdateMemberInput!)", "content": "{\n      createSagemakerNotebook(input: $input) {\n        notebookUri\n        name\n        label\n        created\n        description\n        tags\n      }\n    }"}, {"type": "mutation", "name": "DeleteDatasetQualityRule($ruleUri: String!)", "content": "{\n  foodByIds(ids: $ids) {\n    _id\n    title\n    description\n    img_url\n    stock\n    category {\n      _id\n    }\n    variations {\n      _id\n      title\n      price\n      discounted\n      addons {\n        _id\n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options {\n          _id\n          title\n          description\n          price\n        }\n      }\n    }\n  }\n}"}, {"type": "query", "name": "note(\n            $id: String!\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n      updateDataPipeline(DataPipelineUri: $DataPipelineUri, input: $input) {\n        DataPipelineUri\n        name\n        label\n        created\n        tags\n      }\n    }"}, {"type": "mutation", "name": "editAddon($addonInput:AddonInput)", "content": "{\n  addressLinkConfirm(address_id: $address_id, signature: $signature) {\n    message\n    token\n  }\n}"}, {"type": "subscription", "name": "ServiceInstanceEvent($namespace: String!)", "content": "{\n        updateUser(updateUserInput:{name:$name,phone:$phone,phoneIsVerified:$phoneIsVerified,emailIsVerified:$emailIsVerified}){\n          _id\n          name\n          phone\n          phoneIsVerified\n          emailIsVerified\n        }\n      }"}, {"type": "query", "name": "getDirectMessageThreadByUserIds($userIds: [ID!])", "content": "{\n  \t\t\t\tbackupRepos(site_id: $siteID) {\n    \t\t\t\tid\n    \t\t\t\tsite_id\n    \t\t\t\tprovider_id\n    \t\t\t\thash\n  \t\t\t\t}\n\t\t\t}"}, {"type": "mutation", "name": "registerApplication($in: ApplicationRegisterInput!)", "content": "{\n  councils(\n    where: {blockNumber: {number_lte: $blockNumber}}\n    orderBy: id_DESC\n    first: 1\n  ) {\n    members {\n      address\n    }\n  }\n}"}, {"type": "query", "name": "", "content": "{\n  config(appID: $appId, resolve: true) {\n    id: __typename\n    __typename\n    global {\n      environment {\n        ...EnvironmentVariable\n      }\n    }\n    hasura {\n      adminSecret\n      webhookSecret\n      jwtSecrets {\n        ...JWTSecret\n      }\n    }\n  }\n}\n    ${EnvironmentVariableFragmentDoc}\n${JwtSecretFragmentDoc}"}, {"type": "query", "name": "HeroParentTypeDependentField($episode: Episode)", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "mutation", "name": "createBackupRepo(\n\t\t\t\t$siteID: Int!,\n\t\t\t\t$providerID: String!,\n\t\t\t\t$repoID: String!\n\t\t\t)", "content": "{\n        searchTodos {\n          items {\n            id\n            groups\n            content\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "acceptOrRejectOrganizationInviteById($id: ID!, $data: AcceptOrRejectOrganizationInviteInput!)", "content": "{\n\t\tproposal (\n\t\t\twhere: {\n\t\t\t\tnode: {\n\t\t\t\t\tproposalStatus_some: {\n\t\t\t\t\t\tAND: [\n\t\t\t\t\t\t\t{ status: \"Proposed\" }\n\t\t\t\t\t\t\t{ blockNumber: { number_gte: $startBlock } }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t) {\n\t\t\tmutation\n\t\t\tnode {\n\t\t\t\tid\n\t\t\t\tauthor\n\t\t\t\tproposalId\n\t\t\t}\n\t\t}\n\t}"}, {"type": "mutation", "name": "CreateUser($phone:String,$email:String,$password:String,$name:String,$notificationToken:String,$appleId:String)", "content": "{\n  oasisAccountBalances(address: $address) {\n    available\n    staked {\n      balance\n      shares\n    }\n    unbonding {\n      balance\n      shares\n    }\n    rewards\n    commissions\n    meta {\n      is_validator\n      is_delegator\n    }\n    delegations {\n      delegator\n      validator\n      amount\n    }\n  }\n}"}, {"type": "mutation", "name": "deleteTask ($id:ID!)", "content": "{\n    setCustomerForOrder(input: $input) {\n      ...ActiveOrder\n    }\n  }\n  ${ORDER_FRAGMENT}"}, {"type": "query", "name": "serviceClassFilters", "content": "{\n  organization_Update(input: $input) {\n    id\n    name\n  }\n}"}, {"type": "query", "name": "getUserById($id: ID)", "content": "{\n        addressSignupStart(address: $address){\n            message\n            signMessage\n        }\n    }"}, {"type": "mutation", "name": "($id: Int!, $queue: String!, $task: InputTask!)", "content": "{\n    listTodos {\n      data {\n        todoItem\n        taskCompleted\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "GetTemplates", "content": "{\n    marketplace {\n      listings(\n        first: $first\n        after: $after\n        sort: $sort\n        order: $order\n        search: $search\n        filters: $filters\n        listingIds: $listingIds\n      ) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          endCursor\n        }\n        nodes {\n          ...basicListingFields\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "query", "name": "GetDataset($filter: DatasetLoaderFilter, $datasetUri: String!)", "content": "{\n        searchTodos {\n          items {\n            id\n            groups\n            content\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "createLimitRange(\n    $namespace: String!\n    $name: String!\n    $limitRange: LimitRangeInput!\n  )", "content": "{\n    acceptOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "DiscussionPostAndComments($id: Int!)", "content": "{\n    addRoll(device: $device, dice: $dice) {\n      _id\n    }\n  }"}, {"type": "query", "name": "(\n  $limit: Int,\n  $offset: Int,\n  $order: String,\n  $inbound: Boolean,\n  $type: String,\n  $transport: String,\n  $messageId: String,\n  $chatId: String,\n  $userId: String,\n  $flag: String,\n  $chatbotId: String\n)", "content": "{\n    enroll(\n      uuid: $uuid\n      group: $group\n      fromDate: $fromDate\n      toDate: $toDate\n      parentOrg: $parentOrg\n    ) {\n      uuid\n      individual {\n        ...individual\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "mutation", "name": "deleteDataset($datasetUri: String!, $deleteFromAWS: Boolean)", "content": "{\n      getDatasetTable(tableUri: $tableUri) {\n        dataset {\n          datasetUri\n          name\n          userRoleForDataset\n          region\n          SamlAdminGroupName\n          owner\n          organization {\n            label\n          }\n          environment {\n            label\n            region\n            subscriptionsEnabled\n            subscriptionsProducersTopicImported\n            subscriptionsConsumersTopicImported\n            subscriptionsConsumersTopicName\n            subscriptionsProducersTopicName\n          }\n        }\n        datasetUri\n        owner\n        description\n        created\n        tags\n        tableUri\n        AwsAccountId\n        GlueTableName\n        GlueDatabaseName\n        LastGlueTableStatus\n        label\n        name\n        S3Prefix\n        GlueTableProperties\n        terms {\n          count\n          nodes {\n            nodeUri\n            path\n            label\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "createResourceQuota(\n    $namespace: String!\n    $name: String!\n    $resourceQuota: ResourceQuotaInput!\n  )", "content": "{\n    communities(slugs: $slugs) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "mutation", "name": "updatePackage($id: ID!, $in: PackageUpdateInput!)", "content": "{\n    deployIdentityViaProxy(from: $from, owner: $owner) {\n      id\n    }\n  }"}, {"type": "query", "name": "Offer($offerId: ID!)", "content": "{\n        result: registerMultiPayment(data: $data) { dv multiPaymentId webViewUrl feeCalculationUrl directPaymentUrl getCardTokensUrl }\n    }"}, {"type": "query", "name": "Comments ($postId: ID!)", "content": "{\n      deleteTodo(input: $input) {\n        id\n        name\n        description\n        level\n        owner\n        sharedOwners\n        status\n      }\n    }"}, {"type": "mutation", "name": "deleteAirflowCluster($clusterUri: String!)", "content": "{\n    moloches(orderBy: summoningTime, first: 100, skip: $skip) {\n      id\n      apiData @client\n      version\n      title\n      totalShares\n      summoningTime\n      guildBankAddress\n      guildBankBalanceV1\n      members {\n        id\n        memberAddress\n        createdAt\n      }\n      proposals {\n        id\n        createdAt\n        votes {\n          id\n          createdAt\n        }\n      }\n      depositToken {\n        tokenAddress\n        symbol\n        decimals\n      }\n      tokenBalances {\n        id\n        tokenBalance\n        guildBank\n        token {\n          decimals\n          tokenAddress\n        }\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnCreatePost", "content": "{\n    campaign(id: $id) {\n      ...basicCampaignFields\n    }\n  }\n  ${fragments.GrowthCampaign.basic}"}, {"type": "query", "name": "Post ($slug: String!)", "content": "{\n    serviceBindingUsageEvent(namespace: $namespace) {\n      type\n      serviceBindingUsage {\n        ...serviceBindingUsageDetails\n      }\n    }\n  }\n  ${SERVICE_BINDING_USAGE_DETAILS_FRAGMENT}"}, {"type": "mutation", "name": "updateNote($input: NoteUpdateInput!)", "content": "{\n  organization(id: $id) {\n    customFields {\n      id\n      name\n      datatype\n      value\n      template {\n        type\n      }\n    }\n  }\n}"}, {"type": "mutation", "name": "setVote($input: VoteInputType!)", "content": "{\n    deleteMessage(id: $id)\n  }"}, {"type": "subscription", "name": "onWalletUpdate", "content": "{\n        auth: authenticateUserWithPassword(email: $identity, password: $secret) {\n            user: item {\n                id\n            }\n        }\n    }"}, {"type": "mutation", "name": "RemoveCompanyMember($companyId: ID!, $userId: ID, $userIds: [ID!])", "content": "{\n              onCreateTask(\n                owner: \"${USERNAME1}\"\n              ) {\n                id\n                title\n                priority\n                owner\n              }\n            }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n            tool(slug: $slug) {\n              name\n              description\n              imageUrl\n              websiteUrl\n              profileUrl\n              githubUrl\n              group {\n                name\n                url\n              }\n              category {\n                name\n                url\n              }\n              stackshareStats {\n                name\n                value\n              }\n              githubStats {\n                name\n                value\n              }\n            }\n          }"}, {"type": "query", "name": "Sections", "content": "{\n        obj: predictTicketClassification(data: $data) { id place { id name } category { id name }  }\n    }"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "query", "name": "Coupons", "content": "{\n\t\tresendVerifyEmailToken {\n\t\t\tmessage\n\t\t}\n\t}"}, {"type": "query", "name": "TrackerTipPosts($postType: Int!, $onchainTipIds: [String!]!)", "content": "{\n      getDatasetQualityRule(ruleUri: $ruleUri) {\n        ruleUri\n        name\n        label\n        description\n        created\n        query\n      }\n    }"}, {"type": "query", "name": "myPartners", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "query", "name": "getAllProposals", "content": "{\n    cancelOrder(_id:$_id,reason:$reason){\n        _id\n      orderStatus\n    }\n}"}, {"type": "subscription", "name": "OnCreateStudent", "content": "{\n      updateMember(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n      }\n    }"}, {"type": "query", "name": "Users($first: Int, $after: String, $sort: String)", "content": "{\n      listDashboardShares(dashboardUri: $dashboardUri, filter: $filter) {\n        count\n        nodes {\n          dashboardUri\n          shareUri\n          SamlGroupName\n          owner\n          created\n          status\n        }\n      }\n    }"}, {"type": "query", "name": "LookupDeathCertificateOrder($id: String!, $contactEmail: String!)", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "query", "name": "GetMetrics($filter: MetricFilter)", "content": "{\n      createDataPipeline(input: $input) {\n        DataPipelineUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "query", "name": "cosmosTransaction($hash: String!, $network: String!)", "content": "{\n  global_Cache {\n    user {\n      id\n      emails {\n        email\n        rawEmail\n        primary\n      }\n      firstName\n      lastName\n    }\n    isOwner\n    gCliCache {\n      id\n      type\n      display\n      data {\n        key\n        value\n        display\n      }\n    }\n  }\n}"}, {"type": "mutation", "name": "createClusterRoleBinding(\n    $name: String!\n    $params: ClusterRoleBindingInput!\n  )", "content": "{\n        note3sByNoteTypeAndGroup(noteType: $noteType, group: $group) {\n          items {\n            noteId\n            noteType\n            group\n          }\n        }\n      }"}, {"type": "mutation", "name": "CancelOrder($_id:String!,$reason:String!)", "content": "{\n    insert_Like(objects: [{ post_id: $postId, user_id: $userId }]) {\n      affected_rows\n    }\n  }"}, {"type": "mutation", "name": "UpdateTerm($nodeUri: String!, $input: UpdateTermInput)", "content": "{\n    submitBirthCertificateOrder(\n      contactName: $contactName\n      contactEmail: $contactEmail\n      confirmContactEmail: $confirmContactEmail\n      contactPhone: $contactPhone\n      shippingName: $shippingName\n      shippingCompanyName: $shippingCompanyName\n      shippingAddress1: $shippingAddress1\n      shippingAddress2: $shippingAddress2\n      shippingCity: $shippingCity\n      shippingState: $shippingState\n      shippingZip: $shippingZip\n      cardToken: $cardToken\n      cardLast4: $cardLast4\n      cardholderName: $cardholderName\n      billingAddress1: $billingAddress1\n      billingAddress2: $billingAddress2\n      billingCity: $billingCity\n      billingState: $billingState\n      billingZip: $billingZip\n      item: $item\n      idempotencyKey: $idempotencyKey\n    ) {\n      order {\n        id\n      }\n      error {\n        message\n        cause\n      }\n    }\n  }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n      deleteMember(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n      }\n    }"}, {"type": "query", "name": "Restaurants", "content": "{\n    user: currentUser {\n      ...userInfo\n      ...userCommunityConnection\n    }\n  }\n  ${userInfoFragment}\n  ${userCommunityConnectionFragment}"}, {"type": "query", "name": "", "content": "{\n    services(namespace: $namespace, excludedLabels: $excludedLabels) {\n      name\n      clusterIP\n      creationTimestamp\n      labels\n      ports {\n        port\n        serviceProtocol\n      }\n      json\n    }\n  }"}, {"type": "query", "name": "($slug: String!)", "content": "{\n      getPostSecretFieldIAM(id: $id) {\n        id\n        title\n      }\n    }"}, {"type": "subscription", "name": "OnDeleteMember", "content": "{\n\t\tmeme_categories_aggregate(limit: 10, offset: 0) {\n\t\t\tnodes {\n\t\t\t\tid\n\t\t\t\tcategory_title\n\t\t\t\tno_of_memes\n\t\t\t\tthumb_nail\n\t\t\t}\n\t\t}\n\n\t\tcount: memes_aggregate(offset: 0) {\n\t\t\taggregate {\n\t\t\t\tcount\n\t\t\t}\n\t\t}\n\t}"}, {"type": "mutation", "name": "", "content": "{\n    service(name: $name, namespace: $namespace) {\n      name\n      json\n      labels\n      clusterIP\n      UID\n    }\n  }"}, {"type": "mutation", "name": "removeEmailFromOrganization($organizationId: ID!, $id: ID!)", "content": "{\n        createPost(input: { id: \"P1\", type: \"Post\", category: \"T1\", content: \"Content #1\", slug: \"content-1\", rating: 4 }) {\n          id\n        }\n      }"}, {"type": "query", "name": "LatestBountyPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n  pushToken(token:$token){\n    _id\n    notificationToken\n  }\n}"}, {"type": "query", "name": "Balance($id: ID!, $token: String!)", "content": "{\n      updateWorksheetShare(\n        worksheetShareUri: $worksheetShareUri\n        canEdit: $canEdit\n      ) {\n        worksheetShareUri\n        canEdit\n      }\n    }"}, {"type": "mutation", "name": "removeStageFromOrganizationRelationship($organizationId: ID!, $relationship: OrganizationRelationship!)", "content": "{\n  organization_RemoveRelationship(\n    organizationId: $organizationId\n    relationship: $relationship\n  ) {\n    id\n  }\n}"}, {"type": "subscription", "name": "OnCreateStudent($owner: String)", "content": "{\n  posts(\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_proposal_id: {_in: $onchainProposalIds}}}\n    order_by: {onchain_link: {onchain_proposal_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_proposal_id\n      onchain_proposal(where: {}) {\n        id\n        proposalStatus(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "mutation", "name": "joinCommunity($input: String!)", "content": "{\n      searchGlossaryHierarchy(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          __typename\n          ... on Glossary {\n            nodeUri\n            parentUri\n            label\n            readme\n            created\n            owner\n            path\n            isMatch\n          }\n          ... on Category {\n            nodeUri\n            parentUri\n            label\n            readme\n            created\n            owner\n            path\n            isMatch\n          }\n          ... on Term {\n            nodeUri\n            parentUri\n            label\n            readme\n            created\n            owner\n            path\n            isMatch\n            assetLink(targetUri: $targetUri) {\n              nodeUri\n              targetUri\n              created\n              approvedByOwner\n              approvedBySteward\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "UpdateUser($name:String!,$phone:String,$phoneIsVerified:Boolean,$emailIsVerified:Boolean)", "content": "{\n    User(where: { id: { _eq: $id } }) {\n      email\n      avatar\n      last_seen\n      name\n      Posts_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n    Post(where: { user_id: { _eq: $id } }) {\n      url\n      caption\n      id\n    }\n  }"}, {"type": "mutation", "name": "rebootRedshiftCluster($clusterUri: String!)", "content": "{\n    addFavourite(id:$id){\n      _id\n      addresses{\n        _id\n        label\n        deliveryAddress\n        details\n        location{coordinates}\n        selected\n      }\n    }\n  }"}, {"type": "mutation", "name": "inviteRemind($invitationId: Int!)", "content": "{\n  organization_AddRelationship(\n    organizationId: $organizationId\n    relationship: $relationship\n  ) {\n    id\n  }\n}"}, {"type": "query", "name": "Orders", "content": "{\n        result: generatePaymentLink(data: $data) { dv, paymentUrl }\n    }"}, {"type": "mutation", "name": "updateMeeting($meetingId: ID!, $meetingInput: MeetingUpdateInput!)", "content": "{\n    finalizeOffer(\n      offerID: $offerID\n      from: $from\n      rating: $rating\n      review: $review\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "searchDashboards($filter: DashboardFilter)", "content": "{\n    kg(id: $id) {\n      id\n      name\n      onto {\n        v {\n          class\n          alias\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "DeleteCommentReaction($commentId: uuid!, $userId: Int!, $reaction: bpchar!)", "content": "{\n  editAdmin(id:$id, admin: $admin) {\n    id,\n    username,\n    first_name,\n    last_name,\n    username,\n    payload,\n    permissions,\n    chatbotIds,\n    createdAt,\n    email\n  }\n}"}, {"type": "query", "name": "SearchPosts", "content": "{\n      updateWorksheet(worksheetUri: $worksheetUri, input: $input) {\n        worksheetUri\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "DeletePersonalAccessToken($patId: uuid!)", "content": "{\n    deletePost (input: { slug: $slug }) {\n      result\n    }\n  }"}, {"type": "query", "name": "GetOrganizationTimeline($organizationId: ID!, $from: Time!, $size: Int!)", "content": "{\n    sessions {\n      me {\n        session(id: $sessionId) {\n          id\n          type\n          category\n          status\n          title\n          shortDescription\n          longDescription\n          primaryCategory\n          secondaryCategory\n          targetAudience\n          supportingArtifacts {\n            name\n            url\n          }\n          prerequisites\n          agenda\n          takeaways\n          canRecord\n          mentorship\n          whyAreYou\n          otherComments\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "clusterRoles", "content": "{\n                session {\n                  id\n                  user {\n                    id\n                    minecraftId\n                  }\n                }\n              }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n      countUpVotes(targetUri: $targetUri, targetType: $targetType)\n    }"}, {"type": "mutation", "name": "CREATE_GRAPH(\n    $name: String!\n    $traceFilters: [TraceFilter]\n    $to: DateTime\n    $from: DateTime\n  )", "content": "{\n      countDeletedNotifications\n    }"}, {"type": "subscription", "name": "SubscriptionNewMessage($order:ID!)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "mutation", "name": "setMessageStatus ($data: SetMessageStatusInput!)", "content": "{\n      listScheduledQueryExecutions(scheduledQueryUri: $scheduledQueryUri) {\n        executionArn\n        status\n        startDate\n        stopDate\n      }\n    }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n        obj: inviteNewOrganizationEmployee(data: $data) ${ORGANIZATION_EMPLOYEE_FIELDS}\n    }"}, {"type": "subscription", "name": "proposalSubscription($startBlock: Int!)", "content": "{\n    currentUser {\n      login\n    }\n    feed(type: $type, offset: $offset, limit: $limit) {\n      ...FeedEntry\n    }\n  }\n  ${FeedEntryFragmentDoc}"}, {"type": "query", "name": "loadMoreChannelThreads($id: ID, $after: String)", "content": "{\n    updateAPIRule(\n      name: $name\n      namespace: $namespace\n      generation: $generation\n      params: $params\n    ) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "deleteServiceBindingUsages(\n    $serviceBindingUsageNames: [String!]!\n    $namespace: String!\n  )", "content": "{\n  cosmosStakingPool(network: $network) {\n    loose_tokens\n    bonded_tokens\n    not_bonded_tokens\n    inflation_last_time\n    inflation\n    date_last_commission_reset\n    prev_bonded_shares\n  }\n}"}, {"type": "mutation", "name": "SendFromNode($from: String, $to: String, $value: String)", "content": "{\n        createPostPrivateIAM(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "UpdateListing(\n    $listingID: String!\n    $additionalDeposit: String\n    $from: String\n    $data: NewListingInput\n    $autoApprove: Boolean\n  )", "content": "{\n  authRoles {\n    role\n  }\n}"}, {"type": "mutation", "name": "UpdateUser($name:String!,$phone:String!,$is_active:Boolean!)", "content": "{\n\t\tchangeNotificationPreference(\n\t\t\tnotificationPreferences: {\n\t\t\t\tpostParticipated: $postParticipated,\n\t\t\t\tpostCreated: $postCreated,\n\t\t\t\tnewProposal: $newProposal,\n\t\t\t\townProposal: $ownProposal\n\t\t\t}\n\t\t) {\n            message\n            token\n\t\t}\n\t}"}, {"type": "query", "name": "Zones", "content": "{\n        objs: allProperties(where: $where, orderBy: $orderBy, first: $first, skip: $skip) {\n            id\n            address\n        }\n    }"}, {"type": "query", "name": "MyFeed", "content": "{\n  createSection(section:$section){\n      _id\n      name\n      enabled\n      restaurants{\n        _id\n        name\n      }\n    }\n}"}, {"type": "query", "name": "Test", "content": "{\n  posts(order_by: {id: asc}, limit: $limit, where: {type: {id: {_eq: 1}}}) {\n    ...postFields\n  }\n}\n    ${PostFieldsFragmentDoc}"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n    updateProfile(data: $data, uuid: $uuid) {\n      uuid\n      individual {\n        ...individual\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "query", "name": "getCurrentUserCommunityConnection", "content": "{\n    setWalletFromMnemonic(mnemonic: $mnemonic, path: $path){\n      globalRegistryAddress\n      orgRegistryAddress\n      organizationName\n      organizationRole\n      organizationWhisperKey\n      rpcProvider\n    }\n  }"}, {"type": "query", "name": "GetUser($id: ID!)", "content": "{\n    user: currentUser {\n      ...userInfo\n    }\n  }\n  ${userInfoFragment}"}, {"type": "query", "name": "CallScreenQuery", "content": "{\n  contact(id: $id) {\n    id\n    ...ContactNameFragment\n  }\n}\n    ${ContactNameFragmentFragmentDoc}"}, {"type": "mutation", "name": "SendFromNode($from: String!, $to: String!, $value: String!)", "content": "{\n        searchTodos {\n          items {\n            id\n            groups\n            content\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "SendMessage($to: String!, $content: String!)", "content": "{\n  allReviews(offset:$offset){\n    _id\n    rating\n    description\n    createdAt\n    updatedAt\n    is_active\n    order{\n      user{\n        name\n        email\n      }\n      items{\n        food{\n          title\n        }\n      }\n   }\n  }\n}"}, {"type": "query", "name": "TransactionReceipt($id: ID!)", "content": "{\n      listWorksheets(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          worksheetUri\n          label\n          description\n          tags\n          owner\n          created\n          userRoleForWorksheet\n          SamlAdminGroupName\n        }\n      }\n    }"}, {"type": "query", "name": "Services($namespace: String!, $excludedLabels: [String!])", "content": "{\n    podEvent(namespace: $namespace) {\n      type\n      pod {\n        name\n        status\n      }\n    }\n  }"}, {"type": "query", "name": "GetSearchE($id: ID!, $rid: String!)", "content": "{\n    updateLogo(input: $input, cover: $cover)\n  }"}, {"type": "mutation", "name": "addComment($name: String!, $message: String!)", "content": "{\n  createSection(section:$section){\n      _id\n      name\n      enabled\n      restaurants{\n        _id\n        name\n      }\n    }\n}"}, {"type": "query", "name": "Sales($id: ID!, $first: Int, $after: String, $filter: String)", "content": "{\n  uploadToken(id:$id,pushToken:$pushToken){\n    _id\n    pushToken\n  }\n}"}, {"type": "query", "name": "RPM(\n    $graphId: ID!\n    $operationId: ID\n    $to: DateTime\n    $from: DateTime\n    $traceFilters: [TraceFilter]\n  )", "content": "{\n  cosmosRewardsByValidator(address: $address) {\n    reward {\n      denom\n      amount\n    }\n    validator_address\n  }\n}"}, {"type": "mutation", "name": "createContact($input: ContactInput!)", "content": "{\n  login(email:$email,password:$password,type:$type,appleId:$appleId,name:$name,notificationToken:$notificationToken){\n   userId\n   token\n   tokenExpiration\n   name\n   email\n   phone\n }\n}"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            topic: {\n                id: {\n                    _eq: $postTopic\n                }\n            },\n            onchain_link: {\n                onchain_proposal_id: {\n                    _is_null: false\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_proposal_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_proposal_id\n                onchain_proposal(where: {}) {\n                    id\n                    proposalStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "query", "name": "GetUser($id: ID!)", "content": "{\n  uploadToken(pushToken:$pushToken){\n    _id\n    push_token\n  }\n}"}, {"type": "query", "name": "cosmosGovernanceParametersDeposit($network: String!)", "content": "{\n              onCreateTodo(\n                owner: \"${USERNAME1}\",\n                filter: { name: { eq: \"todo1\" } }\n              ) {\n                id\n                name\n                owner\n              }\n            }"}, {"type": "mutation", "name": "CreateOptions($optionInput:[OptionInput])", "content": "{\n  delete_comments(where: {id: {_eq: $id}}) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "pairs($tokenAddress: ID!)", "content": "{MODEL}($id: ID!, $data: ${MODEL}UpdateInput) {\n            obj: update${MODEL}(id: $id, data: $data) ${fields}\n        }"}, {"type": "mutation", "name": "UpdateSecret($appId: uuid!, $secret: ConfigEnvironmentVariableInsertInput!)", "content": "{\n  onchain_links(where: {onchain_tech_committee_proposal_id: {_is_null: false}}) {\n    ...discussionTechCommitteeProposal\n  }\n}\n    ${DiscussionTechCommitteeProposalFragmentDoc}"}, {"type": "mutation", "name": "DeleteTodo($id:ID!)", "content": "{\n      deleteSagemakerNotebook(\n        notebookUri: $notebookUri\n        deleteFromAWS: $deleteFromAWS\n      )\n    }"}, {"type": "mutation", "name": "WithdrawOffer($offerID: String, $from: String)", "content": "{\n      createCommentConnection(input: { content: \"Comment\", commentConnectionPostId: $postId }) {\n        id\n        content\n      }\n    }"}, {"type": "query", "name": "GetCartItems", "content": "{\n        updateUser(updateUserInput:{name:$name,phone:$phone,is_active:$is_active}){\n          _id\n          name\n          phone\n          is_active\n        }\n      }"}, {"type": "mutation", "name": "DeployToken(\n    $name: String\n    $symbol: String\n    $decimals: String\n    $supply: String\n    $type: String\n    $from: String\n  )", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "query", "name": "getUser", "content": "{\n    updateProfile(data: $data, uuid: $uuid) {\n      uuid\n      individual {\n        ...individual\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "query", "name": "generatePaymentLink ($data: GeneratePaymentLinkInput!)", "content": "{\n  delete_comment_reactions(\n    where: {_and: [{comment_id: {_eq: $commentId}}, {user_id: {_eq: $userId}}, {reaction: {_eq: $reaction}}]}\n  ) {\n    affected_rows\n  }\n}"}, {"type": "mutation", "name": "update$", "content": "{\n    notificationAdded {\n      notification {\n        id\n        notificationId\n        notificationType\n        message\n        user {\n          id\n          fullName\n        }\n        target {\n          id\n          fullName\n        }\n        cover\n        createdAt\n        link\n      }\n    }\n  }"}, {"type": "mutation", "name": "updateContactEmail($contactId: ID!, $input: EmailUpdateInput!)", "content": "{\n    addDice(did: $did, name: $name, userId: $userId, actionIds: $actionIds, coverImg: $coverImg) {\n      _id\n    }\n  }"}, {"type": "query", "name": "GetHasuraSettings($appId: uuid!)", "content": "{\n            result: signinAsUser(data: $data) { user { id } token }\n        }"}, {"type": "query", "name": "SearchPosts", "content": "{MODEL}($id: ID!, $data: ${inputName}) {\n             obj: ${mutationName}(id: $id, data: $data) ${fields}\n         }"}, {"type": "subscription", "name": "OnDeleteTodo", "content": "{\n    createClusterAddonsConfiguration(\n      name: $name\n      urls: $urls\n      labels: $labels\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "ListOrganizationTopics(\n      $organizationUri: String\n      $filter: OrganizationTopicFilter\n    )", "content": "{\n      createPost(input: $input) {\n        id\n        content\n      }\n    }"}, {"type": "query", "name": "selectProperty ($where: PropertyWhereInput, $orderBy: String, $first: Int, $skip: Int)", "content": "{\n  cosmosGovernanceParametersVoting(network: $network) {\n    voting_period\n  }\n}"}, {"type": "query", "name": "getEvent($eventId: ID!)", "content": "{\n          searchPosts(aggregates: [{ name: \"Terms\", type: terms, field: secret }]) {\n            aggregateItems {\n              name\n              result {\n                ... on SearchableAggregateBucketResult {\n                  buckets {\n                    doc_count\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }"}, {"type": "query", "name": "SearchDeathCertificates(\n    $query: String!\n    $page: Int!\n    $startYear: String\n    $endYear: String\n  )", "content": "{\n    members {\n      members(pageSize: 10) {\n        cursor\n        members {\n          id\n          firstName\n          lastName\n          profileSlug\n          jobTitle\n          company\n          profileImage\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "UniswapCreateExchange(\n    $from: String!\n    $tokenAddress: String!\n    $factory: String\n  )", "content": "{\n    tokens(first: 100, skip: $skip) {\n      tokenAddress\n      symbol\n    }\n  }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n    deleteServiceBindingUsage(\n      serviceBindingUsageName: $serviceBindingUsageName\n      namespace: $namespace\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "_allPaymentsSum ($where: PaymentWhereInput!)", "content": "{\n  ridersByZone(id:$id){\n    _id\n    name\n    username\n    password\n    phone\n    available\n    zone{\n      _id\n      title\n    }\n  }\n}"}, {"type": "mutation", "name": "addressLinkConfirm($address_id: Int!, $signature: String!)", "content": "{\n    entities: runtimes {\n      data {\n        name\n        id\n        labels\n      }\n    }\n  }"}, {"type": "mutation", "name": "($thread: CmsThread, $id: ID!, $communityId: ID!)", "content": "{\n    own_appointments(_id: $_id, email: $email) {\n      id\n      date\n      startTime\n      morningOrEvening\n      endTime\n      duration\n      price\n      esthetician\n      treatments {\n        name\n        duration\n        price\n      }\n      addOns {\n        name\n        duration\n        price\n      }\n      client {\n        _id\n        squareCustomerId\n        unsavedSquareCardIDs\n        firstName\n        lastName\n        email\n        phoneNumber\n      }\n      bookedWithCardSquareID\n      notes\n      confirmed\n    }\n  }"}, {"type": "mutation", "name": "pauseRedshiftCluster($clusterUri: String!)", "content": "{\n  contact(id: $id) {\n    locations {\n      ...LocationBaseDetails\n      rawAddress\n    }\n  }\n}\n    ${LocationBaseDetailsFragmentDoc}"}, {"type": "query", "name": "getDiscussionBountyById($onchainBountyId: Int!)", "content": "{\n    hero(episode: $episode) {\n      ...HeroDetails\n    }\n  }\n  ${HeroDetailsFragmentDoc}"}, {"type": "mutation", "name": "", "content": "{\n    addonsConfigurationEvent(namespace: $namespace) {\n      type\n      addonsConfiguration {\n        ...AddonsConfiguration\n      }\n    }\n  }\n\n  ${ADDONS_CONFIGURATION_FRAGMENT}"}, {"type": "query", "name": "activeTagsFilters", "content": "{\n                  allArchivedBlogs {\n                    id\n                    title\n                    content\n                    userId\n                    archived\n                  }\n                }"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n  restaurants{\n    _id\n    name\n    image\n    orderPrefix\n    slug\n    address\n    deliveryTime\n    minimumOrder\n    isActive\n    commissionRate\n    tax\n    owner{\n      _id\n      email\n    }\n  }\n}"}, {"type": "mutation", "name": "ChangePassword($oldPassword:String!,$newPassword:String!)", "content": "{\n  config(appID: $appId, resolve: true) {\n    id: __typename\n    __typename\n    storage {\n      version\n    }\n  }\n}"}, {"type": "query", "name": "getJobs($page: Int!, $pageSize: Int!)", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "query", "name": "UserTransactions($id: ID!, $first: Int, $after: String)", "content": "{\n    updateUserPushToken(token: $token)\n  }"}, {"type": "mutation", "name": "WithdrawListing(\n    $listingID: String!\n    $target: String!\n    $reason: String\n    $from: String\n  )", "content": "{\n      removeDatasetContributor(datasetUri: $datasetUri, userName: $userName) {\n        datasetUri\n        label\n        userRoleForDataset\n      }\n    }"}, {"type": "query", "name": "aggSearch", "content": "{\n  cosmosGovernanceParametersDeposit(network: $network) {\n    min_deposit {\n      denom\n      amount\n    }\n    max_deposit_period\n  }\n}"}, {"type": "mutation", "name": "DeployIdentityViaProxy($from: String!, $owner: String!)", "content": "{\n  orders(offset:$offset){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    cancelledAt\n    assignedAt\n    deliveredAt\n    acceptedAt\n    pickedAt\n    preparationTime\n  }\n}"}, {"type": "mutation", "name": "clearNotification", "content": "{\n  addons{\n  _id\n  title\n  description\n  options{\n    _id\n    title\n    description\n    price\n  }\n  quantity_minimum\n  quantity_maximum\n}}"}, {"type": "query", "name": "Stats", "content": "{\n    addRoll(device: $device, dice: $dice) {\n      _id\n    }\n  }"}, {"type": "mutation", "name": "AddPaymentToOrder($input: PaymentInput!)", "content": "{\n        objs: allTicketClassifiers(where: {name_contains_i: $value, organization_is_null: true, parent_is_null: true}) {\n            id\n            name\n        }\n    }"}, {"type": "mutation", "name": "UpdateDice($diceId: ID!, $did: String!, $name: String!, $userId: String!, $actionIds: [String]!, $coverImg: String)", "content": "{\n      listSagemakerStudioUserProfiles(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          sagemakerStudioUserProfileUri\n          name\n          owner\n          description\n          label\n          created\n          tags\n          sagemakerStudioUserProfileStatus\n          userRoleForSagemakerStudioUserProfile\n          environment {\n            label\n            name\n            environmentUri\n            AwsAccountId\n            region\n            SamlGroupName\n          }\n          organization {\n            label\n            name\n            organizationUri\n          }\n          stack {\n            stack\n            status\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "removeAddonsConfigurationURLs(\n    $name: String!\n    $namespace: String!\n    $urls: [String!]!\n  )", "content": "{\n        getPostOwnerIAM(id: $id) {\n          id\n          title\n          owner\n        }\n      }"}, {"type": "mutation", "name": "", "content": "{\n    hero(episode: $episode) {\n      name\n      ... on Human {\n        height\n      }\n      ... on Droid {\n        primaryFunction\n      }\n    }\n  }"}, {"type": "query", "name": "exportTicketAnalyticsToExcel ($data: ExportTicketAnalyticsToExcelInput!)", "content": "{\n  configurations(namespace: $namespace, chatbotId: $chatbotId) {\n    id\n    namespace\n    payload\n  }\n}"}, {"type": "query", "name": "communityPosts($pagination: PaginationInputType!, $title: String!)", "content": "{\n    configuration{\n      _id\n      currency\n      currency_symbol\n      delivery_charges\n    }\n  }"}, {"type": "mutation", "name": "CreateZone($zone:ZoneInput!)", "content": "{\n  getActiveOrders(restaurantId:$restaurantId){\n    _id\n    zone{\n      _id\n    }\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      address\n      location{coordinates}\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n      details\n      label\n    }\n    items{\n      _id\n      title\n      description\n      image\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        description\n        title\n        quantityMinimum\n        quantityMaximum\n      }\n      specialInstructions\n      isActive\n      createdAt\n      updatedAt\n    }\n    user{\n      _id\n      name\n      phone\n      email\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    isPickedUp\n    status\n    paymentStatus\n    reason\n    isActive\n    createdAt\n    deliveryCharges\n    rider{\n      _id\n      name\n      username\n      available\n    }\n  }\n}"}, {"type": "query", "name": "getSagemakerNotebook($notebookUri: String!)", "content": "{\n    deployIdentity(\n      from: $from\n      attestations: $attestations\n      profile: $profile\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "createBackupSite($siteName: String!, $siteUrl: String!)", "content": "{\n    newRFP {\n      ...RFP_ATTRIBUTES\n    }\n  }\n  ${RFP_ATTRIBUTES}"}, {"type": "mutation", "name": "UpdateListing(\n    $listingID: ID!\n    $from: String!\n    $additionalDeposit: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n    createListing(\n      from: $from\n      version: $version\n      deposit: $deposit\n      depositManager: $depositManager\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeleteAddress($id:ID!)", "content": "{\n    banUser(input: $input)\n  }"}, {"type": "query", "name": "GetContactCommunicationChannels($id: ID!)", "content": "{\n    Post(where: { id: { _eq: $id } }) {\n      Likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      Likes(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "totalUsers", "content": "{\n    pagedPosts(filter: $filter) {\n      totalCount\n    }\n  }"}, {"type": "mutation", "name": "TransferToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n      syncDatasetTableColumns(tableUri: $tableUri) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          columnUri\n          name\n          description\n          typeName\n        }\n      }\n    }"}, {"type": "query", "name": "GetDataPipelineDag($DataPipelineUri: String!)", "content": "{\n    hero(episode: $episode) {\n      name @skip(if: $skipName)\n    }\n  }"}, {"type": "mutation", "name": "DisputeOffer($offerID: String, $from: String)", "content": "{\n    deployMarketplace(\n      from: $from\n      token: $token\n      version: $version\n      autoWhitelist: $autoWhitelist\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "archiveContact($id: ID!)", "content": "{\n    uniswapDeployExchangeTemplate(from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "GetJobById ($id: String)", "content": "{\n  chatbot(chatbotId: $chatbotId) {\n   \tid,\n    name,\n    description,\n    guid,\n    chatbotId,\n    plugins {\n      id,\n      plugin,\n      version,\n      filename\n    }\n  }\n}"}, {"type": "query", "name": "getExpandE($id: ID!, $class: String!, $io: String!, $rid: String!, $page: Int = 1, $size: Int = -1)", "content": "{\n      login (username: $username, password: $password) {\n        user {\n          id\n          username\n        }\n        tokens {\n          accessToken\n          accessTokenExpiration\n          refreshToken\n        }\n      }\n    }"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    acceptOffer(offerID: $offerID, from: $from)\n  }"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n  users(pagination: $pagination, where: $where) {\n    content {\n      id\n      firstName\n      lastName\n    }\n    totalElements\n  }\n}"}, {"type": "mutation", "name": "deleteChannel($channelId: ID!)", "content": "{\n        searchPosts {\n          items {\n            id\n            content\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "sendNotification(\n    $title: String!\n    $content: String!\n    $color: String!\n    $icon: String!\n    $instanceName: String!\n  )", "content": "{\n    createTask(listId: $listId, tasks: $tasks) {\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "mutation", "name": "subscribeToWebPush($subscription: WebPushSubscription!)", "content": "{\n      createUser(userInput:{\n          facebookId:$facebookId,\n          phone:$phone,\n          email:$email,\n          password:$password,\n          name:$name,\n          notificationToken:$notificationToken,\n          appleId:$appleId\n      }){\n          userId\n          token\n          tokenExpiration\n          name\n          email\n          phone\n          notificationToken\n      }\n    }"}, {"type": "mutation", "name": "AddAffiliate($from: String!, $affiliate: String!)", "content": "{\n    deletePost (input: { slug: $slug }) {\n      result\n    }\n  }"}, {"type": "subscription", "name": "", "content": "{\n        deleteRider(id:$id){\n          _id\n        }\n      }"}, {"type": "mutation", "name": "RemoveWorksheetShare($worksheetShareUri: String!)", "content": "{\n    availableRiders{\n      _id\n      name\n      username\n      phone\n      available\n      zone{\n        _id\n      }\n    }\n  }"}, {"type": "mutation", "name": "deleteServiceBindingUsage(\n    $serviceBindingUsageName: String!\n    $namespace: String!\n  )", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "query", "name": "countUpVotes($targetUri: String!, $targetType: String!)", "content": "{\n    members(where: { molochAddress: $contractAddr }) {\n      id\n      delegateKey\n      molochAddress\n      shares\n      memberAddress\n    }\n  }"}, {"type": "mutation", "name": "saveRestaurantToken($token:String, $isEnabled:Boolean)", "content": "{\n        updatePost(\n          input: { id: \"P1\", type: \"Post\", content: \"Content #1 - Update\", expectedVersion: 1 }\n          condition: { rating: { eq: 5 } }\n        ) {\n          id\n        }\n      }"}, {"type": "subscription", "name": "SubscribePlaceOrder($restaurant:String!)", "content": "{\n      updateDashboard(input: $input) {\n        dashboardUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "Refetch", "content": "{\n      shareDashboard(dashboardUri: $dashboardUri, principalId: $principalId) {\n        shareUri\n        status\n      }\n    }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n    getPartnerByMessagingKey(identity: $identity) {\n      name\n      address\n      role\n      identity\n      zkpPublicKey\n    }\n  }"}, {"type": "mutation", "name": "completeConfirmPhoneAction($data: CompleteConfirmPhoneActionInput!)", "content": "{\n        onCreateTodo(owner: \"${USERNAME2}\") {\n          id\n          name\n          description\n          level\n          owner\n          sharedOwners\n          status\n        }\n      }"}, {"type": "mutation", "name": "CreateDatasetTable(\n      $datasetUri: String\n      $input: NewDatasetTableInput\n    )", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "mutation", "name": "AddTaskOwners(\n    $taskID: ID!\n    $userOwners: [String!]\n    $userReviewers: [String!]\n    $teamOwners: [ID!]\n    $teamReviewers: [ID!]\n  )", "content": "{\n    isLoggedIn @client\n  }"}, {"type": "query", "name": "AllContracts", "content": "{\n  \t\t\t\tbackupRepos(site_id: $siteID) {\n    \t\t\t\tid\n    \t\t\t\tsite_id\n    \t\t\t\tprovider_id\n    \t\t\t\thash\n  \t\t\t\t}\n\t\t\t}"}, {"type": "query", "name": "InviteCode", "content": "{\n  updateStatus(id:$id,orderStatus:$orderStatus){\n    _id\n    orderStatus\n  }\n}"}, {"type": "query", "name": "SearchComments", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "query", "name": "Options", "content": "{\n                  createShort(\n                      short: { description: \"My short\", archived: false, ${ tags }},\n                      userId: \"123579\", \n                      vidString: \"${ vidFormat }\", \n                      thumbString: \"${ thumbFormat }\", \n                      ) {\n                          id,\n                          userId,\n                          description,\n                          link,\n                          thumbnail,\n                          datePosted,\n                          archived,\n                          user {\n                              id,\n                              email,\n                              name,\n                          },\n                          shortTag {\n                              shortId,\n                              tag\n                          }\n                      }\n              }"}, {"type": "query", "name": "serviceInstances($namespace: String!)", "content": "{\n    unsetCategory(categoryId: $categoryId, communityId: $communityId) {\n      id\n    }\n  }"}, {"type": "query", "name": "cosmosAccountHistory($address: String!, $fiat: String!)", "content": "{\n    serverSettingsUpdate {\n      globalRegistryAddress\n      orgRegistryAddress\n      organizationName\n      organizationRole\n      organizationAddress\n      organizationWhisperKey\n      rpcProvider\n    }\n  }"}, {"type": "subscription", "name": "techCommitteeProposalSubscription($startBlock: Int!)", "content": "{\n    updateEmployeeInvalidateTokens {\n      _id\n      firstName\n      lastName\n      email\n      phoneNumber\n      password\n      createdAt\n      tokenCount\n    }\n  }"}, {"type": "mutation", "name": "createBankAccountRequest ($data: CreateBankAccountRequestInput!)", "content": "{\n        dices {\n            _id\n            did,\n            name,\n            userId,\n            actionIds,\n            coverImg,\n            createdAt\n        }\n    }"}, {"type": "mutation", "name": "markNotificationAsRead($notificationUri: String!)", "content": "{\n    me {\n      _id\n      name\n      email\n    }\n    chat(_id: $id) {\n      _id\n      users {\n        _id\n        name\n        email\n      }\n      messages {\n        _id\n        user {\n          _id\n          name\n          email\n        }\n        message\n        createdAt\n      }\n    }\n  }"}, {"type": "mutation", "name": "addReferendumIdToMotionMutation($motionId: Int!, $referendumId: Int!)", "content": "{\n      getOrganization(organizationUri: $organizationUri) {\n        groups(filter: $filter) {\n          count\n          nodes {\n            groupUri\n            label\n            created\n            groupRoleInOrganization\n            userRoleInGroup\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "ForgotPassword($email:String!, $otp:String!)", "content": "{\n      getDatasetQualityRule(ruleUri: $ruleUri) {\n        ruleUri\n        name\n        label\n        description\n        created\n        query\n      }\n    }"}, {"type": "mutation", "name": "UpdateTopic($topicUri: String, $input: OrganizationTopicInput)", "content": "{\n        deletePost(input: { id: \"P5\", type: \"Post\", expectedVersion: 1 }, condition: { rating: { eq: 5 } }) {\n          id\n        }\n      }"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n    currentUser {\n      login\n    }\n    feed(type: $type, offset: $offset, limit: $limit) {\n      ...FeedEntry\n    }\n  }\n  ${FeedEntryFragmentDoc}"}, {"type": "mutation", "name": "AddFunds($offerID: String!, $amount: String!, $from: String)", "content": "{\n      countReadNotifications\n    }"}, {"type": "query", "name": "celoSystemBalances", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n      createDashboard(input: $input) {\n        dashboardUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "query", "name": "SearchPosts", "content": "{\n\t\tmeme_templates {\n\t\t\tid\n\t\t\ttitle\n\t\t\timage_link\n\t\t}\n\t}"}, {"type": "mutation", "name": "updateOrganizationEmail($organizationId: ID!, $input: EmailUpdateInput!)", "content": "{\n  __typename\n  insert_onchain_links(objects: {onchain_tech_committee_proposal_id: $onchainTechCommitteeProposalId, proposer_address: $proposerAddress, post: {data: {author_id: $authorId, content: $content, topic_id: $topicId, type_id: $typeId}}}) {\n    returning {\n      id\n    }\n  }\n}"}, {"type": "query", "name": "", "content": "{\n        motion (\n            where: {\n\t\t\t\tnode: {\n\t\t\t\t\tmotionStatus_some: {\n\t\t\t\t\t\tAND: [\n\t\t\t\t\t\t\t{ status: \"Proposed\" },\n\t\t\t\t\t\t\t{ blockNumber: { number_gte: $startBlock } }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        ){\n            mutation\n            node {\n                author\n                id\n                motionProposalId\n                motionStatus(orderBy: id_DESC) {\n                    blockNumber {\n                        number\n                    }\n                    status\n                }\n                preimage {\n                    hash\n                }\n                section\n                motionProposalArguments{\n                    name\n                    value\n                }\n            }\n        }\n    }"}, {"type": "query", "name": "ListDatasetShareObjects(\n      $datasetUri: String!\n      $filter: ShareObjectFilter\n    )", "content": "{\n        createPostPrivate(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "loginMutation($password: String!, $username: String!)", "content": "{\n  createRestaurant(restaurant:$restaurant,owner:$owner){\n    _id\n    orderId\n    orderPrefix\n    name\n    slug\n    image\n    address\n    username\n    password\n    minimumOrder\n    tax\n    location{coordinates}\n  }\n}"}, {"type": "mutation", "name": "UpdateEnvironment(\n      $environmentUri: String!\n      $input: ModifyEnvironmentInput\n    )", "content": "{\n  getBackupPresignedUrl: getBackupPresignedURL(\n    appID: $appId\n    backupID: $backupId\n    expireInMinutes: $expireInMinutes\n  ) {\n    url\n    expiresAt: expires_at\n  }\n}"}, {"type": "query", "name": "getPost($post: String!)", "content": "{\n    verifyAirbnbCode(identity: $identity, airbnbUserId: $airbnbUserId) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n        getPostPublic(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "changeEmail($email: String!, $password: String!)", "content": "{\n    deleteEventDefinition(id: $id) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n  editAddress(addressInput:$addressInput){\n    _id\n    addresses{\n      _id\n      label\n      deliveryAddress\n      details\n      location{coordinates}\n      selected\n    }\n  }\n}"}, {"type": "query", "name": "", "content": "{\n  organizations(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      id\n      name\n      industry\n      locations {\n        ...LocationBaseDetails\n      }\n      subsidiaryOf {\n        type\n        organization {\n          name\n        }\n      }\n    }\n    totalElements\n    totalPages\n  }\n}\n    ${LocationBaseDetailsFragmentDoc}"}, {"type": "query", "name": "($name: String!)", "content": "{\n    me {\n      id\n      email\n      trips {\n        ...LaunchTile\n      }\n    }\n  }\n  ${LAUNCH_TILE_DATA}"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n    messaging(id: \"defaultAccount\") {\n      decryptShippingAddress(encrypted: $encrypted) {\n        name\n        address1\n        address2\n        city\n        stateProvinceRegion\n        postalCode\n        country\n        instructions\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n    msaByProposal(proposalId: $proposalId) {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${MSA_ATTRIBUTES}"}, {"type": "query", "name": "LoggedInUserQuery", "content": "{\n  sections{\n    _id\n    name\n    enabled\n    restaurants{\n      _id\n      name\n    }\n  }\n}"}, {"type": "query", "name": "GetDatasetAssumeRoleUrl($datasetUri: String!)", "content": "{\n    searchCompanies(text: $text, companyId: $companyId) {\n      users {\n        id\n        fullName\n        profileUrl\n        companies {\n          id\n          name\n          logoUrl\n        }\n      }\n      companies {\n        id\n        name\n        logoUrl\n      }\n    }\n  }"}, {"type": "mutation", "name": "setCredentialsConfirm($address: String!, $email: String, $signature: String!, $username: String!, $password: String!)", "content": "{\n  insertAuthUserRoles(objects: $roles) {\n    affected_rows\n  }\n}"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n    identityEvents {\n      attestationProviders\n    }\n  }"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n        onCreatePost {\n          id\n          title\n          postOwner\n        }\n      }"}, {"type": "mutation", "name": "EditRider($riderInput:RiderInput!)", "content": "{\n\t\t\t\tbackupSites(uuid: $repoID) {\n\t\t\t\t\tid\n\t\t\t\t\tuuid\n\t\t\t\t\tpassword\n\t\t\t\t}\n\t\t\t}"}, {"type": "mutation", "name": "DeleteIdentity($uuid: String!)", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "mutation", "name": "GenerateDatasetAccessToken($datasetUri: String!)", "content": "{\n    createSubscription(name: $name, namespace: $namespace, params: $params) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "saveRestaurantToken($token:String, $isEnabled:Boolean)", "content": "{\n    createCompany(name: $name) {\n      company {\n        name\n      }\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "query", "name": "($offset: Int, $limit: Int, $order: String, $namespace: String)", "content": "{\n      importAirflowCluster(\n        environmentUri: $environmentUri\n        clusterInput: $clusterInput\n      ) {\n        clusterUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "query", "name": "getBuckets", "content": "{\n  posts(\n    limit: $limit\n    where: {type: {id: {_eq: $postType}}, topic: {id: {_eq: $postTopic}}, onchain_link: {onchain_treasury_proposal_id: {_is_null: false}}}\n    order_by: {onchain_link: {onchain_treasury_proposal_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_treasury_proposal_id\n      onchain_treasury_spend_proposal(where: {}) {\n        id\n        treasuryStatus(last: 1) {\n          id\n          status\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "SearchPosts", "content": "{\n  app(id: $id) {\n    id\n    metadataFunctions\n  }\n}"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n  subscription(post_id: $postId) {\n    subscribed\n  }\n}"}, {"type": "mutation", "name": "UpdateStatus($id:String!,$orderStatus:String!)", "content": "{\n    enroll(\n      agreementMessage: $agreementMessage\n      inviteCode: $inviteCode\n      fingerprintData: $fingerprintData\n    ) {\n      authToken\n      isBanned\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n          organization(id: $id) {\n            id\n            name\n            issueSummaryByStatus {\n              status\n              count\n            }\n            externalLinks {\n              type\n              externalId\n              externalUrl\n            }\n          }\n        }"}, {"type": "mutation", "name": "DisputeOffer($offerID: String, $from: String)", "content": "{\n    importWallet(role: $role, name: $name, privateKey: $privateKey) {\n      id\n      role\n      name\n    }\n  }"}, {"type": "query", "name": "GetUserRoleInTenant", "content": "{\n        __typename\n        insert_poll_votes_one(object: {poll_id: $pollId, user_id: $userId, vote: $vote}) {\n            id\n        }\n    }"}, {"type": "query", "name": "Namespace($name: String!)", "content": "{\n        result: changePhoneNumberResidentUser(data: $data) { status }\n    }"}, {"type": "query", "name": "AssignedOrders($id:String)", "content": "{\n\t\tmemes_aggregate(limit: $limit, offset: $offset) {\n\t\t\tnodes {\n\t\t\t\tid\n\t\t\t\tdownloads\n\t\t\t\tlikes\n\t\t\t\tviews\n\t\t\t\timage_link\n\t\t\t\tcategory\n\t\t\t\ttitle\n\t\t\t}\n\t\t}\n\t}"}, {"type": "subscription", "name": "OnDeleteMember", "content": "{\n    walletUpdate {\n      primaryAccount {\n        id\n      }\n    }\n  }"}, {"type": "mutation", "name": "AssignOrder($id:String!)", "content": "{\n  sendChatMessage(message: $messageInput, orderId: $orderId) {\n    success\n    message\n    data {\n      id\n      message\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n}"}, {"type": "query", "name": "GrowthEligibility", "content": "{\n  updateApp(pk_columns: {id: $appId}, _set: {desiredState: 6}) {\n    id\n  }\n}"}, {"type": "query", "name": "OrderPaypal($id:String!)", "content": "{\n    tags(filter: $filter) {\n      totalCount\n    }\n  }"}, {"type": "subscription", "name": "SubscriptionOrder($id:String!)", "content": "{\n    unlock(uuid: $uuid) {\n      uuid\n      individual {\n        isLocked\n      }\n    }\n  }"}, {"type": "mutation", "name": "requestDashboardShare(\n      $dashboardUri: String!\n      $principalId: String!\n    )", "content": "{\n      createGroup(input: $input) {\n        groupUri\n        label\n        groupRoleInOrganization\n        created\n        userRoleInGroup\n      }\n    }"}, {"type": "mutation", "name": "AssignRider($id:String!,$riderId:String!)", "content": "{\n      deleteAirflowCluster(clusterUri: $clusterUri)\n    }"}, {"type": "mutation", "name": "", "content": "{\n  subscriptionRiderLocation(riderId:$riderId) {\n    _id\n    location {\n      latitude\n      longitude\n    }\n  }\n}"}, {"type": "mutation", "name": "", "content": "{\n  cosmosTransactions(address: $address, startingPage: $startingPage, pageSize: $pageSize) {\n    page\n    limit\n    data {\n      hash\n      height\n      log {\n        code\n        message\n        success\n        log\n        msg_index\n      }\n      gaswanted\n      gasused\n      memo\n      fees {\n        amount {\n          denom\n          amount\n        }\n        gas\n      }\n      tags {\n        key\n        value\n      }\n      msgs {\n        type\n        value {\n          ... on MsgSend {\n            amounts {\n              denom\n              amount\n            }\n            to_address\n            from_address\n          }\n          ... on MsgVote {\n            proposal_id\n            voter\n            option\n          }\n          ... on MsgDelegate {\n            amount {\n              denom\n              amount\n            }\n            delegator_address\n            validator_address\n          }\n          ... on MsgSubmitProposal {\n            title\n            description\n            proposal_type\n            proposer\n            initial_deposit {\n              denom\n              amount\n            }\n          }\n          ... on MsgBeginRedelegate {\n            amount {\n              denom\n              amount\n            }\n            delegator_address\n            validator_src_address\n            validator_dst_address\n          }\n          ... on MsgModifyWithdrawAddress {\n            withdraw_address\n            validator_address\n          }\n          ... on MsgBeginRedelegateLegacy {\n            shares_amount\n            delegator_address\n            validator_src_address\n            validator_dst_address\n          }\n          ... on MsgWithdrawDelegationReward {\n            delegator_address\n            validator_address\n          }\n          ... on MsgParameterChangeProposal {\n            content {\n              type\n              value {\n                title\n                description\n              }\n            }\n            proposer\n            initial_deposit {\n              denom\n              amount\n            }\n          }\n          ... on MsgWithdrawValidatorCommission {\n            validator_address\n          }\n        }\n      }\n      timestamp\n      chain\n      events {\n        type\n        attributes {\n          key\n          value\n        }\n      }\n    }\n    moreResultsExist\n  }\n}"}, {"type": "query", "name": "AllContracts", "content": "{\n        result: sendMessage(data: $data) { status id isDuplicateMessage }\n    }"}, {"type": "mutation", "name": "VerifyPromotion(\n    $identity: String!\n    $identityProxy: String\n    $type: String\n    $socialNetwork: String\n    $content: String\n  )", "content": "{\n  deployments(\n    where: {deploymentStatus: {_eq: \"DEPLOYED\"}, appId: {_eq: $appId}}\n    order_by: {deploymentStartedAt: desc}\n    limit: 1\n    offset: 0\n  ) {\n    ...DeploymentRow\n  }\n}\n    ${DeploymentRowFragmentDoc}"}, {"type": "mutation", "name": "SendOtpToEmail($email: String!, $otp: String!)", "content": "{\n    removePartner(input: $input) {\n      partner {\n        name\n        address\n        role\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{MODELS}($where: ${MODEL}WhereInput, $first: Int = ${DEFAULT_PAGE_SIZE}, $skip: Int, $sortBy: [Sort${MODELS}By!]) {\n            objs: all${MODELS}(where: $where, first: $first, skip: $skip, sortBy: $sortBy) ${fields}\n            meta: _all${MODELS}Meta(where: $where) { count }\n        }"}, {"type": "query", "name": "GetDataset(\n      $datasetUri: String!\n      $filter: DatasetStorageLocationFilter\n    )", "content": "{\n    transferToken(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeleteOptionPollVote ($optionPollId: Int!, $userId: Int!)", "content": "{\n    sendWebRTCMessage(_id: $id, callID: $callID, message: $message, type: $type) {\n      message\n    }\n  }"}, {"type": "mutation", "name": "DeleteZone($id:String!)", "content": "{\n          onCreatePost(postOwner: \"${USERNAME1}\") {\n              id\n              title\n              postOwner\n          }\n      }"}, {"type": "mutation", "name": "startConfirmPhoneAction($data: StartConfirmPhoneActionInput!)", "content": "{\n    events {\n      event(findBy: { id: $eventId }) {\n        get {\n          id\n          name\n          slogan\n          startDate\n          endDate\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "Login($email:String,$password:String,$type:String!,$appleId:String,$name:String,$notificationToken:String)", "content": "{\n        result: createOnBoardingByType(data: $data) {\n            id\n        }\n    }"}, {"type": "mutation", "name": "deactivated($isActive: Boolean!, $email: String!)", "content": "{\n      linkTerm(\n        nodeUri: $nodeUri\n        targetUri: $targetUri\n        targetType: $targetType\n      ) {\n        linkUri\n        created\n      }\n    }"}, {"type": "query", "name": "getCurrentUserCommunityConnection", "content": "{\n      getAllWithdrawRequests(offset:$offset){\n          success\n          message\n          data{\n            _id\n            requestId\n            requestAmount\n            requestTime\n            rider{\n              _id\n              name\n              currentWalletAmount\n            }\n            status\n          }\n          pagination{\n            total\n          }\n      }\n  }"}, {"type": "mutation", "name": "($thread: String!, $id: ID!, $tagId: ID!, $communityId: ID!)", "content": "{\n    hero(episode: $episode) {\n      name\n      ... on Human {\n        friends {\n          name\n          ... on Human {\n            height(unit: FOOT)\n          }\n        }\n      }\n      ... on Droid {\n        friends {\n          name\n          ... on Human {\n            height(unit: METER)\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "manageMergeRecommendation($recommendationId: Int!, $apply: Boolean)", "content": "{\n    hero(episode: $episode) {\n      ... on Human {\n        property: homePlanet\n      }\n      ... on Droid {\n        property: primaryFunction\n      }\n    }\n  }"}, {"type": "mutation", "name": "noteLinkAttachment($noteId: ID!, $attachmentId: ID!)", "content": "{\n                blogById(blogId: \"${this.blogId}\") {\n                  title\n                  content\n                }\n              }"}, {"type": "query", "name": "recommendedMerge($page: Int, $pageSize: Int)", "content": "{\n    zones{\n    _id\n    title\n    description\n    location{coordinates}\n    isActive\n    }\n}"}, {"type": "mutation", "name": "CreateWithdrawRequest($amount: Float!)", "content": "{\n  assignOrder(id:$id){\n    _id\n    orderStatus\n    rider{\n      _id\n      name\n      username\n    }\n  }\n}"}, {"type": "query", "name": "($commentId: ID!)", "content": "{\n      createDatasetQualityRule(datasetUri: $datasetUri, input: $input) {\n        ruleUri\n        name\n        label\n        description\n        created\n        query\n      }\n    }"}, {"type": "query", "name": "getShareRequestsToMe($filter: ShareObjectFilter)", "content": "{\n  configuration{\n    _id\n    currency\n    currencySymbol\n    deliveryRate\n  }\n}"}, {"type": "mutation", "name": "", "content": "{\n      getDatasetTable(tableUri: $tableUri) {\n        dataset {\n          datasetUri\n          name\n          userRoleForDataset\n          region\n          SamlAdminGroupName\n          owner\n          organization {\n            label\n          }\n          environment {\n            label\n            region\n            subscriptionsEnabled\n            subscriptionsProducersTopicImported\n            subscriptionsConsumersTopicImported\n            subscriptionsConsumersTopicName\n            subscriptionsProducersTopicName\n          }\n        }\n        datasetUri\n        owner\n        description\n        created\n        tags\n        tableUri\n        AwsAccountId\n        GlueTableName\n        GlueDatabaseName\n        LastGlueTableStatus\n        label\n        name\n        S3Prefix\n        GlueTableProperties\n        terms {\n          count\n          nodes {\n            nodeUri\n            path\n            label\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "SavePaypalConfiguration($configurationInput:PaypalConfigurationInput!)", "content": "{\n  organization(id: $id) {\n    subsidiaries {\n      organization {\n        name\n        id\n      }\n    }\n  }\n}"}, {"type": "subscription", "name": "", "content": "{\n    identitiesImportersTypes {\n      name\n      args\n    }\n  }"}, {"type": "query", "name": "cosmosValidatorSets($network: String!)", "content": "{\n    applications(filter: $filter) {\n      data {\n        name\n        id\n        labels\n        packages {\n          totalCount\n        }\n      }\n      totalCount\n    }\n  }"}, {"type": "mutation", "name": "insertWorkspaceMemberInvite($workspaceMemberInvite: workspaceMemberInvites_insert_input!)", "content": "{\n    verifyOAuthAttestation(\n      provider: $provider\n      identity: $identity\n      authUrl: $authUrl\n      redirect: $redirect\n      code: $code\n    ) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n  cosmosTransaction(hash: $hash, network: $network) {\n    hash\n    height\n    log {\n      code\n      message\n      success\n      log\n      msg_index\n    }\n    gaswanted\n    gasused\n    memo\n    fees {\n      amount {\n        denom\n        amount\n      }\n      gas\n    }\n    tags {\n      key\n      value\n    }\n    msgs {\n      type\n      value {\n        ... on MsgSend {\n          amounts {\n            denom\n            amount\n          }\n          to_address\n          from_address\n        }\n        ... on MsgVote {\n          proposal_id\n          voter\n          option\n        }\n        ... on MsgDelegate {\n          amount {\n            denom\n            amount\n          }\n          delegator_address\n          validator_address\n        }\n        ... on MsgSubmitProposal {\n          title\n          description\n          proposal_type\n          proposer\n          initial_deposit {\n            denom\n            amount\n          }\n        }\n        ... on MsgBeginRedelegate {\n          amount {\n            denom\n            amount\n          }\n          delegator_address\n          validator_src_address\n          validator_dst_address\n        }\n        ... on MsgModifyWithdrawAddress {\n          withdraw_address\n          validator_address\n        }\n        ... on MsgBeginRedelegateLegacy {\n          shares_amount\n          delegator_address\n          validator_src_address\n          validator_dst_address\n        }\n        ... on MsgWithdrawDelegationReward {\n          delegator_address\n          validator_address\n        }\n        ... on MsgParameterChangeProposal {\n          content {\n            type\n            value {\n              title\n              description\n            }\n          }\n          proposer\n          initial_deposit {\n            denom\n            amount\n          }\n        }\n        ... on MsgWithdrawValidatorCommission {\n          validator_address\n        }\n      }\n    }\n    timestamp\n    chain\n    events {\n      type\n      attributes {\n        key\n        value\n      }\n    }\n  }\n}"}, {"type": "query", "name": "GetIndividuals(\n    $page: Int!\n    $pageSize: Int!\n    $filters: IdentityFilterType\n    $orderBy: String\n  )", "content": "{\n        result: resendConfirmPhoneActionSms(data: $data) { status }\n    }"}, {"type": "mutation", "name": "Login($email:String,$password:String,$type:String!,$appleId:String,$name:String,$notificationToken:String)", "content": "{\n        posts(where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_tip_id: {\n                    _in: $onchainTipIds\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_tip_id\n                onchain_tip(where: {}) {\n                    id\n                    reason\n                    tipStatus(last: 1) {\n                        id\n                        status\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n${authorFields}"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n      deleteGlossary(nodeUri: $nodeUri)\n    }"}, {"type": "mutation", "name": "CreateReviewForEpisode($episode: Episode!, $review: ReviewInput!)", "content": "{\n    getMediaMessagesForThread(threadId: $threadId) {\n      id\n      content {\n        body\n      }\n    }\n  }"}, {"type": "mutation", "name": "deleteServiceBindingUsages(\n    $serviceBindingUsageNames: [String!]!\n    $namespace: String!\n  )", "content": "{\n    user(id: $id) {\n      ...userInfo\n    }\n  }\n  ${userInfoFragment}"}, {"type": "mutation", "name": "DeleteSecret($appId: uuid!, $name: String!)", "content": "{\n  organization_Delete(id: $id) {\n    result\n  }\n}"}, {"type": "mutation", "name": "CreateWallet($role: String, $name: String)", "content": "{\n    me {\n      _id\n    }\n  }"}, {"type": "query", "name": "test", "content": "{\n              onCreateTodo(\n                owner: \"${USERNAME1}\",\n              ) {\n                id\n                name\n                owner\n              }\n            }"}, {"type": "query", "name": "Restaurants", "content": "{\n    functions(namespace: $namespace) {\n      name\n      namespace\n      labels\n      runtime\n      size\n      status\n      serviceBindingUsages {\n        name\n      }\n    }\n  }"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n      pauseRedshiftCluster(clusterUri: $clusterUri)\n    }"}, {"type": "query", "name": "moloches($skip: Int)", "content": "{\n  organization_Update(input: $input) {\n    id\n    website\n  }\n}"}, {"type": "query", "name": "Services($namespace: String!, $excludedLabels: [String!])", "content": "{\n    updateTokenAllowance(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "($id: Int!, $admin: InputAdmin!)", "content": "{\n    acceptOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n      createPostSecretFieldIAM(input: { title: \"Hello, World!\", secret: \"42\" }) {\n        id\n        title\n        secret\n      }\n    }"}, {"type": "mutation", "name": "DeletePostReaction($postId: Int!, $userId: Int!, $reaction: bpchar!)", "content": "{\n      countUnreadNotifications\n    }"}, {"type": "query", "name": "(\n    $_id: ID\n    $squareCustomerId: String\n    $firstName: String\n    $lastName: String\n    $email: String\n    $phoneNumber: String\n    $createdAt: String\n  )", "content": "{\n      shop {\n        name\n        description\n        primaryDomain {\n          url\n          host\n        }\n        paymentSettings {\n          currencyCode\n        }\n      }\n      productTypes(first: 250) {\n        edges {\n          node\n        }\n      }\n    }"}, {"type": "query", "name": "FetchCommissions", "content": "{\n  riderLogin(username:$username,password:$password,notificationToken:$notificationToken){\n    userId\n    token\n  }\n}"}, {"type": "query", "name": "($slug: String!)", "content": "{\n    publishChats(revision: $revision) {\n      data {\n        id\n        chats\n        time\n        user\n      }\n    }\n  }"}, {"type": "query", "name": "Restaurant($id:String)", "content": "{\n    createRFP(input: $input) {\n      ...RFP_ATTRIBUTES\n    }\n  }\n  ${RFP_ATTRIBUTES}"}, {"type": "mutation", "name": "WithdrawOffer($offerID: String!, $from: String)", "content": "{\n      startDatasetProfilingRun(input: $input) {\n        profilingRunUri\n      }\n    }"}, {"type": "mutation", "name": "updateJobRole($contactId: ID!, $input: JobRoleUpdateInput!)", "content": "{\n    me {\n      id\n      name\n    }\n  }"}, {"type": "query", "name": "TreasuryProposalPostAndComments($id: Int!)", "content": "{\n    signMessage(address: $address, message: $message)\n  }"}, {"type": "query", "name": "GetContactNameByEmail($email: String!)", "content": "{\n        createPostPrivate(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "Coupon($coupon:String!)", "content": "{\n  __typename\n  insert_onchain_links(objects: {onchain_bounty_id: $onchainBountyId, proposer_address: $proposerAddress, post: {data: {author_id: $authorId, content: $content, topic_id: $topicId, type_id: $typeId}}}) {\n    returning {\n      id\n    }\n  }\n}"}, {"type": "query", "name": "traceList(\n    $graphId: ID!\n    $operationId: ID!\n    $after: String\n    $orderBy: TraceOrderBy\n    $to: DateTime\n    $from: DateTime\n    $traceFilters: [TraceFilter]\n  )", "content": "{\n  rider(id:$id){\n    _id\n    location {\n      latitude\n      longitude\n    }\n  }\n}"}, {"type": "query", "name": "loadMoreDirectMessageThreads($after: String)", "content": "{\n      listAssetLinkedTerms(uri: $uri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          linkUri\n          nodeUri\n          owner\n          created\n          approvedByOwner\n          approvedBySteward\n          term {\n            label\n            readme\n            created\n            owner\n            glossary {\n              label\n              nodeUri\n            }\n            path\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "DeployMarketplace(\n    $from: String\n    $token: String\n    $version: String\n    $autoWhitelist: Boolean\n  )", "content": "{\n  subscriptionRiderLocation(riderId:$riderId) {\n    _id\n    location {coordinates}\n  }\n}"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n      deleteTodo(input: $input) {\n        id\n        name\n        description\n        level\n        owner\n        sharedOwners\n        status\n      }\n    }"}, {"type": "query", "name": "MyFeed", "content": "{\n    updateGitRepository(namespace: $namespace, name: $name, spec: $spec) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "CreateReviewForEpisode($episode: Episode!, $review: ReviewInput!)", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            topic: {\n                id: {\n                    _eq: $postTopic\n                }\n            },\n            onchain_link: {\n                onchain_treasury_proposal_id: {\n                    _is_null: false\n                },\n                onchain_motion_id: {\n                    _is_null: true\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_treasury_proposal_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_treasury_proposal_id\n                onchain_treasury_spend_proposal(where: {}) {\n                    id\n                    treasuryStatus(last: 1) {\n                        id\n                        status\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n${authorFields}"}, {"type": "query", "name": "cosmosDistributionParameters($network: String!)", "content": "{\n    getPostVote(post: $post) {\n      vote\n      voted\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n            notification @client {\n              title\n              content\n              color\n              icon\n              visible\n            }\n          }"}, {"type": "query", "name": "getPartnerByLevel($eventId: ID!, $level: PartnershipLevel!)", "content": "{\n    transferToken(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "query", "name": "accountQuery(\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n    web3 {\n      networkId\n      networkName\n    }\n  }"}, {"type": "mutation", "name": "SetNetwork($network: String, $customConfig: ConfigInput)", "content": "{\n\t\tsetCredentialsConfirm(address: $address, email: $email, signature: $signature, username: $username, password: $password) {\n\t\t\tmessage\n\t\t\ttoken\n\t\t}\n\t}"}, {"type": "mutation", "name": "TransferToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    foodByCategory(category:$category,onSale:$onSale,inStock:$inStock,min:$min,max:$max,search:$search){\n      _id\n      title\n      description\n      variations{\n        _id\n        title\n        price\n        discounted\n        addons{\n          _id\n          title\n          description\n          quantity_minimum\n          quantity_maximum\n          options{\n            _id\n            title\n            description\n            price\n          }\n        }\n      }\n      category{_id}\n      img_url\n      stock\n    }\n  }"}, {"type": "mutation", "name": "updateAddonsConfiguration(\n    $name: String!\n    $namespace: String!\n    $urls: [String!]!\n    $labels: Labels\n  )", "content": "{\n    clearNotification @client\n  }"}, {"type": "query", "name": "CommentReactions ($commentId: uuid!)", "content": "{\n    books {\n      id\n      title\n    }\n  }"}, {"type": "query", "name": "getMessageById($id: ID!)", "content": "{\n    rpm(\n      graphId: $graphId\n      operationId: $operationId\n      to: $to\n      from: $from\n      traceFilters: $traceFilters\n    ) {\n      nodes {\n        startTime\n        count\n        errorCount\n      }\n      cursor\n    }\n  }"}, {"type": "mutation", "name": "deleteTasks($taskIds: [ID!]!)", "content": "{\n        feed {\n          id\n          commentCount\n          repository {\n            full_name\n            html_url\n            owner {\n              avatar_url\n            }\n          }\n        }\n      }"}, {"type": "query", "name": "GetPlans($where: plans_bool_exp)", "content": "{\n                result: ${mutationAction}Company(input: {\n                  ${payload.companyId ?"}, {"type": "mutation", "name": "ExecuteRulingMutation(\n    $offerID: String!\n    $ruling: String!\n    $commission: String!\n    $message: String\n    $refund: String\n    $from: String\n  )", "content": "{\n      deleteNetwork(vpcUri: $vpcUri)\n    }"}, {"type": "query", "name": "($commentId: ID!)", "content": "{\n    launches(after: $after) {\n      cursor\n      hasMore\n      launches {\n        ...LaunchTile\n      }\n    }\n  }\n  ${LAUNCH_TILE_DATA}"}, {"type": "query", "name": "", "content": "{\n    sendResetPasswordInstructions(email: $email) {\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "query", "name": "Rider($id:String)", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "query", "name": "DiscussionPostsIdAsc($limit: Int! = 20)", "content": "{\n    setApplicationLabel(\n      applicationID: $id\n      key: \"scenarios\"\n      value: $scenarios\n    ) {\n      key\n      value\n    }\n  }"}, {"type": "query", "name": "activeServiceClassFilters", "content": "{\n      getAllWithdrawRequests(offset:$offset){\n          success\n          message\n          data{\n            _id\n            requestId\n            requestAmount\n            requestTime\n            rider{\n              _id\n              name\n              currentWalletAmount\n            }\n            status\n          }\n          pagination{\n            total\n          }\n      }\n  }"}, {"type": "mutation", "name": "UpdateOrderStatus($id:String!,$status:String!,$reason:String)", "content": "{\n    markConversationRead(id: $id) {\n      success\n      messagesRead\n    }\n  }"}, {"type": "query", "name": "getExecutedMotionsWithPreimageHash($preimageHash: String!, $blockNumber: Int!)", "content": "{\n\t\tchangeNotificationPreference(\n\t\t\tnotificationPreferences: {\n\t\t\t\tpostParticipated: $postParticipated,\n\t\t\t\tpostCreated: $postCreated,\n\t\t\t\tnewProposal: $newProposal,\n\t\t\t\townProposal: $ownProposal\n\t\t\t}\n\t\t) {\n            message\n            token\n\t\t}\n\t}"}, {"type": "query", "name": "Shop($id: Int!)", "content": "{\n        result: _allPaymentsSum(where: $where) { sum }\n    }"}, {"type": "query", "name": "($postId: ID!)", "content": "{\n      getGlossary(nodeUri: $nodeUri) {\n        nodeUri\n        label\n        readme\n        created\n        owner\n        status\n        path\n        admin\n        userRoleForGlossary\n        associations(filter: $filter) {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            linkUri\n            targetUri\n            approvedBySteward\n            term {\n              label\n              nodeUri\n            }\n            targetType\n            target {\n              __typename\n              ... on Dataset {\n                datasetUri\n                name\n                label\n              }\n              ... on DatasetTable {\n                tableUri\n                name\n                label\n              }\n              ... on DatasetStorageLocation {\n                locationUri\n                name\n                label\n              }\n              ... on Dashboard {\n                dashboardUri\n                name\n                label\n              }\n            }\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "countUnreadNotifications", "content": "{\n    recommendedMerge {\n      pageInfo {\n        totalResults\n      }\n    }\n  }"}, {"type": "query", "name": "GetCrawlerStatus($datasetUri:String, name:String)", "content": "{\n    inviteInfo(code: $code) {\n      firstName\n      lastName\n      avatarURL\n    }\n  }"}, {"type": "query", "name": "getDatasetStorageLocation($locationUri: String!)", "content": "{\n    hero(episode: $episode) {\n      name\n    }\n  }"}, {"type": "query", "name": "UserNotifications($id: ID!, $first: Int, $after: String)", "content": "{\n    thread(id: $id) {\n      ...threadInfo\n    }\n  }\n  ${threadInfoFragment}"}, {"type": "query", "name": "GetSearchE($id: ID!, $rid: String!)", "content": "{\n        delete_comments(where: {id: {_eq: $id}}) {\n            affected_rows\n        }\n    }"}, {"type": "query", "name": "Shops($country: String, $name: String, $reverse: Boolean)", "content": "{\n    scenarios: labelDefinition(key: \"scenarios\") {\n      schema\n    }\n  }"}, {"type": "query", "name": "SearchComments", "content": "{\n      createTaskGroup(input: $input) {\n        id\n        title\n        description\n        priority\n        severity\n        groups\n        singleGroup\n      }\n    }"}, {"type": "query", "name": "contact($id: ID!)", "content": "{\n    createVendor(vendorInput:$vendorInput){\n      _id\n      email\n      userType\n    }\n}"}, {"type": "query", "name": "GetNotification", "content": "{\n    updateClientInformation(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      phoneNumber: $phoneNumber\n      password: $password\n    ) {\n      firstName\n      lastName\n      email\n      phoneNumber\n      password\n    }\n  }"}, {"type": "query", "name": "rfp($sku: String!)", "content": "{\n        councils(last: 1){\n            members {\n                id\n                address\n            }\n        }\n  }"}, {"type": "query", "name": "SearchPosts($term:String!)", "content": "{\n    updateLabelDefinition(in: $in) {\n      key\n      schema\n    }\n  }"}, {"type": "query", "name": "GetDatasetETLCredentials($datasetUri: String!)", "content": "{\n    createThread(title: $title, raw: $raw) {\n      title\n    }\n  }"}, {"type": "query", "name": "Orders", "content": "{\n      deleteShareObject(shareUri: $shareUri)\n    }"}, {"type": "mutation", "name": "($communityId: ID!, $threadId: ID!)", "content": "{\n        getPostPublic(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "$", "content": "{\n      createUser(userInput:{\n          phone:$phone,\n          email:$email,\n          password:$password,\n          name:$name,\n          notificationToken:$notificationToken,\n          appleId:$appleId\n      }){\n          userId\n          token\n          tokenExpiration\n          name\n          email\n          phone\n      }\n    }"}, {"type": "mutation", "name": "UpdateListing(\n    $listingID: ID!\n    $from: String!\n    $additionalDeposit: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "UpdateLabelDefinition($in: LabelDefinitionInput!)", "content": "{\n  restaurantByOwner(id:$id){\n  _id\n  email\n  userType\n  restaurants{\n    _id\n    orderId\n    orderPrefix\n    name\n    slug\n    image\n    address\n    username\n    password\n    location{coordinates}\n    }\n  }\n}"}, {"type": "mutation", "name": "($thread: CmsThread, $id: ID!)", "content": "{\n        result: getAccessTokenByUserId(data: $data) { accessToken, ttl }\n    }"}, {"type": "mutation", "name": "CreateAddress($addressInput:AddressInput!)", "content": "{\n      deleteNetwork(vpcUri: $vpcUri)\n    }"}, {"type": "query", "name": "getServiceClassPlans($name: String!, $namespace: String!)", "content": "{\n\t\tsongs {\n\t\t\tid\n\t\t\ttitle\n\t\t\tevents{\n\t\t\t\tactiveNotes\n\t\t\t\tduration\n\t\t\t}\n\t\t}\n\t}"}, {"type": "query", "name": "listDataItemsSharedWithEnvGroup(\n      $filter: EnvironmentDataItemFilter\n      $environmentUri: String\n      $groupUri: String\n    )", "content": "{\n    synthesizeSsml(ssml: $ssml, voice: $voice) {\n      url\n    }\n  }"}, {"type": "mutation", "name": "deleteCurrentUser", "content": "{\n    updateConsentForm(\n      date: $date\n      surgeryLast3Months: $surgeryLast3Months\n      surgeryLast3MonthsNotes: $surgeryLast3MonthsNotes\n      anyHealthProblems: $anyHealthProblems\n      anyHealthProblemsNotes: $anyHealthProblemsNotes\n      listAnyMedications: $listAnyMedications\n      chemPeelsLastMonth: $chemPeelsLastMonth\n      waxingOnFaceLast5Days: $waxingOnFaceLast5Days\n      accutaneOrPrescription: $accutaneOrPrescription\n      accutaneOrPrescriptionNotes: $accutaneOrPrescriptionNotes\n      anyProductsContainingSalicyclicAcid: $anyProductsContainingSalicyclicAcid\n      anyProductsContainingGlycolicAcid: $anyProductsContainingGlycolicAcid\n      anyProductsContainingLacticAcid: $anyProductsContainingLacticAcid\n      anyProductsContainingExfoliatingScrubs: $anyProductsContainingExfoliatingScrubs\n      anyProductsContainingVitaminA: $anyProductsContainingVitaminA\n      fillersOrBotox: $fillersOrBotox\n      fillersOrBotoxNotes: $fillersOrBotoxNotes\n      listKnownAllergies: $listKnownAllergies\n      skinFlakyOrItch: $skinFlakyOrItch\n      everDiagnosedWithRosacea: $everDiagnosedWithRosacea\n      pregnantOrNursing: $pregnantOrNursing\n      ultimateSkinCareGoals: $ultimateSkinCareGoals\n      anythingElseWeShouldKnow: $anythingElseWeShouldKnow\n      consentFormSignature: $consentFormSignature\n    ) {\n      date\n      surgeryLast3Months\n      surgeryLast3MonthsNotes\n      anyHealthProblems\n      anyHealthProblemsNotes\n      listAnyMedications\n      chemPeelsLastMonth\n      waxingOnFaceLast5Days\n      accutaneOrPrescription\n      accutaneOrPrescriptionNotes\n      anyProductsContainingSalicyclicAcid\n      anyProductsContainingGlycolicAcid\n      anyProductsContainingLacticAcid\n      anyProductsContainingExfoliatingScrubs\n      anyProductsContainingVitaminA\n      fillersOrBotox\n      fillersOrBotoxNotes\n      listKnownAllergies\n      skinFlakyOrItch\n      everDiagnosedWithRosacea\n      pregnantOrNursing\n      ultimateSkinCareGoals\n      anythingElseWeShouldKnow\n      consentFormSignature\n    }\n  }"}, {"type": "mutation", "name": "productVariantUpdate($input: ProductVariantInput!)", "content": "{\n    addClient(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      phoneNumber: $phoneNumber\n    ) {\n      firstName\n      lastName\n      email\n      phoneNumber\n    }\n  }"}, {"type": "query", "name": "councilAtBlockNumber ($blockNumber: Int!)", "content": "{\n      searchResources(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          objectUri\n          objectType\n          label\n          description\n          tags\n        }\n      }\n    }"}, {"type": "mutation", "name": "deleteImportTask($taskId: Int!)", "content": "{\n    login(email: $email, password: $password) {\n      token\n      user {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "eventDefinition(\n    $applicationId: ID!\n    $apiPackageId: ID!\n    $eventDefinitionId: ID!\n  )", "content": "{\n    createCommentVote (input: { comment: $commentId, value: $value }) {\n      commentVote {\n        value\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateTerm($nodeUri: String!, $input: UpdateTermInput)", "content": "{\n  bounties(where: {bountyStatus_some: {AND: [{status: \"BountyProposed\"}, {blockNumber: {number_gte: $startBlock}}]}}) {\n    ...onchainBounty\n  }\n}\n    ${OnchainBountyFragmentDoc}"}, {"type": "query", "name": "Config", "content": "{\n        onDeleteMember {\n          id\n          name\n          createdAt\n          updatedAt\n        }\n      }"}, {"type": "mutation", "name": "", "content": "{\n    users{\n      _id\n      name\n      email\n      phone\n      addresses{\n        location{coordinates}\n        deliveryAddress\n      }\n    }\n  }"}, {"type": "mutation", "name": "manageMergeRecommendation($recommendationId: Int!, $apply: Boolean)", "content": "{\n      createCommentConnection(input: { content: \"Comment\", commentConnectionPostId: $postId }) {\n        id\n        content\n      }\n    }"}, {"type": "mutation", "name": "EditRider($riderInput:RiderInput!)", "content": "{\n  chatbot: editChatbot(id: $id, chatbot: $chatbot) {\n    id,\n    name,\n    description,\n    guid,\n    chatbotId\n  }\n}"}, {"type": "mutation", "name": "updateSession($sessionId: ID!, $session: SessionUpdateInput!)", "content": "{\n          feed {\n            ...FeedWithRepository\n          }\n        }\n\n        ${feedWithRepository}"}, {"type": "mutation", "name": "CreateDataset($input: NewDatasetInput)", "content": "{\n        onDeleteTask(filter: {\n          severity: { eq: 10 }\n        }) {\n          id\n          title\n          description\n          priority\n          severity\n          owner\n          readOwners\n        }\n      }"}, {"type": "mutation", "name": "Test($foo: String!)", "content": "{\n    triggers(namespace: $namespace, serviceName: $serviceName) {\n      name\n      namespace\n      spec {\n        broker\n        filter\n        port\n        path\n      }\n      status {\n        reason\n        status\n      }\n    }\n  }"}, {"type": "mutation", "name": "updateGitRepository(\n    $namespace: String!\n    $name: String!\n    $spec: GitRepositorySpecInput!\n  )", "content": "{\n  posts(\n    limit: $limit\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_tech_committee_proposal_id: {_is_null: false}}}\n    order_by: {onchain_link: {onchain_tech_committee_proposal_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_tech_committee_proposal_id\n      onchain_tech_committee_proposal(where: {}) {\n        id\n        method\n        status(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "getCommunityBySlug($slug: LowercaseString)", "content": "{\n    individuals(filters: { uuid: $uuid }) {\n      entities {\n        ...individual\n        matchRecommendationSet {\n          id\n          individual {\n            ...individual\n          }\n        }\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "query", "name": "LookupDeathCertificateOrder($id: String!, $contactEmail: String!)", "content": "{\n    deployIdentityContract(from: $from, contract: $contract) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "requestDashboardShare(\n      $dashboardUri: String!\n      $principalId: String!\n    )", "content": "{\n    updateFunction(name: $name, namespace: $namespace, params: $params) {\n      name\n      namespace\n      labels\n      size\n      runtime\n      content\n      dependencies\n    }\n  }"}, {"type": "mutation", "name": "deleteOrganization($id: ID!)", "content": "{\n        subscription(post_id: $postId) {\n            subscribed\n        }\n    }"}, {"type": "mutation", "name": "resendVerifyEmailToken", "content": "{\n  users(id: $id,username: $username, search: $search, chatbotId: $chatbotId) {\n    id,\n    userId,\n    chatbotId,\n    username,\n    language,\n    first_name,\n    last_name,\n    chatIds {\n      chatId,\n      transport\n    }\n  }\n}"}, {"type": "mutation", "name": "addPostAndProposalMutation($onchainProposalId: Int!, $authorId: Int!, $proposerAddress: String!, $content: String!, $topicId: Int!, $typeId: Int!)", "content": "{\n    marketplace {\n      listing(id: $id) {\n        ... on Listing {\n          id\n          title\n          allOffers {\n            id\n            status\n            statusStr\n            valid\n            validationError\n            commission\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "createSagemakerStudioUserProfile(\n      $input: NewSagemakerStudioUserProfileInput\n    )", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "query", "name": "GetOrganizations(\n    $page: Int!\n    $pageSize: Int!\n    $filters: OrganizationFilterType\n  )", "content": "{\n    deployToken(\n      name: $name\n      symbol: $symbol\n      decimals: $decimals\n      supply: $supply\n      type: $type\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "listOrganizationGroups(\n      $filter: GroupFilter\n      $organizationUri: String!\n    )", "content": "{\n  organization_Update(input: $input) {\n    id\n    name\n  }\n}"}, {"type": "mutation", "name": "addEmailToOrganization($organizationId: ID!, $input: EmailInput!)", "content": "{\n            onDeleteTaskGroup(filter: $filter) {\n              id\n              title\n              description\n              priority\n              severity\n            }\n          }"}, {"type": "query", "name": "ListScheduledQueryExecutions($scheduledQueryUri: String!)", "content": "{\n      updateWorksheetShare(\n        worksheetShareUri: $worksheetShareUri\n        canEdit: $canEdit\n      ) {\n        worksheetShareUri\n        canEdit\n      }\n    }"}, {"type": "mutation", "name": "($id: Int!, $record: InputRecord!)", "content": "{\n    sendNotification(\n      title: $title\n      content: $content\n      color: $color\n      icon: $icon\n      instanceName: $instanceName\n    ) @client {\n      title\n    }\n  }"}, {"type": "query", "name": "communities($filter: PagedFilter!)", "content": "{\n\t\tsongs {\n\t\t\tid\n\t\t\ttitle\n\t\t\tevents{\n\t\t\t\tactiveNotes\n\t\t\t\tduration\n\t\t\t}\n\t\t}\n\t}"}, {"type": "query", "name": "", "content": "{\n    vendorResetPassword(oldPassword: $oldPassword, newPassword: $newPassword)\n}"}, {"type": "query", "name": "AccountBalance($id: ID!)", "content": "{\n  posts(\n    limit: $limit\n    where: {type: {id: {_eq: $postType}}, topic: {id: {_eq: $postTopic}}, onchain_link: {onchain_tip_id: {_is_null: false}}}\n    order_by: {onchain_link: {id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_tip_id\n      onchain_tip(where: {}) {\n        id\n        reason\n        tipStatus(last: 1) {\n          id\n          status\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "predictTicketClassification ($data: PredictTicketClassificationInput!)", "content": "{\n      addTablePermission(\n        tableUri: $tableUri\n        userName: $userName\n        role: $role\n      ) {\n        tableUri\n      }\n    }"}, {"type": "query", "name": "proposal($rfpId: String!)", "content": "{MODELS}($where: ${whereName}, $first: Int = ${DEFAULT_PAGE_SIZE}, $skip: Int, $sortBy: [${sortName}!]) {\n             objs: ${queryName}(where: $where, first: $first, skip: $skip, sortBy: $sortBy) ${fields}\n         }"}, {"type": "mutation", "name": "", "content": "{\n      searchPrincipal(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          principalId\n          principalType\n          principalName\n          SamlGroupName\n          environmentUri\n          environmentName\n          AwsAccountId\n          region\n          organizationUri\n          organizationName\n        }\n      }\n    }"}, {"type": "mutation", "name": "(\n    $unsavedSquareCardID: String\n    $firstName: String\n    $lastName: String\n    $email: String\n  )", "content": "{\n    addTeam(\n      teamName: $teamName\n      organization: $organization\n      parentName: $parentName\n    ) {\n      team {\n        name\n      }\n    }\n  }"}, {"type": "query", "name": "selectBillingProperty ($where: BillingPropertyWhereInput, $orderBy: String, $first: Int, $skip: Int)", "content": "{\n  availableRiders{\n    _id\n    name\n    username\n    phone\n    available\n  }\n}"}, {"type": "query", "name": "TrackerDemocracyTreasuryProposalPosts($postType: Int!, $onchainTreasuryProposalIds: [Int!]! )", "content": "{\n  __typename\n  insert_onchain_links(objects: {onchain_bounty_id: $onchainBountyId, proposer_address: $proposerAddress, post: {data: {author_id: $authorId, content: $content, topic_id: $topicId, type_id: $typeId}}}) {\n    returning {\n      id\n    }\n  }\n}"}, {"type": "query", "name": "featured(\n    $featured1: String!\n    $featured2: String!\n    $featured3: String!\n    $featured4: String!\n    $featured5: String!\n  )", "content": "{\n        posts(where: {id: {_eq: $id}}) {\n            ...discussionPost\n        }\n    }\n    ${discussionPost}"}, {"type": "mutation", "name": "($postId: Int!, $userId: String!)", "content": "{\n\t\t\t\tdeleteBackupSnapshotRecord(id: $snapshotID) {\n\t\t\t\t\tsuccess\n\t\t\t\t}\n\t\t\t}"}, {"type": "query", "name": "RPM(\n    $graphId: ID!\n    $operationId: ID\n    $to: DateTime\n    $from: DateTime\n    $traceFilters: [TraceFilter]\n  )", "content": "{\n    msas {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${MSA_ATTRIBUTES}"}, {"type": "mutation", "name": "TransitionToArrangingPayment", "content": "{\n        Products(id: $id){\n            product_name,\n            category,\n            Price\n        }\n    }"}, {"type": "query", "name": "getRolls", "content": "{\n    search_v(\n      id: $id\n      class: $class\n      q: $q\n      page: $page\n      size: $size\n      query_all: $query_all\n      search_filter_args: $search_filter_args\n    ) {\n      time\n      count\n      vertexes {\n        class\n        color\n        name\n        id\n        expand\n        analysis\n        hl\n        alias\n        properties {\n          n\n          v\n          hl\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetPropertyByIdQuery ($propertyId: ID!, $organizationId: ID)", "content": "{\n  user: deleteChatId(id: $id) {\n    id,\n    chatIds {\n      id,\n      transport,\n      chatId\n    }\n  }\n}"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n    makeOffer(\n      listingID: $listingID\n      finalizes: $finalizes\n      affiliate: $affiliate\n      commission: $commission\n      value: $value\n      currency: $currency\n      arbitrator: $arbitrator\n      data: $data\n      from: $from\n      withdraw: $withdraw\n      quantity: $quantity\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "Notifications", "content": "{\n      listOrganizationTopics(\n        organizationUri: $organizationUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          label\n          topicUri\n          description\n        }\n      }\n    }"}, {"type": "subscription", "name": "OnCreateOwnerInvalidClaim", "content": "{\n        obj: authenticateUserWithPhoneAndPassword(data: { phone: $phone, password: $password }) {\n            item {\n                id\n            }\n        }\n    }"}, {"type": "query", "name": "getDices", "content": "{\n    getProposalByRFPAndSupplier(sender: $sender rfpId: $rfpId) {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "query", "name": "listAllEnvironmentGroups(\n      $filter: GroupFilter\n      $environmentUri: String!\n    )", "content": "{\n    login(wallet: $wallet) {\n      success\n      reason\n    }\n  }"}, {"type": "mutation", "name": "RegisterOrganization($input: RegisterOrganization!)", "content": "{\n    user(id: \"1\") {\n      ...userFields\n    }\n\n    friend: user(id: \"2\") {\n      ...usernameFragment\n    }\n  }\n\n  ${userFields}\n  ${usernameFragment}"}, {"type": "query", "name": "notesQuery(\n            $where: Note_filter!\n        )", "content": "{\n    createWallet(role: $role, name: $name) {\n      ...balanceFields\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "mutation", "name": "($followingId: String!, $userId: String!)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "query", "name": "LatestDemocracyTreasuryProposalPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5 )", "content": "{\n    deployMarketplace(\n      from: $from\n      token: $token\n      version: $version\n      autoWhitelist: $autoWhitelist\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n  editSection(section:$section){\n      _id\n      name\n      enabled\n      restaurants{\n        _id\n        name\n      }\n    }\n}"}, {"type": "mutation", "name": "PlaceOrder($restaurant:String!,$orderInput:[OrderInput!]!,$paymentMethod:String!,$couponCode:String,$tipping:Float!, $taxationAmount: Float!,$address:AddressInput!, $orderDate: String!,$isPickedUp: Boolean!, $deliveryCharges: Float!)", "content": "{\n  updateCommission(id:$id,commissionRate:$commissionRate){\n    _id\n    commissionRate\n  }\n}"}, {"type": "query", "name": "Conversations($id: String)", "content": "{\n      listAssetLinkedTerms(uri: $uri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          linkUri\n          nodeUri\n          owner\n          created\n          approvedByOwner\n          approvedBySteward\n          term {\n            label\n            readme\n            created\n            owner\n            glossary {\n              label\n              nodeUri\n            }\n            path\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n    oAuth2Client(namespace: $namespace, name: $name) {\n      name\n      namespace\n      generation\n      error {\n        code\n        description\n      }\n      spec {\n        grantTypes\n        responseTypes\n        scope\n        secretName\n      }\n    }\n  }"}, {"type": "query", "name": "($commentId: ID!)", "content": "{\n    entities: applications {\n      data {\n        name\n        id\n        labels\n      }\n    }\n  }"}, {"type": "query", "name": "FetchCommissions", "content": "{\n      updateEnvironmentStack(environmentUri: $environmentUri)\n    }"}, {"type": "query", "name": "functions($namespace: String!)", "content": "{\n    communityPosts(pagination: $pagination, title: $title) {\n      page\n      per_page\n      total\n      data {\n        id\n        postId\n        slug\n        content\n        cover\n        likes\n        comments\n        community {\n          id\n          name\n          slug\n          communityId\n          description\n          logo\n          cover\n          type\n          category {\n            id\n            name\n          }\n          createdAt\n        }\n        tags {\n          id\n          tagName\n        }\n        user {\n          id\n          fullName\n          photo\n          totalLikes\n        }\n        createdAt\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreateAddress($addressInput:AddressInput!)", "content": "{\n  insertWorkspaceMemberInvite(object: $workspaceMemberInvite) {\n    id\n  }\n}"}, {"type": "query", "name": "", "content": "{\n        getSharedDatasetTables(datasetUri: $datasetUri, envUri: $envUri) {\n          tableUri\n          GlueTableName\n        }\n    }"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n        transitionOrderToState(state: \"ArrangingPayment\") {\n            ...ActiveOrder\n        }\n    }\n    ${ORDER_FRAGMENT}"}, {"type": "query", "name": "get$", "content": "{\n  proposals(where: {proposalStatus_some: {AND: [{status: \"Proposed\"}, {blockNumber: {number_gte: $startBlock}}]}}) {\n    ...onchainProposal\n  }\n}\n    ${OnchainProposalFragmentDoc}"}, {"type": "query", "name": "", "content": "{\n    members {\n      member {\n        update(profile: $profile) {\n          id\n          profileSlug\n          firstName\n          lastName\n          email\n          canFeature\n          createdAt\n          lastUpdatedAt\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "getMessageById($id: ID!)", "content": "{\n  pushToken(token:$token){\n    _id\n    notificationToken\n  }\n}"}, {"type": "mutation", "name": "UniswapAddLiquidity(\n    $from: String!\n    $exchange: String!\n    $value: String!\n    $tokens: String!\n    $liquidity: String!\n  )", "content": "{\n  options {\n    _id\n    title\n    description\n    price\n  }\n}"}, {"type": "subscription", "name": "getUpdatedEmployee($_id: ID)", "content": "{\n  logsVolume: getLogsVolume(appID: $appId, from: $from, to: $to) {\n    value\n  }\n  cpuSecondsUsage: getCPUSecondsUsage(appID: $appId, from: $from, to: $to) {\n    value\n  }\n  functionInvocations: getFunctionsInvocations(\n    appID: $appId\n    from: $from\n    to: $to\n  ) {\n    value\n  }\n  postgresVolumeCapacity: getPostgresVolumeCapacity(appID: $appId) {\n    value\n  }\n  postgresVolumeUsage: getPostgresVolumeUsage(appID: $appId) {\n    value\n  }\n  totalRequests: getTotalRequests(appID: $appId, from: $from, to: $to) {\n    value\n  }\n  egressVolume: getEgressVolume(\n    appID: $appId\n    subdomain: $subdomain\n    from: $from\n    to: $to\n  ) {\n    value\n  }\n}"}, {"type": "query", "name": "getPivotRoleExternalId($organizationUri: String!)", "content": "{\n        onDeleteMember {\n          id\n          name\n          createdAt\n          updatedAt\n        }\n      }"}, {"type": "query", "name": "getThreadMessages(\n    $id: ID!\n    $after: String\n    $first: Int\n    $before: String\n    $last: Int\n  )", "content": "{\n  organization(id: $id) {\n    customFields {\n      id\n      name\n      datatype\n      value\n      template {\n        type\n      }\n    }\n  }\n}"}, {"type": "query", "name": "functions($namespace: String!)", "content": "{\n    deleteAPIDefinition(id: $id) {\n      name\n    }\n  }"}, {"type": "query", "name": "_allPaymentsSum ($where: PaymentWhereInput!)", "content": "{\n    bookTrips(launchIds: $launchIds) {\n      success\n      message\n      launches {\n        id\n        isBooked\n      }\n    }\n  }"}, {"type": "query", "name": "getDiscussionTreasurySpendProposalById($onchainTreasuryProposalId: Int!)", "content": "{\n    createTaskMessages(taskId: $taskId, message: $message, isPublic: false) {\n      success\n      message {\n        id\n        message\n        createdAt\n        user {\n          fullName\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n            stats {\n              users_count\n              servers_count\n              groups_count\n            }\n          }"}, {"type": "mutation", "name": "deleteClusterAddonsConfiguration($name: String!)", "content": "{\n  contact_ByEmail(email: $email) {\n    id\n    ...ContactNameFragment\n  }\n}\n    ${ContactNameFragmentFragmentDoc}"}, {"type": "mutation", "name": "CreateTipping($tippingInput:TippingInput!)", "content": "{\n    user {\n      id\n      graphs {\n        id\n        name\n        stats(to: $to, from: $from, traceFilters: $traceFilters) {\n          errorCount\n          errorPercent\n          count\n          duration\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreateTodo($input: CreateTodoInput!)", "content": "{\n    updateListing(\n      listingID: $listingID\n      from: $from\n      additionalDeposit: $additionalDeposit\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AddSharedItem($shareUri: String!, $input: AddSharedItemInput!)", "content": "{\n    individuals(\n      page: $page\n      pageSize: $pageSize\n      filters: $filters\n      orderBy: $orderBy\n    ) {\n      entities {\n        ...individual\n      }\n      pageInfo {\n        page\n        pageSize\n        numPages\n        totalResults\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "mutation", "name": "AddressLoginStart($address: String!)", "content": "{\n      listDatasetTableProfilingRuns(tableUri: $tableUri) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          profilingRunUri\n          GlueJobRunId\n          GlueTableName\n          results\n          created\n          status\n        }\n      }\n    }"}, {"type": "query", "name": "(\n  $offset: Int,\n  $limit: Int,\n  $order: String,\n  $categoryId: Int,\n  $slug: String,\n  $language: String,\n  $namespace: String,\n  $search: String,\n  $chatbotId: String\n)", "content": "{\n        ${operation}${modelName} (input: ${input}) {\n          firstName\n          lastName\n        }\n      }"}, {"type": "mutation", "name": "addDomain(\n    $domain: String!\n    $isTopDomain: Boolean\n    $organization: String!\n  )", "content": "{\n    activeTagsFilters @client {\n      basic {\n        ${activeTagsFiltersQGL}\n      }\n      provider {\n        ${activeTagsFiltersQGL}\n      }\n      tag {\n        ${activeTagsFiltersQGL}\n      }\n      connectedApplication {\n        ${activeTagsFiltersQGL}\n      }\n      search\n    }\n  }"}, {"type": "mutation", "name": "SubmitMarriageCertificateOrder(\n    $contactName: String!\n    $contactEmail: String!\n    $confirmContactEmail: String!\n    $contactPhone: String!\n    $shippingName: String!\n    $shippingCompanyName: String!\n    $shippingAddress1: String!\n    $shippingAddress2: String!\n    $shippingCity: String!\n    $shippingState: String!\n    $shippingZip: String!\n    $cardToken: String!\n    $cardLast4: String!\n    $cardholderName: String!\n    $billingAddress1: String!\n    $billingAddress2: String!\n    $billingCity: String!\n    $billingState: String!\n    $billingZip: String!\n    $item: MarriageCertificateOrderItemInput!\n    $idempotencyKey: String!\n  )", "content": "{\n    deployIdentity(\n      from: $from\n      attestations: $attestations\n      profile: $profile\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "updateUserPushToken($token: String!)", "content": "{\n  insertAuthUserRoles(objects: $roles) {\n    affected_rows\n  }\n}"}, {"type": "mutation", "name": "($thread: String!, $id: ID!, $tagId: ID!, $communityId: ID!)", "content": "{\n  getActiveOrders(restaurantId:$restaurantId){\n    _id\n    zone{\n      _id\n    }\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      address\n      location{coordinates}\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n      details\n      label\n    }\n    items{\n      _id\n      title\n      description\n      image\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        description\n        title\n        quantityMinimum\n        quantityMaximum\n      }\n      specialInstructions\n      isActive\n      createdAt\n      updatedAt\n    }\n    user{\n      _id\n      name\n      phone\n      email\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    isPickedUp\n    status\n    paymentStatus\n    reason\n    isActive\n    createdAt\n    deliveryCharges\n    rider{\n      _id\n      name\n      username\n      available\n    }\n  }\n}"}, {"type": "query", "name": "GetCurrencies", "content": "{\n        obj: authenticateUserWithPhoneAndPassword(data: { phone: $phone, password: $password }) {\n            item {\n                id\n            }\n            token\n        }\n    }"}, {"type": "query", "name": "GetFeed(\n      $targetUri: String!\n      $targetType: String!\n      $filter: FeedMessageFilter\n    )", "content": "{\n    walletLinker {\n      linkCode\n      linked\n    }\n  }"}, {"type": "mutation", "name": "deleteServiceBindingUsage(\n    $serviceBindingUsageName: String!\n    $namespace: String!\n  )", "content": "{\n        authenticateUserWithPassword(email: $email, password: $password) {\n            item {\n                ${userFragment}\n            }\n        }\n    }"}, {"type": "query", "name": "getPivotRoleName($organizationUri: String!)", "content": "{\n    sessions {\n      me {\n        session(id: $sessionId) {\n          id\n          type\n          category\n          status\n          title\n          shortDescription\n          longDescription\n          primaryCategory\n          secondaryCategory\n          targetAudience\n          supportingArtifacts {\n            name\n            url\n          }\n          prerequisites\n          agenda\n          takeaways\n          canRecord\n          mentorship\n          whyAreYou\n          otherComments\n          status\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "HeroDetailsWithFragment($episode: Episode)", "content": "{\n        onDeleteTodo {\n          id\n          description\n          name\n        }\n      }"}, {"type": "mutation", "name": "($thread: String!, $id: ID!, $tagId: ID!, $communityId: ID!)", "content": "{\n    undoLikeComment(thread: $thread, id: $id) {\n      id\n      viewerHasLiked\n      likesCount\n    }\n  }"}, {"type": "mutation", "name": "UniswapCreateExchange(\n    $from: String!\n    $tokenAddress: String!\n    $factory: String\n  )", "content": "{\n    deleteMyRoutineItem(\n      morningCleanserID: $morningCleanserID\n      morningTonerID: $morningTonerID\n      morningSerumID: $morningSerumID\n      morningMoisturizerID: $morningMoisturizerID\n      morningSPFID: $morningSPFID\n      morningRXID: $morningRXID\n      morningEyeCreamID: $morningEyeCreamID\n      eveningOilCleanserID: $eveningOilCleanserID\n      eveningCleanserID: $eveningCleanserID\n      eveningExfoliatorID: $eveningExfoliatorID\n      eveningTreatmentMaskID: $eveningTreatmentMaskID\n      eveningTonerID: $eveningTonerID\n      eveningSerumID: $eveningSerumID\n      eveningMoisturizerID: $eveningMoisturizerID\n      eveningNightMaskID: $eveningNightMaskID\n      eveningOilID: $eveningOilID\n      eveningSpotTreatmentID: $eveningSpotTreatmentID\n      eveningRXID: $eveningRXID\n      eveningEyeCreamID: $eveningEyeCreamID\n    ) {\n      morningCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningToner {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningSerum {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningMoisturizer {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningSPF {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningRX {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningEyeCream {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningOilCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningExfoliator {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningTreatmentMask {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningToner {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningSerum {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningMoisturizer {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningNightMask {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningOil {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningSpotTreatment {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningRX {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningEyeCream {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n    }\n  }"}, {"type": "mutation", "name": "resendMessage ($data: ResendMessageInput!)", "content": "{\n      importRedshiftCluster(\n        environmentUri: $environmentUri\n        clusterInput: $clusterInput\n      ) {\n        clusterUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "SubmitBirthCertificateOrder(\n    $contactName: String!\n    $contactEmail: String!\n    $confirmContactEmail: String!\n    $contactPhone: String!\n    $shippingName: String!\n    $shippingCompanyName: String!\n    $shippingAddress1: String!\n    $shippingAddress2: String!\n    $shippingCity: String!\n    $shippingState: String!\n    $shippingZip: String!\n    $cardToken: String!\n    $cardLast4: String!\n    $cardholderName: String!\n    $billingAddress1: String!\n    $billingAddress2: String!\n    $billingCity: String!\n    $billingState: String!\n    $billingZip: String!\n    $item: BirthCertificateOrderItemInput!\n    $idempotencyKey: String!\n  )", "content": "{\n        objs: allOrganizationEmployees(where: {name_contains_i: $value, organization: { id: $organizationId }}) {\n            isBlocked\n            name\n            id\n            user {\n                id\n            }\n            role {\n                id\n                name\n                canBeAssignedAsExecutor\n                canBeAssignedAsResponsible\n            }\n        }\n    }"}, {"type": "query", "name": "getSagemakerStudioUserProfilePresignedUrl(\n      $sagemakerStudioUserProfileUri: String!\n    )", "content": "{\n        update_poll(where: {id: {_eq: $id}}, _set: {block_end: $blockEnd}) {\n            affected_rows\n        }\n  }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n    updateRefund(offerID: $offerID, amount: $amount, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "ShopDetails", "content": "{\n    createTask(listId: $listId, tasks: $tasks) {\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "query", "name": "(\n    $_id: ID\n    $firstName: String\n    $lastName: String\n    $email: String\n    $phoneNumber: String\n  )", "content": "{\n              blogById(blogId: \"${this.blogId}\") {\n                title\n                content\n                userId\n                date\n              }\n            }"}, {"type": "query", "name": "getDataPipelineEnvironment($envPipelineUri: String!)", "content": "{\n  contact_Archive(contactId: $id) {\n    result\n  }\n}"}, {"type": "query", "name": "LatestMotionPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        listings(first: $first, after: $after, filter: $filter) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            ...basicListingFields\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n      publishDatasetUpdate(datasetUri: $datasetUri, s3Prefix: $s3Prefix)\n    }"}, {"type": "mutation", "name": "($id: ID!, $action: String!, $type: String!)", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n      ...communityMembers\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}\n  ${communityMembersFragment}"}, {"type": "query", "name": "getPartnerBySlug($slug: Slug!)", "content": "{\n      deleteSagemakerStudioUserProfile(\n        sagemakerStudioUserProfileUri: $sagemakerStudioUserProfileUri\n        deleteFromAWS: $deleteFromAWS\n      )\n    }"}, {"type": "query", "name": "getWorkspaceMemberInvitesToManage($userId: uuid!)", "content": "{\n    createClusterRoleBinding(name: $name, params: $params) {\n      name\n    }\n  }"}, {"type": "query", "name": "Posts ($marketId: ID!, $minVotes: Int!)", "content": "{\n        onCreateTodo {\n          id\n          description\n          name\n        }\n      }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n          onDeleteStudent {\n            id\n            name\n            email\n            ssn\n            owner\n          }\n        }"}, {"type": "mutation", "name": "createManyTriggers(\n    $namespace: String!\n    $triggers: [TriggerCreateInput!]!\n    $ownerRef: [OwnerReferenceInput!]\n  )", "content": "{\n\t\taddressUnlink(address: $address) {\n\t\t\tmessage\n\t\t\ttoken\n\t\t}\n\t}"}, {"type": "mutation", "name": "DeleteCommentReaction($commentId: uuid!, $userId: Int!, $reaction: bpchar!)", "content": "{\n  uploadToken(id:$id,pushToken:$pushToken){\n    _id\n    pushToken\n  }\n}"}, {"type": "mutation", "name": "", "content": "{\n    deployIdentityEvents(from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "HeroName($episode: Episode)", "content": "{\n      createTodo(input: $input) {\n        id\n        groups\n        content\n      }\n    }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n    web3 {\n      networkId\n      networkName\n      metaMaskNetworkId\n      metaMaskNetworkName\n      metaMaskAccount {\n        id\n        balance {\n          eth\n        }\n      }\n      walletType\n      primaryAccount {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n        onUpdateStudent {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "query", "name": "getAll$", "content": "{\n            delete( userId: $UserId , fileCategory:$FileCategory )\n          }"}, {"type": "query", "name": "GetOrganizationLocations($id: ID!)", "content": "{\n      getPostSecretFieldIAM(id: $id) {\n        id\n        title\n        secret\n      }\n    }"}, {"type": "mutation", "name": "deleteAirflowProject($projectUri: String)", "content": "{\n    currencies(tokens: $tokens) {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        id\n        decimals\n        balance(address: $account, format: true)\n      }\n    }\n  }"}, {"type": "mutation", "name": "SendFromWallet($from: String, $to: String, $value: String)", "content": "{\n    name\n    address\n    role\n    identity\n  }"}, {"type": "query", "name": "LoadPermit($permitNumber: String!)", "content": "{\n        onCreateMember {\n          id\n          name\n          createdAt\n          updatedAt\n        }\n      }"}, {"type": "query", "name": "listDatasetTableProfilingRuns($tableUri: String!)", "content": "{\n    searchCompanies(text: $text, companyId: $companyId) {\n      users {\n        id\n        fullName\n        profileUrl\n        companies {\n          id\n          name\n          logoUrl\n        }\n      }\n      companies {\n        id\n        name\n        logoUrl\n      }\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n  counters {\n    rows: devices {\n      count\n    }\n  }\n  rows: devices(limit: $limit, offset: $offset, order: $order) {\n    id,\n    name,\n    payload,\n    createdAt,\n    updatedAt,\n    status,\n    snapshot,\n    jsonSchema,\n    version,\n    lat,\n    lon\n  }\n}"}, {"type": "query", "name": "backupSnapshots($backup_repo_id: Int, $first: Int!, $page: Int!)", "content": "{\n    users{\n      _id\n      name\n      email\n      phone\n      addresses{\n        location{coordinates}\n        deliveryAddress\n      }\n    }\n  }"}, {"type": "mutation", "name": "createFunction(\n    $name: String!\n    $namespace: String!\n    $labels: Labels!\n    $size: String!\n    $runtime: String!\n  )", "content": "{\n    graphCreate(name: $name) {\n      id\n      name\n      stats(to: $to, from: $from, traceFilters: $traceFilters) {\n        errorCount\n        errorPercent\n        count\n        duration\n      }\n    }\n  }"}, {"type": "mutation", "name": "MarkConversationRead($id: String!)", "content": "{\n        result: sendMessageToResidentScopes(data: $data) { status }\n    }"}, {"type": "mutation", "name": "editCoupon($couponInput:CouponInput!)", "content": "{\n    checkTelegramStatus(identity: $identity, maxTries: $maxTries) {\n      success\n      reason\n      data {\n        attestation\n        verified\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateTodo($input: UpdateTodoInput!)", "content": "{\n    labelDefinition(key: $key) {\n      key\n      schema\n    }\n  }"}, {"type": "query", "name": "(\n  $title: String,\n  $id: Int,\n  $slug: String,\n  $namespace: String,\n  $search: String,\n  $chatbotId: String\n)", "content": "{\n  systemConfig(appID: $appId) {\n    postgres {\n      database\n    }\n  }\n  config(appID: $appId, resolve: true) {\n    id: __typename\n    __typename\n    postgres {\n      version\n    }\n  }\n}"}, {"type": "query", "name": "GetServerState", "content": "{\n    web3 {\n      networkId\n      networkName\n      walletType\n    }\n  }"}, {"type": "mutation", "name": "createOrganizationNote($organizationId: ID!, $input: NoteInput!)", "content": "{\n        onUpdateMember {\n          id\n          name\n          createdAt\n          updatedAt\n        }\n      }"}, {"type": "mutation", "name": "setDefaultAddress($address: String!)", "content": "{\n        __typename\n        insert_option_poll_votes_one(object: {option_poll_id: $optionPollId, user_id: $userId, option: $option}) {\n            id\n        }\n    }"}, {"type": "query", "name": "GetContactNameById($id: ID!)", "content": "{\n        onCreateStudent {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "mutation", "name": "", "content": "{\n        user: authenticatedUser { ${USER_FIELDS} }\n    }"}, {"type": "mutation", "name": "deleteGlossary($nodeUri: String!)", "content": "{\n                  allArchivedBlogs {\n                    id\n                    title\n                    content\n                    userId\n                    archived\n                  }\n                }"}, {"type": "mutation", "name": "updateLimitRange($namespace: String!, $name: String!, $json: JSON!)", "content": "{\n\t\tsongs {\n\t\t\tid\n\t\t\ttitle\n\t\t\tevents{\n\t\t\t\tactiveNotes\n\t\t\t\tduration\n\t\t\t}\n\t\t}\n\t}"}, {"type": "query", "name": "Configuration", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "query", "name": "dashboardView_Organizations($pagination: Pagination!, $where: Filter, $sort: SortBy)", "content": "{\n    updateApplication(id: $id, in: $in) {\n      name\n      providerName\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeleteCoupon($id:String!)", "content": "{\n    identity(id: $id) {\n      id\n      firstName\n      lastName\n      description\n      avatar\n      ipfsHash\n\n      verifiedAttestations {\n        id\n      }\n    }\n  }"}, {"type": "mutation", "name": "setCredentialsStart($address: String!)", "content": "{\n        result: exportPropertiesToExcel(data: $data) { status, linkToFile }\n    }"}, {"type": "subscription", "name": "SubscriptionOrder($id:String!)", "content": "{\n    updateUnsavedSquareCardIDs(\n      unsavedSquareCardID: $unsavedSquareCardID\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n    ) {\n      squareCustomerId\n      unsavedSquareCardIDs\n      firstName\n      lastName\n      email\n    }\n  }"}, {"type": "query", "name": "getUsers($pagination: Pagination!, $where: Filter)", "content": "{\n      createDatasetQualityRule(datasetUri: $datasetUri, input: $input) {\n        ruleUri\n        name\n        label\n        description\n        created\n        query\n      }\n    }"}, {"type": "mutation", "name": "RemoveTagFromContact($input: ContactTagInput!)", "content": "{\n    foods(page:$page){\n      _id\n      title\n      description\n      stock\n      tag\n      img_url\n      variations{\n        _id\n        title\n        price\n        discounted\n        addons{\n          _id\n          title\n          description\n          quantity_minimum\n          quantity_maximum\n          options{\n            _id\n            title\n            price\n          }\n        }\n      }\n      category{\n          _id\n          title\n      }\n    }\n  }"}, {"type": "query", "name": "PostReactions ($postId: Int!)", "content": "{\n    listTodos {\n      data {\n        todoItem\n        taskCompleted\n        id\n      }\n    }\n  }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n    deleteSecret(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "query", "name": "SearchCompanies($text: String!, $companyId: ID)", "content": "{\n        posts(where: {onchain_link: {onchain_tech_committee_proposal_id: {_eq: $id}}}) {\n            ...techCommitteeProposalPost\n        }\n    }\n    ${techCommitteeProposalPost}"}, {"type": "query", "name": "TrackerTipPosts($postType: Int!, $onchainTipIds: [String!]! )", "content": "{\n  __typename\n  insert_option_poll_votes_one(\n    object: {option_poll_id: $optionPollId, user_id: $userId, option: $option}\n  ) {\n    id\n  }\n}"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n        onCreatePost(postOwner: \"${USERNAME2}\") {\n          id\n          title\n          postOwner\n        }\n      }"}, {"type": "mutation", "name": "CreateVendor($vendorInput:VendorInput)", "content": "{\n  celoValidatorGroups {\n    group\n    name\n    metadataURL\n    blockNumber\n    votingPower\n    votingPowerFraction\n    capacityAvailable\n    totalCapacity\n    multiplier\n    groupShare\n    groupScore\n    validatorDetails {\n      validatorAddress\n      validator_score\n    }\n  }\n}"}, {"type": "query", "name": "GetPropertyByIdQuery ($propertyId: ID!, $organizationId: ID)", "content": "{\n  sendChatMessage(message: $messageInput, orderId: $orderId) {\n    success\n    message\n    data {\n      id\n      message\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n}"}, {"type": "query", "name": "GetJobById ($id: String)", "content": "{\n    disputeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "subscription", "name": "secretEvent($namespace: String!)", "content": "{\n    undoDislikeComment(thread: $thread, id: $id) {\n      id\n      viewerHasDisliked\n      dislikesCount\n    }\n  }"}, {"type": "query", "name": "serviceInstances($namespace: String!, $status: InstanceStatusType)", "content": "{\n        getPostPrivateIAM(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "GetContactLocations($id: ID!)", "content": "{\n  updatePlugin(\n    plugin: $plugin,\n    url: $url,\n    version: $version,\n    initialConfiguration: $initialConfiguration,\n    chatbotId: $chatbotId\n  ) {\n    id,\n    plugin,\n    filename,\n    version\n  }\n}"}, {"type": "query", "name": "dashboardView_Contacts($pagination: Pagination!, $where: Filter, $sort: SortBy)", "content": "{\n    riders{\n      _id\n      name\n      username\n      password\n      phone\n      available\n      zone{\n        _id\n        title\n      }\n    }\n  }"}, {"type": "subscription", "name": "getLogsSubscription($appID: String!, $service: String, $from: Timestamp)", "content": "{\n  editRecord(id: $id, record: $record) {\n    id,\n    title,\n    type,\n    createdAt,\n    payload,\n    userId,\n    status\n  }\n}"}, {"type": "mutation", "name": "removeOrganizationFromContact($input: ContactOrganizationInput!)", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n    }\n    notifications {\n      totalCount\n      totalUnread\n      nodes {\n        id\n        title\n        timestamp\n        content\n      }\n    }\n  }"}, {"type": "mutation", "name": "updateMember($profile: ProfileUpdateInput!)", "content": "{\n            updateBlogArchived(blogId: \"${this.currentBlog.id}\", archived : false)\n            {\n              id\n            }\n          }"}, {"type": "query", "name": "GetTenantName", "content": "{\n    name\n    address\n    role\n    identity\n  }"}, {"type": "mutation", "name": "UniswapCreateExchange(\n    $from: String!\n    $tokenAddress: String!\n    $factory: String\n  )", "content": "{\n    notification @client {\n      title\n      content\n      color\n      icon\n      visible\n    }\n  }"}, {"type": "query", "name": "FoodByIds($ids:[String!]!)", "content": "{\n      subscriptionAssignRider(riderId:$riderId){\n      order{\n          _id\n          orderId\n          createdAt\n          acceptedAt\n          pickedAt\n          isPickedUp\n          deliveredAt\n          expectedTime\n          deliveryCharges\n          restaurant{\n            _id\n            name\n            address\n            location{coordinates}\n          }\n          deliveryAddress{\n            location{coordinates}\n            deliveryAddress\n            label\n            details\n          }\n          items{\n            _id\n            title\n            food\n            description\n            quantity\n            variation{\n              _id\n              title\n              price\n            }\n            addons{\n              _id\n              options{\n                _id\n                title\n                price\n              }\n              title\n              description\n              quantityMinimum\n              quantityMaximum\n            }\n            isActive\n            createdAt\n          }\n          user{\n            _id\n            name\n            phone\n          }\n          paymentMethod\n          paidAmount\n          orderAmount\n          paymentStatus\n          orderStatus\n          tipping\n          taxationAmount\n          reason\n          isRiderRinged\n          preparationTime\n          rider{\n            _id\n            name\n            username\n          }\n      }\n      origin\n      }\n  }"}, {"type": "mutation", "name": "recommendMatches(\n    $criteria: [String]\n    $exclude: Boolean\n    $sourceUuids: [String]\n  )", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            topic: {\n                id: {\n                    _eq: $postTopic\n                }\n            },\n            onchain_link: {\n                onchain_treasury_proposal_id: {\n                    _is_null: false\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_treasury_proposal_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_treasury_proposal_id\n                onchain_treasury_spend_proposal(where: {}) {\n                    id\n                    treasuryStatus(last: 1) {\n                        id\n                        status\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n${authorFields}"}, {"type": "mutation", "name": "createLabelDefinition($in: LabelDefinitionInput!)", "content": "{\n  onchain_links(where: {onchain_tip_id: {_eq: $onchainTipId}}) {\n    id\n  }\n}"}, {"type": "query", "name": "Orders", "content": "{\n        __typename\n        insert_posts(objects: {\n            author_id: $userId,\n            content: $content,\n            title: $title,\n            topic_id: $topicId,\n        }) {\n            affected_rows\n            returning {\n                id\n            }\n        }\n    }"}, {"type": "query", "name": "LatestDiscussionPosts($limit: Int! = 20)", "content": "{\n      linkTerm(\n        nodeUri: $nodeUri\n        targetUri: $targetUri\n        targetType: $targetType\n      ) {\n        linkUri\n        created\n      }\n    }"}, {"type": "query", "name": "service($name: String!, $namespace: String!)", "content": "{\n    clusterServiceClass(name: $name) {\n      ${serviceClassGQL}\n      plans {\n        ${plansGQL}\n        relatedClusterServiceClassName\n      }\n    }\n    serviceClass(name: $name, namespace: $namespace) {\n      ${serviceClassGQL}\n      namespace\n      plans {\n        ${plansGQL}\n        namespace\n        relatedServiceClassName\n        assetGroup{\n            assets{\n              type\n            }\n          }\n      }\n    }\n  }"}, {"type": "mutation", "name": "MakeOffer($listingID: String!, $value: String!, $from: String)", "content": "{\n  deleteTask(id: $id, queue: $queue) {\n    id\n  }\n}"}, {"type": "mutation", "name": "($postId: ID!)", "content": "{\n    login(facebookId:$facebookId,email:$email,password:$password,type:$type,appleId:$appleId,name:$name,notificationToken:$notificationToken){\n     userId\n     token\n     is_active\n     tokenExpiration\n     name\n     email\n     phone\n   }\n}"}, {"type": "mutation", "name": "SaveDeliveryConfiguration($configurationInput:DeliveryConfigurationInput!)", "content": "{\n        posts(order_by: {id: asc}, limit: $limit, where: {type: {id: {_eq: 1}}}) {\n            ...postFields\n        }\n    }\n    ${postFields}"}, {"type": "mutation", "name": "AcceptOffer($offerID: String!, $from: String)", "content": "{\n    verifyAirbnbCode(identity: $identity, airbnbUserId: $airbnbUserId) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n          companies${additionalParameters || ''} {\n            companyId\n            name\n            address\n          }\n        }"}, {"type": "subscription", "name": "OnCreatePost", "content": "{\n        updateUser(updateUserInput:{name:$name,phone:$phone,phoneIsVerified:$phoneIsVerified,emailIsVerified:$emailIsVerified}){\n          _id\n          name\n          phone\n          phoneIsVerified\n          emailIsVerified\n        }\n      }"}, {"type": "mutation", "name": "WithdrawOffer($offerID: String, $from: String)", "content": "{\n    currentUser {\n      login\n    }\n    feed(type: $type, offset: $offset, limit: $limit) {\n      ...FeedEntry\n    }\n  }\n  ${FeedEntryFragmentDoc}"}, {"type": "mutation", "name": "updateSchema($input: UpdateSchemaInput!)", "content": "{\n    updateEmployeeInvalidateTokens {\n      _id\n      firstName\n      lastName\n      email\n      phoneNumber\n      password\n      createdAt\n      tokenCount\n    }\n  }"}, {"type": "query", "name": "TreasuryProposalPostAndComments($id: Int!)", "content": "{\n  uploadToken(id:$id,pushToken:$pushToken){\n    _id\n    pushToken\n  }\n}"}, {"type": "mutation", "name": "addressUnlink($address: String!)", "content": "{\n    deleteAddonsConfiguration(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "query", "name": "getThreadById($id: ID!)", "content": "{\n    updateMyRoutine(\n      morningCleanser: $morningCleanser\n      morningToner: $morningToner\n      morningSerum: $morningSerum\n      morningMoisturizer: $morningMoisturizer\n      morningSPF: $morningSPF\n      morningRX: $morningRX\n      morningEyeCream: $morningEyeCream\n      eveningOilCleanser: $eveningOilCleanser\n      eveningCleanser: $eveningCleanser\n      eveningExfoliator: $eveningExfoliator\n      eveningTreatmentMask: $eveningTreatmentMask\n      eveningToner: $eveningToner\n      eveningSerum: $eveningSerum\n      eveningMoisturizer: $eveningMoisturizer\n      eveningNightMask: $eveningNightMask\n      eveningOil: $eveningOil\n      eveningSpotTreatment: $eveningSpotTreatment\n      eveningRX: $eveningRX\n      eveningEyeCream: $eveningEyeCream\n    ) {\n      morningCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningToner {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningSerum {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningMoisturizer {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningSPF {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningRX {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningEyeCream {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningOilCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningExfoliator {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningTreatmentMask {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningToner {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningSerum {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningMoisturizer {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningNightMask {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningOil {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningSpotTreatment {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningRX {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningEyeCream {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n    }\n  }"}, {"type": "query", "name": "($commentId: String!)", "content": "{\n  chat(order: $order) {\n    id\n    message\n    user {\n      id\n      name\n    }\n    createdAt\n  }\n}"}, {"type": "query", "name": "($id: ID!)", "content": "{\n      deployScheduledQuery(scheduledQueryUri: $scheduledQueryUri)\n    }"}, {"type": "query", "name": "TrackerTipPosts($postType: Int!, $onchainTipIds: [String!]!)", "content": "{\n    web3 {\n      networkId\n      networkName\n    }\n  }"}, {"type": "mutation", "name": "updateResourceQuota(\n    $namespace: String!\n    $name: String!\n    $json: JSON!\n  )", "content": "{\n  organization_Merge(\n    primaryOrganizationId: $primaryOrganizationId\n    mergedOrganizationIds: $mergedOrganizationIds\n  ) {\n    id\n    ...OrganizationDetails\n  }\n}\n    ${OrganizationDetailsFragmentDoc}"}, {"type": "query", "name": "listEnvironmentNetworks(\n      $filter: VpcFilter\n      $environmentUri: String!\n    )", "content": "{\n    transferToken(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "query", "name": "SearchComments", "content": "{\n  saveEmailConfiguration(configurationInput:$configurationInput){\n    _id\n    email\n    emailName\n    password\n    enableEmail\n  }\n}"}, {"type": "subscription", "name": "onMessagingStatusChange", "content": "{\n    githubSignin(code: $code) {\n      token\n      user {\n        nickname\n        bio\n      }\n    }\n  }"}, {"type": "mutation", "name": "createOptionPoll($postId: Int!, $question: String!, $options: String! $endAt: Int!)", "content": "{\n    \taddressLinkConfirm(address_id: $address_id, signature: $signature) {\n\t\t\tmessage\n\t\t\ttoken\n\t\t}\n\t}"}, {"type": "mutation", "name": "DeployIdentityViaProxy($from: String!, $owner: String!)", "content": "{\n  onchain_links(where: {onchain_motion_id: {_is_null: false}}) {\n    ...discussionMotion\n  }\n}\n    ${DiscussionMotionFragmentDoc}"}, {"type": "query", "name": "AccountTokenBalance($account: ID!, $token: String!)", "content": "{\n        createPostPrivate(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "subscription", "name": "OnCreateStudent", "content": "{\n      getAirflowClusterWebLoginToken(clusterUri: $clusterUri)\n    }"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{ getAllShorts{ archived, user{  name  },shortTag{ tag },userId,id, thumbnail}}"}, {"type": "mutation", "name": "importDashboard($dashboardUri: String!)", "content": "{\n    updateResourceQuota(namespace: $namespace, name: $name, json: $json) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "createServiceBindingUsage(\n    $createServiceBindingUsageInput: CreateServiceBindingUsageInput\n    $namespace: String!\n  )", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n    }\n    messaging(id: \"defaultAccount\") {\n      id\n      pubKey\n      pubSig\n      enabled\n      synced\n      syncProgress\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n  note_LinkAttachment(noteId: $noteId, attachmentId: $attachmentId) {\n    id\n    includes {\n      id\n      name\n      mimeType\n    }\n  }\n}"}, {"type": "query", "name": "listEnvironmentAirflowClusters(\n      $environmentUri: String!\n      $filter: AirflowClusterFilter\n    )", "content": "{\n      updateGroupEnvironmentPermissions(input: $input) {\n        environmentUri\n      }\n    }"}, {"type": "query", "name": "Orders", "content": "{\n      createDatasetTable(datasetUri: $datasetUri, input: $input) {\n        tableUri\n        name\n      }\n    }"}, {"type": "query", "name": "oAuthClient($namespace: String!, $name: String!)", "content": "{MODEL}($data: ${MODEL}CreateInput) {\n            obj: create${MODEL}(data: $data) ${fields}\n        }"}, {"type": "mutation", "name": "DeleteBirthCertificateUploadedFile(\n    $attachmentKey: String!\n    $uploadSessionId: String!\n  )", "content": "{\n          feed {\n            ...FeedWithRepository\n          }\n        }\n\n        ${feedWithRepository}"}, {"type": "query", "name": "HeroAndFriendsNames($episode: Episode)", "content": "{\n    createRider(\n        riderInput:$riderInput\n    ){\n    _id\n    name\n    username\n    password\n    phone\n    available\n      zone{\n        _id\n      }\n    }\n  }"}, {"type": "query", "name": "($userId: String)", "content": "{\n      runScheduledQuery(scheduledQueryUri: $scheduledQueryUri)\n    }"}, {"type": "query", "name": "gCliSearch($limit: Int, $keyword: String!)", "content": "{\n          feed {\n            ...FeedWithRepository\n          }\n        }\n\n        ${feedWithRepository}"}, {"type": "mutation", "name": "subscribeToWebPush($subscription: WebPushSubscription!)", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "mutation", "name": "SaveCurrencyConfiguration($configurationInput:CurrencyConfigurationInput!)", "content": "{\n      listEnvironmentNetworks(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          VpcId\n          vpcUri\n          label\n          name\n          default\n          SamlGroupName\n          publicSubnetIds\n          privateSubnetIds\n          region\n        }\n      }\n    }"}, {"type": "mutation", "name": "addPostAndTipMutation($onchainTipId: String!, $authorId: Int!, $proposerAddress: String!, $content: String!, $topicId: Int!, $typeId: Int!)", "content": "{\n    updateUser (input: { username: $username, fullName: $fullName, email: $email, website: $website }) {\n      user {\n        username\n        fullName\n        email\n        website\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateEnvironment(\n      $environmentUri: String!\n      $input: ModifyEnvironmentInput\n    )", "content": "{\n        createPostPrivateIAM(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "Orders", "content": "{\n    importWallet(role: $role, name: $name, privateKey: $privateKey) {\n      id\n      role\n      name\n    }\n  }"}, {"type": "query", "name": "FetchAccount", "content": "{\n    zones{\n    _id\n    title\n    description\n    location{coordinates}\n    isActive\n    }\n}"}, {"type": "query", "name": "GRAPH_SETTINGS($graphId: ID!)", "content": "{\n    getProposalByRFPAndSupplier(sender: $sender rfpId: $rfpId) {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "query", "name": "secrets($namespace: String!)", "content": "{\n      approveShareObject(shareUri: $shareUri) {\n        shareUri\n        status\n      }\n    }"}, {"type": "mutation", "name": "ForgotPassword($email:String!, $otp:String!)", "content": "{MODEL}($data: ${inputName}) {\n             obj: ${mutationName}(data: $data) ${fields}\n         }"}, {"type": "subscription", "name": "OnCreateMember", "content": "{\n        delete_comment_reactions(where: {_and: [{comment_id: {_eq: $commentId}}, {user_id: {_eq: $userId}}, {reaction: {_eq: $reaction}}]}) {\n            affected_rows\n        }\n    }"}, {"type": "mutation", "name": "ForgotPassword($email:String!, $otp:String!)", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_motion_id: {\n                    _is_null: false\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_motion_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_motion_id\n                onchain_motion(where: {}) {\n                    id\n                    motionStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "mutation", "name": "deleteNetwork($vpcUri: String!)", "content": "{\n      getOrganization(organizationUri: $organizationUri) {\n        groups(filter: $filter) {\n          count\n          nodes {\n            groupUri\n            label\n            created\n            groupRoleInOrganization\n            userRoleInGroup\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "($message: InputMessage!)", "content": "{\n    setActiveOrderId(id: $id) @client\n  }"}, {"type": "mutation", "name": "createLabelDefinition($in: LabelDefinitionInput!)", "content": "{\n    me {\n      _id\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n    loggedIn {\n      wallet\n    }\n  }"}, {"type": "query", "name": "($chatbotId: String)", "content": "{\n    launch(id: $launchId) {\n      isInCart @client\n      site\n      rocket {\n        type\n      }\n      ...LaunchTile\n    }\n  }\n  ${LAUNCH_TILE_DATA}"}, {"type": "mutation", "name": "($id: Int!, $chatbot: InputChatbot!)", "content": "{\n  ridersByZone(id:$id){\n    _id\n    name\n    username\n    password\n    phone\n    available\n    zone{\n      _id\n      title\n    }\n  }\n}"}, {"type": "mutation", "name": "createPoll($postId: Int!, $blockEnd: Int!)", "content": "{\n  deleteWorkspaceMemberInvites(where: {id: {_eq: $id}}) {\n    affected_rows\n  }\n}"}, {"type": "mutation", "name": "($id: Int!, $queue: String!)", "content": "{\n        onCreatePost(postOwner: \"${USERNAME2}\") {\n          id\n          title\n          postOwner\n        }\n      }"}, {"type": "query", "name": "LatestTechCommitteeProposalPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n      listScheduledQueries(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          scheduledQueryUri\n          name\n          owner\n          description\n          label\n          created\n          tags\n          environment {\n            AwsAccountId\n            region\n            name\n            label\n          }\n          organization {\n            organizationUri\n            name\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "($id: Int!)", "content": "{\n              test(foo: $foo)\n            }"}, {"type": "mutation", "name": "DeleteAddress($id:ID!)", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateRiderLocation($latitude:String!,$longitude:String!)", "content": "{\n    disableApplication(namespace: $namespace, application: $application) {\n      namespace\n      application\n    }\n  }"}, {"type": "query", "name": "Feed", "content": "{\n      updateSSMParameter(name: $name, value: $value)\n    }"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n  selectAddress(id:$id){\n    _id\n    addresses{\n      _id\n      label\n      deliveryAddress\n      details\n      location{coordinates}\n      selected\n    }\n  }\n}"}, {"type": "mutation", "name": "SendOtpToEmail($email: String!, $otp: String!)", "content": "{\n    toggleAvailablity(id:$id){\n      _id\n    }\n}"}, {"type": "query", "name": "GetContactConversations($id: ID!)", "content": "{\n            stats {\n              users_count\n              servers_count\n              groups_count\n            }\n          }"}, {"type": "query", "name": "GetWalletBalances($tokens: [String], $account: String!)", "content": "{\n      createTodo(input: $input) {\n        id\n        name\n        description\n        level\n        owner\n        sharedOwners\n        status\n      }\n    }"}, {"type": "query", "name": "selectTicketsCount ($where: TicketWhereInput, $whereWithoutStatuses: TicketWhereInput)", "content": "{\n            post (slug: $slug) {\n              id\n              slug\n              numberOfComments\n            }\n          }"}, {"type": "query", "name": "msasBySKU($sku: String!)", "content": "{\n  serverStatus {\n    balance\n  }\n}"}, {"type": "query", "name": "($id: String!)", "content": "{\n  organization(id: $id) {\n    locations {\n      ...LocationBaseDetails\n      rawAddress\n    }\n  }\n}\n    ${LocationBaseDetailsFragmentDoc}"}, {"type": "mutation", "name": "updateAPIDefinition($id: ID!, $in: APIDefinitionInput!)", "content": "{\n      getPostIAMWithKeysByDate(type: \"Post\") {\n        items {\n          id\n          title\n          type\n          date\n        }\n      }\n    }"}, {"type": "mutation", "name": "CreateTaskGroup($input: CreateTaskGroupInput!)", "content": "{\n        searchPosts {\n          items {\n            id\n            content\n            secret\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "CreateRider($riderInput:RiderInput!)", "content": "{\n  posts(\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_tip_id: {_in: $onchainTipIds}}}\n    order_by: {onchain_link: {id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_tip_id\n      onchain_tip(where: {}) {\n        id\n        reason\n        tipStatus(last: 1) {\n          id\n          status\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "mutation", "name": "SendFromNode($from: String!, $to: String!, $value: String!)", "content": "{\n        techCommitteeProposal (\n            where: {\n\t\t\t\tnode: {\n\t\t\t\t\tstatus_some: {\n\t\t\t\t\t\tAND: [\n\t\t\t\t\t\t\t{ status: \"Proposed\" },\n\t\t\t\t\t\t\t{ blockNumber: { number_gte: $startBlock } }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        ){\n            mutation\n            node {\n                id\n                author\n\t\t\t\tproposalId\n                status(orderBy: id_DESC) {\n                    blockNumber {\n                        number\n                    }\n                    status\n                }\n            }\n        }\n    }"}, {"type": "mutation", "name": "MakeOffer($listingID: String!, $value: String!, $from: String)", "content": "{\n    application(id: $id) {\n      id\n      providerName\n      description\n      name\n      labels\n      healthCheckURL\n      integrationSystemID\n      status {\n        condition\n      }\n      packages {\n        data {\n          id\n          name\n          description\n          defaultInstanceAuth {\n            credential {\n              __typename\n            }\n          }\n          apiDefinitions {\n            totalCount\n          }\n          eventDefinitions {\n            totalCount\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "dashboardView_Contacts($pagination: Pagination!, $where: Filter, $sort: SortBy)", "content": "{\n    oAuth2Client(namespace: $namespace, name: $name) {\n      name\n      namespace\n      generation\n      error {\n        code\n        description\n      }\n      spec {\n        grantTypes\n        responseTypes\n        scope\n        secretName\n      }\n    }\n  }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n    resyncAddonsConfiguration(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "subscription", "name": "getLogsSubscription($appID: String!, $service: String, $from: Timestamp)", "content": "{\n            createGroup(input: $input) {\n              id\n              name\n              object\n              created_at\n              updated_at\n              users {\n                id\n              }\n              users_count\n              servers {\n                id\n              }\n              servers_count\n            }\n          }"}, {"type": "query", "name": "Posts ($marketId: ID!, $minVotes: Int!)", "content": "{\n    signMessage(address: $address, message: $message)\n  }"}, {"type": "query", "name": "listEnvironmentGroups($filter: GroupFilter, $environmentUri: String)", "content": "{\n            pickNotesFromBalance(\n                assetId: $assetId,\n                amount: $amount,\n                owner: $owner,\n                numberOfNotes: $numberOfNotes\n                excludedNotes: $excludedNotes\n            ) {\n                notes {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n    web3 {\n      transactionReceipt(id: $id) {\n        id\n        blockNumber\n        events {\n          id\n          event\n          returnValues {\n            listingID\n            offerID\n            party\n            ipfsHash\n          }\n          returnValuesArr {\n            field\n            value\n          }\n        }\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n              test(foo: $foo)\n            }"}, {"type": "mutation", "name": "DisputeOffer($offerID: String, $from: String)", "content": "{\n            book(id: $id) {\n              title\n              pages\n              chapters\n              authors {\n                name\n              }\n            }\n          }"}, {"type": "mutation", "name": "WithdrawListing(\n    $data: String!\n    $from: String!\n    $listingID: String\n    $offerID: String\n  )", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        listings(first: $first, after: $after) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            ...basicListingFields\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "mutation", "name": "UnlinkMobileWallet", "content": "{\n  subscriptionRiderLocation(riderId:$riderId) {\n    _id\n    location {\n      latitude\n      longitude\n    }\n  }\n}"}, {"type": "query", "name": "GetRolesPermissions($appId: uuid!)", "content": "{\n      deleteDataset(datasetUri: $datasetUri, deleteFromAWS: $deleteFromAWS)\n    }"}, {"type": "mutation", "name": "resendConfirmPhoneActionSms($data: ResendConfirmPhoneActionSmsInput!)", "content": "{\n    posts (\n      first: 10,\n      orderBy: [{ createdAt: DESC }],\n      filter: { market: { value: $marketId }, votes: { value: $minVotes, comparator: GREATER_THAN_OR_EQUAL } }\n    ) {\n      ...RssPosts\n    }\n  }\n  ${RSS_POSTS_FRAGMENT}"}, {"type": "mutation", "name": "authenticateUserWithPhoneAndPassword ($phone: String!, $password: String!)", "content": "{MODEL}($id: ID!) {\n            obj: delete${MODEL}(id: $id) ${fields}\n        }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n    campaign(id: $id) {\n      ...basicCampaignFields\n    }\n  }\n  ${fragments.GrowthCampaign.basic}"}, {"type": "query", "name": "getRolls", "content": "{\n      deleteTaskGroup(input: $input) {\n        id\n        title\n        description\n        priority\n        severity\n        groups\n        singleGroup\n      }\n    }"}, {"type": "mutation", "name": "deleteWorkspaceMember($id: uuid!)", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "mutation", "name": "signin($identity: String, $secret: String)", "content": "{\n    subscribeOrderStatus(_id:$_id){\n        _id\n        orderId\n        orderStatus\n        rider{\n            name\n        }\n    }\n}"}, {"type": "query", "name": "", "content": "{\n        createCreditCard(input: { userID:\"${USERNAME1}\", number:\"10000\", expMonth: \"07\", expYear: \"2027\", name: \"platimum\", issuer: \"amex\" }) {\n            userID\n        }\n      }"}, {"type": "mutation", "name": "SetOrderCustomer($input: CreateCustomerInput!)", "content": "{\n        deleteAddon(id:$id,restaurant:$restaurant){\n          _id\n          addons{\n            _id\n            options\n            title\n            description\n            quantityMinimum\n            quantityMaximum\n          }\n        }\n      }"}, {"type": "mutation", "name": "AddOptionPollVote($optionPollId: Int!, $userId: Int!, $option: String!)", "content": "{\n    importWallets(accounts: $accounts) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n  restaurant(id:$id,slug:$slug){\n    _id\n    orderId\n    orderPrefix\n    name\n    image\n    slug\n    address\n    location{coordinates}\n    deliveryTime\n    minimumOrder\n    tax\n    reviewData{\n      total\n      ratings\n      reviews{\n        _id\n        order{\n          user{\n            _id\n            name\n            email\n          }\n        }\n        rating\n        description\n        createdAt\n      }\n    }\n    categories{\n      _id\n      title\n      foods{\n        _id\n        title\n        image\n        description\n        variations{\n          _id\n          title\n          price\n          discounted\n          addons\n        }\n      }\n    }\n    options{\n      _id\n      title\n      description\n      price\n    }\n    addons{\n      _id\n      options\n      title\n      description\n      quantityMinimum\n      quantityMaximum\n    }\n    zone{\n      _id\n      title\n      tax\n    }\n    rating\n    isAvailable\n    openingTimes{\n      day\n      times{\n        startTime\n        endTime\n      }\n    }\n  }\n}"}, {"type": "query", "name": "Note1ByNoteTypeAndOwner($noteType: String!, $owner: ModelStringKeyConditionInput)", "content": "{\n\taddSong(title: $title, events: $events) {\n\t\tid\n\t\ttitle\n\t\tevents{\n\t\t\tactiveNotes\n\t\t\tduration\n\t\t}\n\t}\n}"}, {"type": "subscription", "name": "OnDeleteTaskGroup(\n            $filter: ModelSubscriptionTaskGroupFilterInput\n          )", "content": "{\n  saveOrderConfiguration(configurationInput:$configurationInput){\n    _id\n    order_id_prefix\n  }\n}"}, {"type": "query", "name": "UserListings($id: ID!, $first: Int, $after: String, $filter: String)", "content": "{\n    config\n    configObj {\n      affiliate\n      arbitrator\n      discovery\n      growth\n      graphql\n      bridge\n      ipfsRPC\n      ipfsGateway\n      ipfsEventCache\n      provider\n      providerWS\n      proxyAccountsEnabled\n      relayerEnabled\n      originGraphQLVersion\n      relayer\n      performanceMode\n      marketplaceVersion\n      messaging {\n        globalKeyServer\n        messagingNamespace\n      }\n      centralizedIdentityEnabled\n      authServer\n    }\n  }"}, {"type": "mutation", "name": "updateWorkspace($id: uuid!, $workspace: workspaces_set_input!)", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "query", "name": "getSite($siteID: ID!)", "content": "{\n      listOrganizationTopics(\n        organizationUri: $organizationUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          label\n          topicUri\n          description\n        }\n      }\n    }"}, {"type": "mutation", "name": "ForgotPassword($email:String!, $otp:String!)", "content": "{\n                  allArchivedBlogs {\n                    id\n                    title\n                    content\n                    userId\n                    archived\n                  }\n                }"}, {"type": "mutation", "name": "DeleteStudent($input: DeleteStudentInput!)", "content": "{\n        result: getAccessTokenByUserId(data: $data) { accessToken, ttl }\n    }"}, {"type": "query", "name": "getDataPipelineEnvironment($envPipelineUri: String!)", "content": "{\n    members(where: { memberAddress: $memberAddress, exists: true }) {\n      id\n      memberAddress\n      moloch {\n        id\n        title\n        version\n        proposals(orderBy: proposalId, orderDirection: desc, first: 10) {\n          id\n          createdAt\n          proposalId\n          proposalIndex\n          processed\n          sponsored\n          details\n          newMember\n          whitelist\n          guildkick\n          trade\n          cancelled\n          aborted\n          votingPeriodStarts\n          votingPeriodEnds\n          gracePeriodEnds\n          molochAddress\n          molochVersion\n          proposalType @client\n          description @client\n          title @client\n          activityFeed @client\n          votes(where: { memberAddress: $memberAddress }) {\n            id\n            memberAddress\n          }\n        }\n        rageQuits {\n          id\n          createdAt\n          shares\n          loot\n          memberAddress\n          molochAddress\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Shop($id: Int!)", "content": "{\n    moloches(orderBy: summoningTime, first: 100, skip: $skip) {\n      id\n      apiData @client\n      version\n      title\n      totalShares\n      summoningTime\n      guildBankAddress\n      guildBankBalanceV1\n      members {\n        id\n        memberAddress\n        createdAt\n      }\n      proposals {\n        id\n        createdAt\n        votes {\n          id\n          createdAt\n        }\n      }\n      depositToken {\n        tokenAddress\n        symbol\n        decimals\n      }\n      tokenBalances {\n        id\n        tokenBalance\n        guildBank\n        token {\n          decimals\n          tokenAddress\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "CompanySettings($id: ID!)", "content": "{\n  login(email:$email,password:$password,type:$type,appleId:$appleId,name:$name,notificationToken:$notificationToken){\n   userId\n   token\n   tokenExpiration\n   name\n   email\n   phone\n }\n}"}, {"type": "query", "name": "GetUserProfile($username: String)", "content": "{\n    sessions {\n      session(id: $sessionId) {\n        update {\n          update(session: $session) {\n            id\n            type\n            category\n            status\n            title\n            shortDescription\n            longDescription\n            primaryCategory\n            secondaryCategory\n            targetAudience\n            supportingArtifacts {\n              name\n              url\n            }\n            prerequisites\n            agenda\n            takeaways\n            canRecord\n            mentorship\n            whyAreYou\n            otherComments\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "SendChatMessage($orderId: ID!, $messageInput: ChatMessageInput!)", "content": "{\n  logsVolume: getLogsVolume(appID: $appId, from: $from, to: $to) {\n    value\n  }\n  cpuSecondsUsage: getCPUSecondsUsage(appID: $appId, from: $from, to: $to) {\n    value\n  }\n  functionInvocations: getFunctionsInvocations(\n    appID: $appId\n    from: $from\n    to: $to\n  ) {\n    value\n  }\n  postgresVolumeCapacity: getPostgresVolumeCapacity(appID: $appId) {\n    value\n  }\n  postgresVolumeUsage: getPostgresVolumeUsage(appID: $appId) {\n    value\n  }\n  totalRequests: getTotalRequests(appID: $appId, from: $from, to: $to) {\n    value\n  }\n  egressVolume: getEgressVolume(\n    appID: $appId\n    subdomain: $subdomain\n    from: $from\n    to: $to\n  ) {\n    value\n  }\n}"}, {"type": "mutation", "name": "enroll(\n    $uuid: String!\n    $group: String!\n    $fromDate: DateTime\n    $toDate: DateTime\n    $parentOrg: String\n  )", "content": "{\n      approveShareObject(shareUri: $shareUri) {\n        shareUri\n        status\n      }\n    }"}, {"type": "mutation", "name": "ResetPassword($password:String!,$email:String!)", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "mutation", "name": "($username: String!, $password: String!)", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "genderize(\n    $uuids: [String]\n    $exclude: Boolean\n    $noStrictMatching: Boolean\n  )", "content": "{\n    user: currentUser {\n      ...userInfo\n      ...userDirectMessageThreadConnection\n    }\n  }\n  ${userInfoFragment}\n  ${userDirectMessageThreadsConnectionFragment}"}, {"type": "mutation", "name": "removeNote($id: ID!)", "content": "{\n      publishDatasetUpdate(datasetUri: $datasetUri, s3Prefix: $s3Prefix)\n    }"}, {"type": "mutation", "name": "removeClusterAddonsConfigurationURLs(\n    $name: String!\n    $urls: [String!]!\n  )", "content": "{\n      createMember(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n      }\n    }"}, {"type": "query", "name": "LatestDiscussionPosts($limit: Int! = 20)", "content": "{\n      listDatasetsCreatedInEnvironment(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          datasetUri\n          label\n          AwsAccountId\n          region\n          GlueDatabaseName\n          SamlAdminGroupName\n          name\n          S3BucketName\n          created\n          owner\n          stack {\n            status\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "SearchPosts", "content": "{\n        objs: allProperties(where: $where, orderBy: $orderBy, first: $first, skip: $skip) {\n            id\n            address\n            map { sections { floors { units { type label } } } parking { floors { units { type label } } } }\n        }\n    }"}, {"type": "query", "name": "SearchResources($filter: SearchInputFilter)", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "UpdateMember($input: UpdateMemberInput!)", "content": "{\n      listEnvironmentGroupInvitationPermissions(\n        environmentUri: $environmentUri\n      ) {\n        permissionUri\n        name\n        description\n      }\n    }"}, {"type": "mutation", "name": "updateApplication($appId: uuid!, $app: apps_set_input!)", "content": "{\n    riderLogin(username:$username,password:$password,notificationToken:$notificationToken){\n      userId\n      token\n    }\n  }"}, {"type": "query", "name": "DataQuery(\n    $id: ID!\n    $class: String!\n    $q: String!\n    $page: Int = 1\n    $size: Int = 20\n    $query_all: Boolean!\n    $search_filter_args: SearchFilterArgs!\n  )", "content": "{\n  userCommunitiesCount\n}"}, {"type": "mutation", "name": "ImportWallet($role: String, $name: String, $privateKey: String!)", "content": "{\n    user: currentUser {\n      id\n      ...userEverythingConnection\n    }\n  }\n  ${userEverythingConnectionFragment}"}, {"type": "mutation", "name": "($thread: CmsThread, $id: ID!)", "content": "{\n    checkTelegramStatus(identity: $identity, maxTries: $maxTries) {\n      success\n      reason\n      data {\n        attestation\n        verified\n      }\n    }\n  }"}, {"type": "mutation", "name": "AddOptionPollVote ($optionPollId: Int!, $userId: Int!, $option: String!)", "content": "{\n  update_onchain_links(where: {onchain_treasury_proposal_id: {_eq: $treasuryProposalId}}, _set: {onchain_motion_id: $motionId}) {\n    affected_rows\n  }\n}"}, {"type": "mutation", "name": "CreateComment($input: CreateCommentInput!)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        offers(first: $first, after: $after) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            id\n            listingId\n            offerId\n            listing {\n              id\n              title\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnUpdateMember", "content": "{\n    hosting {\n      name\n      status\n    }\n  }"}, {"type": "mutation", "name": "addComment($name: String!, $message: String!)", "content": "{\n      listDatasets(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          datasetUri\n          owner\n          description\n          region\n          label\n          created\n          SamlAdminGroupName\n          userRoleForDataset\n          userRoleInEnvironment\n          GlueDatabaseName\n          tags\n          topics\n          organization {\n            organizationUri\n            label\n          }\n          AwsAccountId\n          environment {\n            label\n            AwsAccountId\n            region\n          }\n          stack {\n            status\n          }\n          statistics {\n            tables\n            locations\n            upvotes\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "CreateTag($input: TagInput!)", "content": "{\n        getPostOwnerIAM(id: $id) {\n          id\n          title\n          owner\n        }\n      }"}, {"type": "query", "name": "Comments ($postId: ID!)", "content": "{\n      searchRedshiftClusters(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          clusterUri\n          environmentUri\n          name\n          label\n          description\n          tags\n          owner\n          created\n          updated\n          AwsAccountId\n          region\n          clusterArn\n          clusterName\n          created\n          databaseName\n          databaseUser\n          masterUsername\n          masterDatabaseName\n          nodeType\n          numberOfNodes\n          kmsAlias\n          status\n          subnetGroupName\n          CFNStackName\n          CFNStackStatus\n          CFNStackArn\n          port\n          endpoint\n          IAMRoles\n          subnetIds\n          securityGroupIds\n          userRoleForCluster\n          userRoleInEnvironment\n          imported\n          stack {\n            status\n          }\n          vpc\n          organization {\n            organizationUri\n            label\n            name\n          }\n          environment {\n            environmentUri\n            label\n            name\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "getBackupReposBySiteID($siteID: Int)", "content": "{\n      createTerm(parentUri: $parentUri, input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "registerApplication($in: ApplicationRegisterInput!)", "content": "{\n    uniswapDeployExchangeTemplate(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "RemoveUserFromEnvironment(\n      $environmentUri: String!\n      $userName: String!\n    )", "content": "{\n      createTodo(input: $input) {\n        id\n        groups\n        content\n      }\n    }"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n    updateTask(\n      id: $id\n      name: $name\n      description: $description\n      priority: $priority\n      status: $status\n      dueDate: $dueDate\n    ) {\n      success\n      errors {\n        path\n        message\n      }\n      task {\n        id\n        name\n        priority\n        status\n        dueDate\n        updatedAt\n        userOwners {\n          id\n          email\n          fullName\n          profileUrl\n        }\n        teamOwners {\n          id\n          name\n        }\n        userReviewers {\n          id\n          email\n          fullName\n          profileUrl\n        }\n        teamReviewers {\n          id\n          name\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "getFiles($where: files_bool_exp, $limit: Int, $offset: Int, $order_by: [files_order_by!])", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "mutation", "name": "resetUser ($data: ResetUserInput!)", "content": "{\n        onCreateTodo(\n          owner: \"${USERNAME2}\",\n          filter: { name: { eq: \"todo1\" } },\n        ) {\n          id\n          name\n          description\n          level\n          owner\n          sharedOwners\n          status\n        }\n      }"}, {"type": "mutation", "name": "resetPassword ($username: String!, $password: String!, $code: String!)", "content": "{\n    messaging(id: \"defaultAccount\") {\n      id\n      enabled\n      isKeysLoading\n      conversation(id: $id, before: $before, after: $after) {\n        id\n        timestamp\n        totalUnread\n        messages {\n          index\n          address\n          content\n          status\n          hash\n          media {\n            url\n            contentType\n          }\n          timestamp\n          type\n          offer {\n            ...basicOfferFields\n            listing {\n              ...basicListingFields\n            }\n          }\n          eventData {\n            offerID\n            eventType\n          }\n        }\n        hasMore\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "mutation", "name": "RemoveUserFromEnvironment(\n      $environmentUri: String!\n      $userName: String!\n    )", "content": "{\n  logs(appID: $appID, service: $service, from: $from) {\n    log\n    service\n    timestamp\n  }\n}"}, {"type": "query", "name": "B", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "query", "name": "HeroDetails($episode: Episode)", "content": "{\n    dislikeComment(thread: $thread, id: $id) {\n      id\n      viewerHasDisliked\n      dislikesCount\n    }\n  }"}, {"type": "query", "name": "getAllPartners", "content": "{\n            stats {\n              users_count\n              servers_count\n              groups_count\n            }\n          }"}, {"type": "query", "name": "Vendors", "content": "{\n        coupons {\n          _id\n          code\n          discount\n          enabled\n        }\n      }"}, {"type": "mutation", "name": "setCredentialsConfirm($address: String!, $email: String, $signature: String!, $username: String!, $password: String!)", "content": "{\n    createWallet(role: $role, name: $name) {\n      ...balanceFields\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "mutation", "name": "Test($foo: String!)", "content": "{\n    web3 {\n      primaryAccount {\n        id\n      }\n    }\n    marketplace {\n      listing(id: $listingId) {\n        ...basicListingFields\n        ... on Listing {\n          events {\n            id\n            event\n            blockNumber\n            block {\n              id\n              timestamp\n            }\n            returnValues {\n              ipfsHash\n              party\n              offerID\n              listingID\n            }\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "mutation", "name": "addressLinkStart($network: String!, $address: String!)", "content": "{\n    banUser(input: $input)\n  }"}, {"type": "query", "name": "AttestationProviders", "content": "{\n  setCredentialsConfirm(\n    address: $address\n    email: $email\n    signature: $signature\n    username: $username\n    password: $password\n  ) {\n    message\n    token\n  }\n}"}, {"type": "mutation", "name": "( $UserId: String! , $FileCategory: String!)", "content": "{query}"}, {"type": "query", "name": "getShareRequestsFromMe($filter: ShareObjectFilter)", "content": "{\n          profile{\n            _id\n            name\n            phone\n            phoneIsVerified\n            email\n            emailIsVerified\n            notificationToken\n            isOrderNotification\n            isOfferNotification\n            addresses{\n              _id\n              label\n              deliveryAddress\n              details\n              location{coordinates}\n              selected\n            }\n            favourite\n          }\n        }"}, {"type": "mutation", "name": "sendMessageToResidentScopes ($data: SendMessageToResidentScopesServiceInput!)", "content": "{MODELS}($where: ${MODEL}WhereInput, $first: Int = ${DEFAULT_PAGE_SIZE}, $skip: Int, $sortBy: [Sort${MODELS}By!]) {\n            objs: all${MODELS}(where: $where, first: $first, skip: $skip, sortBy: $sortBy) ${fields}\n            meta: _all${MODELS}Meta(where: $where) { count }\n        }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n    graph(graphId: $graphId) {\n      id\n      name\n      keys {\n        id\n        secret\n        prefix\n        createdAt\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnCreateStudent", "content": "{\n    availableRiders{\n      _id\n      name\n      username\n      phone\n      available\n      zone{\n        _id\n      }\n    }\n  }"}, {"type": "mutation", "name": "DisputeOffer($offerID: String, $from: String)", "content": "{\n    socialMediaLoginGoogle(input: $input) {\n      token\n      user {\n        id\n        userId\n        fullName\n        email\n        bio\n        photo\n        socialIdtoken\n        totalLikes\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n      deleteStudent(input: $input) {\n        id\n        name\n        email\n        ssn\n        owner\n      }\n    }"}, {"type": "mutation", "name": "UpdateSavedQuery(\n      $queryUri: String!\n      $input: ModifySavedQueryInput\n    )", "content": "{\n      archiveOrganization(organizationUri: $organizationUri)\n    }"}, {"type": "mutation", "name": "signin($email: String, $password: String)", "content": "{\n    resetPassword(\n      newPassword: $newPassword\n      confirmPassword: $confirmPassword\n      token: $token\n    ) {\n      caseId\n      status\n      error\n      messages\n    }\n  }"}, {"type": "mutation", "name": "deleteTeam($teamName: String!, $organization: String)", "content": "{\n      startWorksheetQuery(worksheetUri: $worksheetUri, input: $input) {\n        AthenaQueryId\n        Error\n        Status\n        DataScannedInBytes\n        ElapsedTimeInMs\n      }\n    }"}, {"type": "query", "name": "getBuckets", "content": "{\n  restoreApplicationDatabase(appID: $appId, backupID: $backupId)\n}"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "mutation", "name": "GenerateDatasetAccessToken($datasetUri: String!)", "content": "{\n        objs: allMeterResources(\n            where: {\n                id: $id\n            }\n        ) {\n            id\n            number\n            unitName\n            organization {\n                id\n            }\n        }\n    }"}, {"type": "mutation", "name": "AddAffiliate($affiliate: String!, $from: String, $version: String)", "content": "{\n    userLists {\n      id\n      lists {\n        id\n        name\n        sections {\n          id\n          name\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "editSection($section:SectionInput!)", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n        createPostOwnerIAM(input: { title: \"Hello, World!\" }) {\n          id\n          title\n          owner\n        }\n      }"}, {"type": "mutation", "name": "($title: String!, $desc: String!, $logo: String!, $raw: String!)", "content": "{\n\taddSong(title: $title, events: $events) {\n\t\tid\n\t\ttitle\n\t\tevents{\n\t\t\tactiveNotes\n\t\t\tduration\n\t\t}\n\t}\n}"}, {"type": "mutation", "name": "AddPostReaction ($postId: Int!, $userId: Int!, $reaction: bpchar!)", "content": "{\n      getSagemakerStudioUserProfilePresignedUrl(\n        sagemakerStudioUserProfileUri: $sagemakerStudioUserProfileUri\n      )\n    }"}, {"type": "mutation", "name": "insertApplication($app: apps_insert_input!)", "content": "{\n      getPostSecretFieldIAM(id: $id) {\n        id\n        title\n      }\n    }"}, {"type": "query", "name": "getMediaMessagesForThread($threadId: ID!)", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n  contact(id: $id) {\n    ...ContactPersonalDetails\n    owner {\n      id\n      firstName\n      lastName\n    }\n  }\n}\n    ${ContactPersonalDetailsFragmentDoc}"}, {"type": "query", "name": "GET_REFRESH_TOKEN", "content": "{\n      listTenantGroups(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          groupUri\n          tenantPermissions {\n            name\n            description\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetTerm($nodeUri: String!)", "content": "{\n  saveNotificationTokenWeb(token:$token){\n    success\n    message\n  }\n}"}, {"type": "mutation", "name": "Login($facebookId:String,$email:String,$password:String,$type:String!,$appleId:String,$name:String,$notificationToken:String)", "content": "{\n    deleteRuntimeLabel(runtimeID: $id, key: \"scenarios\") {\n      key\n      value\n    }\n  }"}, {"type": "query", "name": "getGithubRepositories", "content": "{\n          refreshTokens(token: $token) {\n            token\n            refreshToken\n            expiresAt\n          }\n        }"}, {"type": "mutation", "name": "", "content": "{\n        onDeleteMember {\n          id\n          name\n          createdAt\n          updatedAt\n        }\n      }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n  createTodo(\n\t\tdata: {\n      todoItem: $todoItem\n    }\n  )\n  {data{\n    todoItem,\n    taskCompleted\n  }}\n}"}, {"type": "query", "name": "GetServerSettings", "content": "{\n          profile{\n            _id\n            name\n            phone\n            phoneIsVerified\n            email\n            emailIsVerified\n            notificationToken\n            isOrderNotification\n            isOfferNotification\n            addresses{\n              _id\n              label\n              deliveryAddress\n              details\n              location{coordinates}\n              selected\n            }\n            favourite\n          }\n        }"}, {"type": "query", "name": "ListUserActivities($filter: ActivityFilter)", "content": "{\n  regions(order_by: {city: asc}) {\n    ...PrefetchNewAppRegions\n  }\n  plans(order_by: {sort: asc}) {\n    ...PrefetchNewAppPlans\n  }\n  workspaces {\n    ...PrefetchNewAppWorkspace\n  }\n}\n    ${PrefetchNewAppRegionsFragmentDoc}\n${PrefetchNewAppPlansFragmentDoc}\n${PrefetchNewAppWorkspaceFragmentDoc}"}, {"type": "mutation", "name": "EditComment ($id: uuid!, $content: String!)", "content": "{\n    hero(episode: $episode) {\n      name\n      ... on Human {\n        friends {\n          name\n          ... on Human {\n            height(unit: FOOT)\n          }\n        }\n      }\n      ... on Droid {\n        friends {\n          name\n          ... on Human {\n            height(unit: METER)\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "getAll$", "content": "{\n    deleteCommunity(communityId: $communityId)\n  }"}, {"type": "mutation", "name": "DeployIdentityContract($from: String!, $contract: String!)", "content": "{\n    me {\n      _id\n    }\n  }"}, {"type": "query", "name": "GetContactPersonalDetails($id: ID!)", "content": "{\n  oasisTransaction(hash: $hash) {\n    hash\n    fee\n    gas\n    gas_price\n    height\n    method\n    date\n    sender\n    data {\n      ... on OasisBurnEvent {\n        type\n        owner\n        tokens\n      }\n      ... on OasisTransferEvent {\n        type\n        from\n        to\n        tokens\n      }\n      ... on OasisEscrowAddEvent {\n        type\n        to\n        tokens\n      }\n      ... on OasisEscrowTakeEvent {\n        type\n        from\n        to\n        tokens\n      }\n      ... on OasisEscrowReclaimEvent {\n        type\n        from\n        shares\n      }\n      ... on OasisRegisterEntityEvent {\n        type\n        id\n        nodes\n        allow_entity_signed_nodes\n      }\n      ... on OasisRegisterNodeEvent {\n        type\n        id\n        entity_id\n        expiration\n      }\n      ... on OasisUnfreezeNodeEvent {\n        type\n        id\n      }\n      ... on OasisRegisterRuntimeEvent {\n        type\n        id\n        version\n      }\n      ... on OasisRateEvent {\n        type\n        start\n        rate\n      }\n      ... on OasisBoundEvent {\n        type\n        start\n        rate_min\n        rate_max\n      }\n      ... on OasisAmendCommissionScheduleEvent {\n        type\n        rates\n        bounds\n      }\n      ... on OasisUnknownEvent {\n        type\n        method_name\n      }\n    }\n  }\n}"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n    ordersByRestId(restaurant:$restaurant,page:$page,rows:$rows,search:$search){\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      deliveryCharges\n      tipping\n      taxationAmount\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n  }"}, {"type": "query", "name": "RPM(\n    $graphId: ID!\n    $operationId: ID\n    $to: DateTime\n    $from: DateTime\n    $traceFilters: [TraceFilter]\n  )", "content": "{\n  editOption(optionInput:$optionInput){\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n        }\n      }"}, {"type": "query", "name": "($namespace: String)", "content": "{\n  cosmosAccountHistory(address: $address, fiat: $fiat) {\n    balanceHistory {\n      address\n      denom\n      balance\n      height\n      timestamp\n      chain\n    }\n    delegations {\n      balance\n      address\n      timestamp\n    }\n    unbondings {\n      balance\n      address\n      timestamp\n    }\n    delegatorRewards {\n      balance\n      height\n      address\n      timestamp\n      denom\n    }\n    validatorCommissions {\n      balance\n      height\n      validator\n      timestamp\n      denom\n    }\n    fiatPriceHistory {\n      price\n      timestamp\n    }\n  }\n}"}, {"type": "query", "name": "Zones", "content": "{\n      updateDatasetStack(datasetUri: $datasetUri)\n    }"}, {"type": "mutation", "name": "UpdateCommission($id:String!,$commissionRate:Float!)", "content": "{\n      shop {\n        name\n        description\n        primaryDomain {\n          url\n          host\n        }\n        paymentSettings {\n          currencyCode\n        }\n      }\n      productTypes(first: 250) {\n        edges {\n          node\n        }\n      }\n    }"}, {"type": "mutation", "name": "AddAffiliate($affiliate: String, $from: String)", "content": "{\n  chatbot: editChatbot(id: $id, chatbot: $chatbot) {\n    id,\n    name,\n    description,\n    guid,\n    chatbotId\n  }\n}"}, {"type": "query", "name": "addonsConfigurations($namespace: String!)", "content": "{\n    pagedCommunities(filter: $filter) {\n      totalCount\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n      listDatasetTableColumns(tableUri: $tableUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          columnUri\n          name\n          label\n          description\n          typeName\n          columnType\n          terms {\n            count\n            page\n            pages\n            nodes {\n              linkUri\n              term {\n                label\n                created\n                path\n                nodeUri\n              }\n            }\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "WalletStatus", "content": "{\n    register(email: $email, password: $password, name: $name) {\n      token\n    }\n  }"}, {"type": "subscription", "name": "getLogsSubscription($appID: String!, $service: String, $from: Timestamp)", "content": "{\n  saveEmailConfiguration(configurationInput:$configurationInput){\n    _id\n    email\n    password\n    enable_email\n  }\n}"}, {"type": "mutation", "name": "ReportContent($network: String!, $type: String!, $content_id: String!, $reason: String!, $comments: String!)", "content": "{\n    web3 {\n      account(id: $id) {\n        id\n        owner {\n          id\n        }\n        proxy {\n          id\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetTokens", "content": "{\n    userFavourite(latitude:$latitude,longitude:$longitude) {\n      _id\n      orderId\n      orderPrefix\n      name\n      image\n      slug\n      address\n      location{coordinates}\n      deliveryTime\n      minimumOrder\n      tax\n      reviewData{\n        total\n        ratings\n        reviews{\n          _id\n          order{\n            user{\n              _id\n              name\n              email\n            }\n          }\n          rating\n          description\n          createdAt\n        }\n      }\n      categories{\n        _id\n        title\n        foods{\n          _id\n          title\n          image\n          description\n          variations{\n            _id\n            title\n            price\n            discounted\n            addons\n          }\n        }\n      }\n      options{\n        _id\n        title\n        description\n        price\n      }\n      addons{\n        _id\n        options\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n      rating\n      isAvailable\n      openingTimes{\n        day\n        times{\n          startTime\n          endTime\n        }\n      }\n     }\n  }"}, {"type": "subscription", "name": "addonsConfigurationEvent($namespace: String!)", "content": "{\n  configuration{\n    _id\n    currency\n    currencySymbol\n    deliveryRate\n  }\n}"}, {"type": "query", "name": "GetSharedDatasetTables($datasetUri: String!, $envUri: String!)", "content": "{\n    inviteInfo(code: $code) {\n      firstName\n      lastName\n      avatarURL\n    }\n  }"}, {"type": "mutation", "name": "deleteAddonsConfiguration($name: String!, $namespace: String!)", "content": "{\n            groups(page: $page, first: $first) {\n              data {\n                id\n                name\n                object\n                created_at\n                updated_at\n                users {\n                  id\n                }\n                users_count\n                servers {\n                  id\n                }\n                servers_count\n              }\n              paginatorInfo {\n                hasMorePages\n              }\n            }\n          }"}, {"type": "subscription", "name": "CallsSubscription($id: String!)", "content": "{\n            stats {\n              users_count\n              servers_count\n              groups_count\n            }\n          }"}, {"type": "mutation", "name": "resetPassword ($username: String!, $password: String!, $code: String!)", "content": "{\n  organization_Delete(id: $id) {\n    result\n  }\n}"}, {"type": "query", "name": "BountyPostAndComments($id: Int!)", "content": "{\n  contact_ByPhone(e164: $e164) {\n    id\n    ...ContactNameFragment\n  }\n}\n    ${ContactNameFragmentFragmentDoc}"}, {"type": "mutation", "name": "DeleteTodo($input: DeleteTodoInput!)", "content": "{\n    traceFilterOptions(graphId: $graphId) {\n      clientName\n      clientVersion\n      schemaTag\n      hasErrors\n    }\n  }"}, {"type": "query", "name": "DiscussionPostAndComments($id: Int!)", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            topic: {\n                id: {\n                    _eq: $postTopic\n                }\n            },\n            onchain_link: {\n                onchain_tip_id: {\n                    _is_null: false\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_tip_id\n                onchain_tip(where: {}) {\n                    id\n                    reason\n                    tipStatus(last: 1) {\n                        id\n                        status\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "subscription", "name": "onNewTransaction", "content": "{\n    addAffiliate(affiliate: $affiliate, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "HeroDetailsWithFragment($episode: Episode)", "content": "{\n    updateDescription(desc: $desc, community: $community)\n  }"}, {"type": "mutation", "name": "cancel($launchId: ID!)", "content": "{\n    executeRuling(\n      offerID: $offerID\n      amount: $amount\n      ruling: $ruling\n      commission: $commission\n      message: $message\n      refund: $refund\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "getMeterResource (\n        $id: ID,\n        $organizationId: ID,\n        $propertyId: ID,\n        $unitName: String\n    )", "content": "{\n      getCommentConnection(id: $commentId) {\n        id\n        content\n      }\n    }"}, {"type": "mutation", "name": "sendMessageToResidentScopes ($data: SendMessageToResidentScopesServiceInput!)", "content": "{\n    deployIdentityEvents(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    sessions {\n      me {\n        session(id: $sessionId) {\n          id\n          type\n          category\n          status\n          title\n          shortDescription\n          longDescription\n          primaryCategory\n          secondaryCategory\n          targetAudience\n          supportingArtifacts {\n            name\n            url\n          }\n          prerequisites\n          agenda\n          takeaways\n          canRecord\n          mentorship\n          whyAreYou\n          otherComments\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n  meeting_LinkRecording(meetingId: $meetingId, attachmentId: $attachmentId) {\n    id\n    attendedBy {\n      ... on UserParticipant {\n        userParticipant {\n          id\n          firstName\n          lastName\n        }\n      }\n      ... on ContactParticipant {\n        contactParticipant {\n          id\n          firstName\n          lastName\n          name\n        }\n      }\n    }\n    recording {\n      id\n    }\n    meetingStartedAt: startedAt\n    agenda\n  }\n}"}, {"type": "query", "name": "getComposerCommunitiesAndChannels", "content": "{\n  apps(where: {workspace: {slug: {_eq: $workspace}}, slug: {_eq: $slug}}) {\n    id\n    subdomain\n    plan {\n      name\n      price\n      upatedAt\n      featureMaxDbSize\n    }\n  }\n}"}, {"type": "query", "name": "C", "content": "{\n    hero(episode: $episode) {\n      name\n      friends {\n        name\n      }\n    }\n  }"}, {"type": "mutation", "name": "UploadToken($pushToken:String!)", "content": "{\n      createRedshiftCluster(\n        environmentUri: $environmentUri\n        clusterInput: $clusterInput\n      ) {\n        clusterUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "unify($criteria: [String], $exclude: Boolean)", "content": "{\n      updateStack(targetUri: $targetUri, targetType: $targetType) {\n        stackUri\n        targetUri\n        name\n      }\n    }"}, {"type": "mutation", "name": "PlaceOrder($restaurant:String!,$orderInput:[OrderInput!]!,$paymentMethod:String!,$couponCode:String,$tipping:Float!, $taxationAmount: Float!,$address:AddressInput!, $orderDate: String!,$isPickedUp: Boolean!, $deliveryCharges: Float!)", "content": "{\n    configuration{\n      _id\n      currency\n      currency_symbol\n      delivery_charges\n    }\n  }"}, {"type": "query", "name": "GetCartItems", "content": "{\n  deleteAccount(password: $password) {\n    message\n  }\n}"}, {"type": "query", "name": "", "content": "{\n    createAPIRule(name: $name, namespace: $namespace, params: $params) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "updateSubscription(\n    $namespace: String!\n    $name: String!\n    $params: EventSubscriptionSpecInput!\n  )", "content": "{\n          f\n        }"}, {"type": "mutation", "name": "LogSocialShare($contentId: String!, $actionType: GrowthActionType!)", "content": "{\n  location_Update(input: $input) {\n    locality\n    rawAddress\n    postalCode\n    street\n  }\n}"}, {"type": "mutation", "name": "SetNetwork($network: String, $customConfig: ConfigInput)", "content": "{\n    serverStateUpdate {\n      state\n    }\n  }"}, {"type": "subscription", "name": "onTransactionUpdated", "content": "{\n    launch(id: $launchId) {\n      ...LaunchTile\n    }\n  }\n  ${LAUNCH_TILE_DATA}"}, {"type": "query", "name": "LatestDemocracyTreasuryProposalPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5)", "content": "{\n    community(slug: $slug) {\n      ...communityInfo\n      ...communityMetaData\n      ...communitySettings\n    }\n  }\n  ${communityInfoFragment}\n  ${communitySettingsFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "GetResources($appId: uuid!)", "content": "{\n      listRedshiftClusterAvailableDatasets(\n        clusterUri: $clusterUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          datasetUri\n          name\n          AwsAccountId\n          region\n          S3BucketName\n          GlueDatabaseName\n          created\n          owner\n          label\n          region\n          tags\n          userRoleForDataset\n          redshiftClusterPermission(clusterUri: $clusterUri)\n          description\n          organization {\n            name\n            organizationUri\n            label\n          }\n          statistics {\n            tables\n            locations\n          }\n          environment {\n            environmentUri\n            name\n            AwsAccountId\n            SamlGroupName\n            region\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "getChannelBySlugAndCommunitySlug(\n    $channelSlug: LowercaseString\n    $communitySlug: LowercaseString\n  )", "content": "{\n    namespaces(\n      withSystemNamespaces: $showSystemNamespaces\n      withInactiveStatus: false\n    ) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "($followingId: String!, $userId: String!)", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "mutation", "name": "updateCover($input: String!, $cover: String!)", "content": "{\n  sections{\n    _id\n    name\n    enabled\n    restaurants{\n      _id\n      name\n    }\n  }\n}"}, {"type": "mutation", "name": "LogSocialShare($contentId: String!, $actionType: GrowthActionType!)", "content": "{\n  contact(id: $id) {\n    id\n    tags {\n      ...Tag\n    }\n  }\n}\n    ${TagFragmentDoc}"}, {"type": "mutation", "name": "RemoveDatasetContributor($datasetUri: String, $userName: String)", "content": "{\n      startDatasetProfilingRun(input: $input) {\n        profilingRunUri\n      }\n    }"}, {"type": "subscription", "name": "SubscriptionOrder($id:String!)", "content": "{\n          searchBlogs(aggregates: [{ name: \"Terms\", type: terms, field: secret }]) {\n            aggregateItems {\n              name\n              result {\n                ... on SearchableAggregateBucketResult {\n                  buckets {\n                    doc_count\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }"}, {"type": "mutation", "name": "addPostAndBountyMutation($onchainBountyId: Int!, $authorId: Int!, $proposerAddress: String!, $content: String!, $topicId: Int!, $typeId: Int!)", "content": "{\n        onDeleteStudent {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "mutation", "name": "updateResourceQuota(\n    $namespace: String!\n    $name: String!\n    $json: JSON!\n  )", "content": "{\n    setActiveWallet(address: $address) {\n      ...balanceFields\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "mutation", "name": "InviteNewCompanyToList(\n    $listId: ID!\n    $companyId: ID!\n    $ownerEmail: String!\n    $newCompanyName: String!\n    $isRequest: Boolean\n    $isShare: Boolean\n  )", "content": "{\n      createRedshiftCluster(\n        environmentUri: $environmentUri\n        clusterInput: $clusterInput\n      ) {\n        clusterUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "query", "name": "GetOrganizations(\n    $page: Int!\n    $pageSize: Int!\n    $filters: OrganizationFilterType\n  )", "content": "{\n  config(appID: $appId, resolve: true) {\n    id: __typename\n    __typename\n    provider {\n      id: __typename\n      __typename\n      smtp {\n        host\n        method\n        port\n        secure\n        sender\n        user\n      }\n    }\n  }\n}"}, {"type": "mutation", "name": "UpdateCategory($nodeUri: String!, $input: UpdateCategoryInput)", "content": "{\n    setTag(thread: $thread, id: $id, tagId: $tagId, communityId: $communityId) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UniswapAddLiquidity(\n    $from: String!\n    $exchange: String!\n    $value: String!\n    $tokens: String!\n    $liquidity: String!\n  )", "content": "{\n    runtimes(filter: $filter) {\n      data {\n        name\n        id\n        labels\n      }\n      totalCount\n    }\n  }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n    addData(\n      data: $data\n      listingID: $listingID\n      offerID: $offerID\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "_internalSyncContactsWithResidentsForOrganization ($data: _internalSyncContactsWithResidentsForOrganizationInput!)", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "query", "name": "($_id: ID, $email: String)", "content": "{\n  tag_Update(input: $input) {\n    id\n    name\n  }\n}"}, {"type": "query", "name": "aggSearch", "content": "{\n    updateDevice(deviceId: $deviceId, mac: $mac, name: $name, ownerId: $ownerId, followerIds: $followerIds) {\n      _id\n    }\n  }"}, {"type": "mutation", "name": "createRFP($input: inputRFP!)", "content": "{\n        onCreateStudent {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "query", "name": "Post ($slug: String!)", "content": "{\n    executeRuling(\n      offerID: $offerID\n      amount: $amount\n      ruling: $ruling\n      commission: $commission\n      message: $message\n      refund: $refund\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n        onCreatePost {\n          id\n          title\n          postOwner\n        }\n      }"}, {"type": "mutation", "name": "AddPollVote ($pollId: Int!, $userId: Int!, $vote: bpchar!)", "content": "{\n    removePartner(input: $input) {\n      partner {\n        name\n        address\n        role\n      }\n    }\n  }"}, {"type": "mutation", "name": "updateCover($input: String!, $cover: String!)", "content": "{\n    updateProfile(profile: $profile) {\n      id\n    }\n  }"}, {"type": "query", "name": "ListDatasetQualityRules(\n      $datasetUri: String!\n      $filter: DatasetQualityRuleFilter\n    )", "content": "{\n      updateDatasetContributor(\n        datasetUri: $datasetUri\n        userName: $userName\n        role: $role\n      ) {\n        datasetUri\n        label\n        userRoleForDataset\n      }\n    }"}, {"type": "query", "name": "roles($namespace: String!)", "content": "{\n    partner {\n      name\n      address\n      role\n      identity\n    }\n  }"}, {"type": "query", "name": "getPartnerByLevel($eventId: ID!, $level: PartnershipLevel!)", "content": "{\n    cancelOrder(_id:$_id,reason:$reason){\n        _id\n      orderStatus\n    }\n}"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n    clusterRoleBindings {\n      name\n      roleRef {\n        name\n      }\n    }\n  }"}, {"type": "mutation", "name": "createSagemakerStudioUserProfile(\n      $input: NewSagemakerStudioUserProfileInput\n    )", "content": "{\n  user(userId: $userId) {\n    id,\n    first_name,\n    last_name,\n    username,\n    payload\n  }\n}"}, {"type": "query", "name": "GetNotification", "content": "{\n      dismissTermAssociation(linkUri: $linkUri)\n    }"}, {"type": "mutation", "name": "createServiceBindingUsage(\n    $createServiceBindingUsageInput: CreateServiceBindingUsageInput\n    $namespace: String!\n  )", "content": "{\n        createPostPublic(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "GetOrganization($organizationUri: String!)", "content": "{MODELS}Meta($where: ${MODEL}WhereInput) {\n        meta: _all${MODELS}Meta(where: $where) { count }\n        }"}, {"type": "mutation", "name": "DeployIdentity(\n    $from: String!\n    $profile: ProfileInput\n    $attestations: [String]\n  )", "content": "{\n        updateSchema(input: $input) {\n          id\n        }\n      }"}, {"type": "query", "name": "GRAPH_SETTINGS($graphId: ID!)", "content": "{\n        result: changePhoneNumberResidentUser(data: $data) { status }\n    }"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n    removeClusterAddonsConfigurationURLs(name: $name, urls: $urls) {\n      name\n    }\n  }"}, {"type": "query", "name": "predictTicketClassification ($data: PredictTicketClassificationInput!)", "content": "{\n  updateWorkspace(pk_columns: {id: $id}, _set: $workspace) {\n    id\n    name\n    email\n    companyName\n    addressLine1\n    addressLine2\n    addressPostalCode\n    addressCity\n    addressCountryCode\n    slug\n    taxIdType\n    taxIdValue\n  }\n}"}, {"type": "mutation", "name": "WithdrawListing(\n    $listingID: String!\n    $target: String!\n    $from: String\n  )", "content": "{\n    withdrawListing(\n      listingID: $listingID\n      target: $target\n      reason: $reason\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n        getPostOwnerIAM(id: $id) {\n          id\n          title\n          owner\n        }\n      }"}, {"type": "mutation", "name": "CreateUser ($email: String!, $username: String!, $password: String!)", "content": "{\n        result: getAccessTokenByUserId(data: $data) { accessToken, ttl }\n    }"}, {"type": "query", "name": "Foods($page:Int)", "content": "{\n  verifyEmail(token: $token) {\n    message\n    token\n  }\n}"}, {"type": "query", "name": "ListDatasetsCreatedInEnvironment(\n      $filter: DatasetFilter\n      $environmentUri: String\n    )", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "mutation", "name": "UpdateDataset($datasetUri: String, $input: ModifyDatasetInput)", "content": "{\n      restaurant(id:$id){\n      _id\n      orderId\n      orderPrefix\n      slug\n      name\n      image\n      address\n      location{coordinates}\n      deliveryTime\n      minimumOrder\n      tax\n      categories{\n        _id\n        title\n        foods{\n          _id\n          title\n          description\n          variations{\n            _id\n            title\n            price\n            discounted\n            addons\n          }\n          image\n          isActive\n        }\n      }\n      options{\n        _id\n        title\n        description\n        price\n      }\n      addons{\n        _id\n        options\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n      \n    }\n}"}, {"type": "query", "name": "celoSystemBalances", "content": "{\n    employee(\n      _id: $_id\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      phoneNumber: $phoneNumber\n    ) {\n      _id\n      firstName\n      lastName\n      email\n      phoneNumber\n      employeeRole\n      permanentPasswordSet\n      password\n      tokenCount\n      createdAt\n      profilePicture\n      notifications {\n        _id\n        new\n        type\n        date\n        time\n        allDay\n        associatedClientFirstName\n        associatedClientLastName\n        originalAssociatedStaffFirstName\n        originalAssociatedStaffLastName\n        newAssociatedStaffFirstName\n        newAssociatedStaffLastName\n        createdByFirstName\n        createdByLastName\n        createdAt\n      }\n    }\n  }"}, {"type": "mutation", "name": "addAppointmentMutation(\n    $date: String!\n    $startTime: String!\n    $morningOrEvening: String!\n    $endTime: String!\n    $duration: Int!\n    $price: Int!\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $phoneNumber: String!\n    $esthetician: String!\n    $squareCustomerId: String\n    $unsavedSquareCardIDs: String\n    $bookedWithCardSquareID: String\n    $treatments: [TreatmentInput]\n    $addOns: [AddOnInput]\n    $notes: String\n  )", "content": "{\n    communities {\n      community(findBy: $communityInput) {\n        get {\n          id\n          name\n          events(filter: ACTIVE) {\n            id\n            name\n            slug\n            slogan\n            description\n            startDate\n            endDate\n            website\n            partners {\n              id\n              slug\n              level\n              placement\n              companyName\n              companyLogo\n            }\n            notifications {\n              id\n              shouldFeature\n              title\n              message\n              startDate\n              endDate\n              link\n              linkText\n            }\n            theme {\n              primary\n              secondary\n              heroSlug\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "deleteClusterRoleBinding($name: String!)", "content": "{\n  reviewRequests: search(type: ISSUE, query: $reviewRequestsQueryString, last: 20) {\n    nodes {\n      ... on PullRequest {\n        ...prFields\n      }\n    }\n  }\n  reviewed: search(type: ISSUE, query: $reviewedQueryString, last: 20) {\n    nodes {\n      ... on PullRequest {\n        ...prFields\n        ...lastCommentFields\n        reviews(author: $login, last: 10) {\n          nodes {\n            ...reviewFields\n            commit {\n              oid\n            }\n          }\n        }\n        commits(last: 20) {\n          nodes {\n            commit {\n              additions\n              deletions\n              changedFiles\n              authoredDate\n              pushedDate\n              oid\n            }\n          }\n        }\n      }\n    }\n  }\n  mentions: search(type: ISSUE, query: $mentionsQueryString, last: 20) {\n    nodes {\n      ...mentionedFields\n    }\n  }\n\n  rateLimit {\n    cost\n    limit\n    remaining\n    resetAt\n    nodeCount\n  }\n}\n\n${prFragment}\n${reviewFragment}\n${lastCommentFragment}\n\nfragment mentionedFields on PullRequest {\n  id\n  comments(last: 10) {\n    nodes {\n      createdAt\n      bodyText\n      url\n    }\n  }\n  reviews(last: 10) {\n    nodes {\n      bodyText\n      createdAt\n      url\n      comments(last: 10) {\n        nodes {\n          createdAt\n          bodyText\n          url\n        }\n      }\n    }\n  }\n}"}, {"type": "query", "name": "GetRuntimes($after: PageCursor)", "content": "{\n  updateWorkspace(pk_columns: {id: $id}, _set: $workspace) {\n    id\n    name\n    email\n    companyName\n    addressLine1\n    addressLine2\n    addressPostalCode\n    addressCity\n    addressCountryCode\n    slug\n    taxIdType\n    taxIdValue\n  }\n}"}, {"type": "query", "name": "getAll$", "content": "{\n  cosmosValidators(network: $network) {\n    operator_address\n    consensus_pubkey\n    jailed\n    status\n    tokens\n    delegator_shares\n    description {\n      moniker\n      identity\n      website\n      details\n    }\n    unbonding_height\n    unbonding_time\n    commission {\n      update_time\n      commission_rates {\n        rate\n        max_rate\n        max_change_rate\n      }\n    }\n    min_self_delegation\n  }\n}"}, {"type": "query", "name": "RepoLabels($owner: String!, $repo: String!, $cursor: String)", "content": "{\n      deleteDatasetStorageLocation(locationUri: $locationUri)\n    }"}, {"type": "mutation", "name": "( $UserId: String! , $FileCategory: String!)", "content": "{\n    user(id: \"1\") {\n      ...userFields\n    }\n\n    friend: user(id: \"2\") {\n      ...usernameFragment\n    }\n  }\n\n  ${userFields}\n  ${usernameFragment}"}, {"type": "query", "name": "GetCurrencyBalances(\n    $tokens: [String]\n    $account: String!\n    $proxy: String!\n    $useProxy: Boolean!\n    $target: String!\n  )", "content": "{\n        createNote3(input: $input) {\n            noteId\n            noteType\n            group\n        }\n      }"}, {"type": "mutation", "name": "verifyEmail ($username: String!, $code: String!)", "content": "{\n      startDatasetProfilingRun(input: $input) {\n        profilingRunUri\n      }\n    }"}, {"type": "mutation", "name": "UpdateRiderLocation($latitude:String!,$longitude:String!)", "content": "{\n    withdrawListing(\n      listingID: $listingID\n      target: $target\n      reason: $reason\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "getSagemakerNotebookPresignedUrl($notebookUri: String!)", "content": "{\n        actions {\n            _id\n            action,\n            name,\n            equation\n        }\n    }"}, {"type": "query", "name": "DiscussionPostAndComments($id: Int!)", "content": "{\n  updateCommission(id:$id,commissionRate:$commissionRate){\n    _id\n    commissionRate\n  }\n}"}, {"type": "mutation", "name": "deleteTrigger($namespace: String!, $triggerName: String!)", "content": "{\n    updateSubscription(name: $name, namespace: $namespace, params: $params) {\n      name\n    }\n  }"}, {"type": "query", "name": "GetCrawlerStatus($datasetUri:String, name:String)", "content": "{\n  createCoupon(couponInput:$couponInput){\n    _id\n    title\n    discount\n    enabled\n  }\n}"}, {"type": "query", "name": "AccountBalance($id: ID!)", "content": "{\n  posts(where: {onchain_link: {onchain_tech_committee_proposal_id: {_eq: $id}}}) {\n    ...techCommitteeProposalPost\n  }\n}\n    ${TechCommitteeProposalPostFragmentDoc}"}, {"type": "mutation", "name": "createSagemakerStudioUserProfile(\n      $input: NewSagemakerStudioUserProfileInput\n    )", "content": "{\n  updateApp(pk_columns: {id: $appId}, _set: {desiredState: 5}) {\n    id\n  }\n}"}, {"type": "subscription", "name": "OnCreatePost", "content": "{\n  cosmosDistributionParameters(network: $network) {\n    base_proposer_reward\n    bonus_proposer_reward\n    community_tax\n  }\n}"}, {"type": "query", "name": "getDatasetTableProfilingRun($tableUri: String!)", "content": "{\n  profile(username: $username) {\n    id\n    username\n    kusama_default_address\n    polkadot_default_address\n  }\n}"}, {"type": "mutation", "name": "createOptionPoll($postId: Int!, $question: String!, $options: String!, $endAt: Int!)", "content": "{\n      createNetwork(input: $input) {\n        vpcUri\n        VpcId\n        label\n        description\n        tags\n        owner\n        SamlGroupName\n        privateSubnetIds\n        privateSubnetIds\n      }\n    }"}, {"type": "mutation", "name": "update$", "content": "{\n      createTodo(input: $input) {\n        id\n        description\n        name\n      }\n    }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n    marketplaces {\n      address\n      totalListings\n      version\n      token {\n        id\n      }\n      owner {\n        id\n      }\n    }\n    tokens {\n      id\n      symbol\n      address\n      name\n      decimals\n      totalSupply\n    }\n    userRegistry {\n      id\n    }\n  }"}, {"type": "query", "name": "allTasks", "content": "{\n        getPostPublic(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "DeltetRestaurant($id:String!)", "content": "{\n            asset(\n                id: $id\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                asset {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "mutation", "name": "setDefaultAddress($address: String!)", "content": "{\n        addressSignupStart(address: $address){\n            message\n            signMessage\n        }\n    }"}, {"type": "query", "name": "ListSavedQueries($filter: SavedQueryFilter)", "content": "{\n  sendChatMessage(message: $messageInput, orderId: $orderId) {\n    success\n    message\n    data {\n      id\n      message\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n}"}, {"type": "query", "name": "getDiscussionProposalById($onchainProposalId: Int!)", "content": "{\n  emailUpdateInContact(contactId: $contactId, input: $input) {\n    primary\n    label\n    email\n    id\n  }\n}"}, {"type": "mutation", "name": "updateSession($sessionId: ID!, $session: SessionUpdateInput!)", "content": "{\n    topTags {\n      id\n      tagName\n    }\n  }"}, {"type": "query", "name": "WalletStatus", "content": "{\n    zones{\n    _id\n    title\n    description\n    location{coordinates}\n    isActive\n    }\n}"}, {"type": "query", "name": "listSagemakerStudioUserProfiles(\n      $filter: SagemakerStudioUserProfileFilter\n    )", "content": "{\n    availableRiders{\n      _id\n      name\n      username\n      phone\n      available\n      zone{\n        _id\n      }\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n    runtimes(first: 30, after: $after) {\n      data {\n        id\n        name\n        description\n        status {\n          condition\n        }\n        labels\n      }\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }"}, {"type": "mutation", "name": "deleteAPIRule($name: String!, $namespace: String!)", "content": "{\n        note2sByNoteTypeAndOwner(noteType: $noteType, owner: $owner) {\n          items {\n            noteId\n            noteType\n            owner\n          }\n        }\n      }"}, {"type": "query", "name": "GetUser($id: ID!)", "content": "{\n      listEnvironmentClusters(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          clusterUri\n          environmentUri\n          name\n          label\n          description\n          tags\n          owner\n          created\n          updated\n          AwsAccountId\n          region\n          clusterArn\n          clusterName\n          created\n          databaseName\n          databaseUser\n          masterUsername\n          masterDatabaseName\n          nodeType\n          numberOfNodes\n          kmsAlias\n          status\n          subnetGroupName\n          CFNStackName\n          CFNStackStatus\n          CFNStackArn\n          port\n          endpoint\n          IAMRoles\n          subnetIds\n          securityGroupIds\n          userRoleForCluster\n          userRoleInEnvironment\n          imported\n          stack {\n            status\n          }\n          vpc\n          organization {\n            organizationUri\n            label\n            name\n          }\n          environment {\n            environmentUri\n            label\n            name\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "Config", "content": "{\n  allTasks{\n    id\n    status\n    title\n  }\n}"}, {"type": "query", "name": "getCurrentUserSettings", "content": "{\n    addItem(name: $name, desc: $desc, ownerId: $ownerId) {\n      id\n    }\n  }"}, {"type": "query", "name": "Offer($offerId: ID!)", "content": "{\n      getPostSecretFieldIAM(id: $id) {\n        id\n        title\n      }\n    }"}, {"type": "mutation", "name": "updateLogo($input: String!, $cover: String!)", "content": "{\n      createAirflowClusterProject(\n        clusterUri: $clusterUri\n        projectInput: $projectInput\n      ) {\n        projectUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "query", "name": "selectProperty ($where: PropertyWhereInput, $orderBy: String, $first: Int, $skip: Int)", "content": "{\n        onDeleteMember {\n          id\n          name\n          createdAt\n          updatedAt\n        }\n      }"}, {"type": "mutation", "name": "CreateNote($input: CreateNoteInput!)", "content": "{\n        obj: OrganizationEmployee(where: {id: $id}) ${ORGANIZATION_EMPLOYEE_FIELDS}\n    }"}, {"type": "query", "name": "GetOrganizationLocations($id: ID!)", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "CreatePost($input: CreatePostInput!)", "content": "{MODEL}($id: ID!, $data: ${inputName}) {\n             obj: ${mutationName}(id: $id, data: $data) ${fields}\n         }"}, {"type": "query", "name": "cosmosTransactions($address: String!, $startingPage: Float, $pageSize: Float)", "content": "{\n    deleteAPIRule(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "query", "name": "SearchPosts", "content": "{\n        createPostPublic(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "CreateAddress($addressInput:AddressInput!)", "content": "{\n    newTodo:createTodo(title:$title, user_id: $userId, completed: $completed) {\n      id\n      title\n      completed\n    }\n  }"}, {"type": "mutation", "name": "PushToken($token:String)", "content": "{\n    messaging(id: \"defaultAccount\") {\n      decryptShippingAddress(encrypted: $encrypted) {\n        name\n        address1\n        address2\n        city\n        stateProvinceRegion\n        postalCode\n        country\n        instructions\n      }\n    }\n  }"}, {"type": "query", "name": "GetUserProfile($username: String)", "content": "{\n        createPostPublic(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "Merge($fromUuids: [String!], $toUuid: String!)", "content": "{\n        posts(where: {onchain_link: {onchain_proposal_id: {_eq: $id}}}) {\n            ...proposalPost\n        }\n    }\n    ${proposalPost}"}, {"type": "mutation", "name": "AllowToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    withdrawOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "subscription", "name": "OnDeleteStudent", "content": "{\n      createSagemakerStudioUserProfile(input: $input) {\n        sagemakerStudioUserProfileUri\n        name\n        label\n        created\n        description\n        tags\n      }\n    }"}, {"type": "query", "name": "getNetwork($vpcUri: String!)", "content": "{\n    subscribePlaceOrder(restaurant:$restaurant){\n        userId\n        origin\n        order{\n          _id\n          orderId\n          restaurant{\n            _id\n            name\n            image\n            address\n            location{coordinates}\n          }\n          deliveryAddress{\n            location{coordinates}\n            deliveryAddress\n            details\n            label\n          }\n          items{\n            _id\n            title\n            description\n            image\n            quantity\n            variation{\n              _id\n              title\n              price\n              discounted\n            }\n            addons{\n              _id\n              options{\n                _id\n                title\n                description\n                price\n              }\n              description\n              title\n              quantityMinimum\n              quantityMaximum\n            }\n            specialInstructions\n            isActive\n            createdAt\n            updatedAt\n          }\n          user{\n            _id\n            name\n            phone\n            email\n          }\n          paymentMethod\n          paidAmount\n          orderAmount\n          orderStatus\n          tipping\n          taxationAmount\n          status\n          paymentStatus\n          reason\n          isActive\n          createdAt\n          orderDate\n          deliveryCharges\n          isPickedUp\n          preparationTime\n          acceptedAt\n          isRinged\n          rider{\n            _id\n            name\n            username\n            available\n          }\n      }\n}\n}"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n    deleteFunction(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "query", "name": "Namespace($name: String!)", "content": "{\n    setWalletFromMnemonic(mnemonic: $mnemonic, path: $path){\n      globalRegistryAddress\n      orgRegistryAddress\n      organizationName\n      organizationRole\n      organizationWhisperKey\n      rpcProvider\n    }\n  }"}, {"type": "subscription", "name": "subscriptionSubscription(\n    $ownerName: String!\n    $namespace: String!\n  )", "content": "{\n  organization(id: $organizationId) {\n    id\n    timelineEvents(from: $from, size: $size) {\n      ... on Meeting {\n        ...MeetingTimelineEventFragment\n        describedBy {\n          contentType\n          content\n          id\n          analysisType\n          source\n        }\n      }\n      ... on PageView {\n        id\n        application\n        startedAt\n        endedAt\n        engagedTime\n        pageUrl\n        pageTitle\n        orderInSession\n        sessionId\n        source\n      }\n      ... on Issue {\n        id\n        createdAt\n        updatedAt\n        subject\n        status\n        priority\n        source\n        description\n        externalLinks {\n          type\n          externalId\n          externalUrl\n        }\n        tags {\n          id\n          name\n        }\n      }\n      ... on Analysis {\n        id\n        createdAt\n        content\n        contentType\n        analysisType\n        describes {\n          __typename\n          ...InteractionEventFragment\n          ...InteractionSessionFragment\n        }\n        source\n        sourceOfTruth\n      }\n      ... on Conversation {\n        id\n        startedAt\n        subject\n        channel\n        updatedAt\n        messageCount\n        contacts {\n          id\n          lastName\n          firstName\n        }\n        users {\n          lastName\n          firstName\n          emails {\n            email\n          }\n        }\n        source\n        appSource\n        initiatorFirstName\n        initiatorLastName\n        initiatorUsername\n        initiatorType\n        threadId\n      }\n      ... on InteractionSession {\n        ...InteractionSessionFragment\n        source\n      }\n      ... on InteractionEvent {\n        ...InteractionEventFragment\n        source\n      }\n      ... on Note {\n        id\n        html\n        createdAt\n        source\n        noted {\n          ... on Organization {\n            id\n            organizationName: name\n          }\n          ... on Contact {\n            ...ContactNameFragment\n          }\n        }\n        createdBy {\n          id\n          firstName\n          lastName\n        }\n        includes {\n          id\n          name\n          mimeType\n          extension\n          size\n        }\n        mentioned {\n          ... on Issue {\n            externalLinks {\n              type\n              externalId\n              externalUrl\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    ${MeetingTimelineEventFragmentFragmentDoc}\n${InteractionEventFragmentFragmentDoc}\n${InteractionSessionFragmentFragmentDoc}\n${ContactNameFragmentFragmentDoc}"}, {"type": "query", "name": "UserQuery", "content": "{\n          isLoggedIn @client\n        }"}, {"type": "query", "name": "activeServiceClassFilters", "content": "{\n  contact_AddTagById(input: $input) {\n    id\n    tags {\n      ...Tag\n    }\n  }\n}\n    ${TagFragmentDoc}"}, {"type": "mutation", "name": "UpdateQuery($id: ID!, $completed: Boolean!)", "content": "{\n  getDashboardSales(starting_date: $startingDate, ending_date: $endingDate){\n    orders{\n      day\n      amount\n    }\n  }\n}"}, {"type": "mutation", "name": "ImportWallet($role: String, $name: String, $privateKey: String!)", "content": "{\n    web3 {\n      account(id: $id) {\n        id\n        token(symbol: $token) {\n          id\n          balance\n          token {\n            id\n            decimals\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "deleteService($name: String!, $namespace: String!)", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "CreatePost($input: CreatePostInput!)", "content": "{\n  proposals(where: {proposalStatus_some: {AND: [{blockNumber: {number: $blockNumber}}, {status: \"Tabled\"}]}}) {\n    proposalId\n    preimage {\n      hash\n    }\n  }\n}"}, {"type": "mutation", "name": "CreateGlossary($input: CreateGlossaryInput)", "content": "{\n    checkTelegramStatus(identity: $identity, maxTries: $maxTries) {\n      success\n      reason\n      data {\n        attestation\n        verified\n      }\n    }\n  }"}, {"type": "query", "name": "AllAccounts", "content": "{\n    setCustomerForOrder(input: $input) {\n      ...ActiveOrder\n    }\n  }\n  ${ORDER_FRAGMENT}"}, {"type": "mutation", "name": "deleteClusterAddonsConfiguration($name: String!)", "content": "{\n  __typename\n  insert_onchain_links(objects: {onchain_treasury_proposal_id: $onchainTreasuryProposalId, proposer_address: $proposerAddress, post: {data: {author_id: $authorId, content: $content, topic_id: $topicId, type_id: $typeId}}}) {\n    returning {\n      id\n    }\n  }\n}"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n    unlinkMobileWallet\n  }"}, {"type": "mutation", "name": "UpdateCompany(\n    $id: ID!\n    $name: String!\n    $parentId: ID\n    $brokerId: ID\n    $deleteParentId: ID\n    $deleteBrokerId: ID\n    $autoPdf: Boolean!\n    $autoWatermark: Boolean!\n    $previewOnly: Boolean!\n  )", "content": "{\n        result: startConfirmPhoneAction(data: $data) { token }\n    }"}, {"type": "query", "name": "Web3", "content": "{\n    addPost(input: $input) {\n      id\n      postId\n      slug\n      content\n      cover\n      likes\n      comments\n      user {\n        id\n        fullName\n        photo\n        totalLikes\n      }\n      tags {\n        id\n        tagName\n      }\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "DeployProxyFactoryContract($from: String!)", "content": "{\n  tag_Update(input: $input) {\n    id\n    name\n  }\n}"}, {"type": "mutation", "name": "registerNewOrganization($data: RegisterNewOrganizationInput!)", "content": "{\n    makeOffer(\n      listingID: $listingID\n      value: $value\n      from: $from\n      quantity: $quantity\n      currency: $currency\n      fractionalData: $fractionalData\n      shippingAddress: $shippingAddress\n      autoswap: $autoswap\n      commission: $commission\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeployMarketplace(\n    $from: String\n    $token: String\n    $version: String\n    $autoWhitelist: Boolean\n  )", "content": "{\n          onDeleteStudent {\n            id\n            name\n            email\n            ssn\n            owner\n          }\n        }"}, {"type": "mutation", "name": "", "content": "{\n    deleteSecret(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "query", "name": "getWorkspaceMemberInvitesToManage($userId: uuid!)", "content": "{\n        obj: predictTicketClassification(data: $data) { id place { id name } category { id name }  }\n    }"}, {"type": "query", "name": "AllDemocracyProposalPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5 )", "content": "{\n  posts(\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_treasury_proposal_id: {_in: $onchainTreasuryProposalIds}}}\n    order_by: {onchain_link: {onchain_treasury_proposal_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_treasury_proposal_id\n      onchain_treasury_spend_proposal(where: {}) {\n        id\n        treasuryStatus(last: 1) {\n          id\n          status\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "Restaurant($id:String,$slug:String)", "content": "{\n            account(\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                account {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "GetPersonalAccessTokens", "content": "{\n  insertSecret(appID: $appId, secret: $secret) {\n    name\n  }\n}"}, {"type": "query", "name": "getProductPageData($productHandle: String!)", "content": "{\n  organization(id: $id) {\n    id\n    owner {\n      id\n      firstName\n      lastName\n    }\n  }\n}"}, {"type": "mutation", "name": "($title: String!, $raw: String!)", "content": "{\n      createTerm(parentUri: $parentUri, input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "subscription", "name": "OnUpdateStudent", "content": "{\n    removeCompanyMember(\n      companyId: $companyId\n      userId: $userId\n      userIds: $userIds\n    ) {\n      errors {\n        path\n        message\n      }\n      success\n      user {\n        id\n        fullName\n        profileUrl\n        roles {\n          id\n          name\n          companyId\n        }\n        teams {\n          id\n          name\n          companyId\n        }\n        companies {\n          id\n          name\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "DeleteAddress($id:ID!)", "content": "{\n\t\t\t\tcreateBackupSnapshot(repo_id: $repoID, config: $metaData) {\n\t\t\t\t\tid\n\t\t\t\t\trepo_id\n\t\t\t\t\thash\n\t\t\t\t}\n\t\t\t}"}, {"type": "mutation", "name": "($_id: ID)", "content": "{\n  updateConfig(appID: $appId, config: $config) {\n    id: __typename\n  }\n}"}, {"type": "query", "name": "GetContactTags($id: ID!)", "content": "{\n  dashboardView_Organizations(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      id\n      name\n      subsidiaryOf {\n        organization {\n          id\n          name\n        }\n      }\n      owner {\n        id\n        firstName\n        lastName\n      }\n      description\n      industry\n      website\n      domains\n      locations {\n        ...LocationBaseDetails\n        rawAddress\n      }\n      relationshipStages {\n        relationship\n        stage\n      }\n      lastTouchPointTimelineEventId\n      lastTouchPointAt\n      lastTouchPointTimelineEvent {\n        ... on PageView {\n          id\n        }\n        ... on Issue {\n          id\n        }\n        ... on Note {\n          id\n          createdBy {\n            firstName\n            lastName\n          }\n        }\n        ... on InteractionEvent {\n          id\n          channel\n          eventType\n          sentBy {\n            __typename\n            ... on EmailParticipant {\n              type\n              emailParticipant {\n                id\n                email\n                rawEmail\n              }\n            }\n          }\n        }\n        ... on Analysis {\n          id\n        }\n        ... on Meeting {\n          id\n          name\n          attendedBy {\n            __typename\n          }\n        }\n      }\n    }\n    totalElements\n  }\n}\n    ${LocationBaseDetailsFragmentDoc}"}, {"type": "query", "name": "getActions", "content": "{\n    makeOffer(\n      listingID: $listingID\n      finalizes: $finalizes\n      affiliate: $affiliate\n      commission: $commission\n      value: $value\n      currency: $currency\n      arbitrator: $arbitrator\n      data: $data\n      from: $from\n      withdraw: $withdraw\n      quantity: $quantity\n      autoswap: $autoswap\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n        result: disconnectUserFromRemoteClient(data: $data) { status }\n    }"}, {"type": "query", "name": "", "content": "{\n    featured1: moloch(id: $featured1) {\n      ${featuredFields}\n    }\n    featured2: moloch(id: $featured2) {\n      ${featuredFields}\n    }\n    featured3: moloch(id: $featured3) {\n      ${featuredFields}\n    }\n    featured4: moloch(id: $featured4) {\n      ${featuredFields}\n    }\n    featured5: moloch(id: $featured5) {\n      ${featuredFields}\n    }\n  }"}, {"type": "query", "name": "($id: Int!)", "content": "{\n    addTeamMember(\n      email: $email\n      fullName: $fullName\n      role: $role\n      team: $team\n      companyId: $companyId\n    ) {\n      errors {\n        path\n        message\n      }\n      success\n      user {\n        id\n        fullName\n        profileUrl\n        roles {\n          id\n          name\n          companyId\n        }\n        teams {\n          id\n          name\n          companyId\n        }\n        companies {\n          id\n          name\n          logoUrl\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "AllTodos", "content": "{\n      createScheduledQuery(input: $input) {\n        scheduledQueryUri\n        name\n        label\n        created\n        description\n        tags\n      }\n    }"}, {"type": "subscription", "name": "onMessagingStatusChange", "content": "{\n          searchPosts {\n            items {\n              id\n              content\n              secret\n            }\n            nextToken\n          }\n        }"}, {"type": "mutation", "name": "($_id: ID)", "content": "{\n  organization_Merge(\n    primaryOrganizationId: $primaryOrganizationId\n    mergedOrganizationIds: $mergedOrganizationIds\n  ) {\n    id\n    ...OrganizationDetails\n  }\n}\n    ${OrganizationDetailsFragmentDoc}"}, {"type": "query", "name": "Orders", "content": "{\n  userCommunitiesCount\n}"}, {"type": "query", "name": "getUserByEmail($email: String!)", "content": "{\n        result: sendB2CAppPushMessage(data: $data) { id status }\n    }"}, {"type": "query", "name": "ServiceBrokers($namespace: String!)", "content": "{\n    setWalletFromMnemonic(mnemonic: $mnemonic, path: $path){\n      globalRegistryAddress\n      orgRegistryAddress\n      organizationName\n      organizationRole\n      organizationWhisperKey\n      rpcProvider\n    }\n  }"}, {"type": "mutation", "name": "reInviteOrganizationEmployee($data: ReInviteOrganizationEmployeeInput!)", "content": "{\n\t\t\t\tcreateBackupRepo(\n\t\t\t\t\tsite_id: $siteID,\n\t\t\t\t\tprovider_id: $providerID,\n\t\t\t\t\thash: $repoID\n\t\t\t\t) {\n\t\t\t\t\tid\n\t\t\t\t\tsite_id\n\t\t\t\t\tprovider_id\n\t\t\t\t\thash\n\t\t\t\t}\n\t  \t\t}"}, {"type": "mutation", "name": "UniswapInitFactory(\n    $from: String!\n    $exchange: String\n    $factory: String\n  )", "content": "{\n    updateComment (input: { id: $commentId, body: $body }) {\n      comment {\n        ...CommentForm\n      }\n    }\n  }\n  ${CommentForm.fragments.comment}"}, {"type": "mutation", "name": "RejectShareObject($shareUri: String!)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "mutation", "name": "deletePost($post: String!)", "content": "{\n    sendFromWallet(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "sendNotification(\n    $title: String!\n    $content: String!\n    $color: String!\n    $icon: String!\n    $instanceName: String!\n  )", "content": "{\n    rider(id:$id){\n      _id\n      name\n      username\n      available\n    }\n  }"}, {"type": "query", "name": "($postId: ID!)", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "query", "name": "currentUserDirectMessageThreads($after: String)", "content": "{\n\t\tmemes(limit: 10, offset: 0, where: { category: { _ilike: $searchTerm } }) {\n\t\t\tid\n\t\t\tdownloads\n\t\t\tlikes\n\t\t\tviews\n\t\t\timage_link\n\t\t\tcategory\n\t\t\ttitle\n\t\t}\n\t}"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n          signIn(email: $email, password: $password) {\n            token\n            refreshToken\n            expiresAt\n          }\n        }"}, {"type": "mutation", "name": "addPartner($input: AddPartnerInput!)", "content": "{\n  login(email:$email,password:$password,type:$type,appleId:$appleId,name:$name,notificationToken:$notificationToken){\n   userId\n   token\n   tokenExpiration\n   name\n   email\n   phone\n }\n}"}, {"type": "query", "name": "FetchAccountAndApps", "content": "{\n    launch(id: $launchId) {\n      isInCart @client\n      site\n      rocket {\n        type\n      }\n      ...LaunchTile\n    }\n  }\n  ${LAUNCH_TILE_DATA}"}, {"type": "mutation", "name": "($marketId: ID!, $title: String!, $body: String!, $smImageUrl: String, $lgImageUrl: String)", "content": "{\n    thread(id: $id) {\n      ...threadInfo\n    }\n  }\n  ${threadInfoFragment}"}, {"type": "query", "name": "SearchDeathCertificates(\n    $query: String!\n    $page: Int!\n    $startYear: String\n    $endYear: String\n  )", "content": "{\n    createTaskMessages(taskId: $taskId, message: $message, isPublic: true) {\n      success\n      message {\n        id\n        message\n        createdAt\n        user {\n          fullName\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetTeams($filters: TeamFilterType)", "content": "{\n      getDatasetAssumeRoleUrl(datasetUri: $datasetUri)\n    }"}, {"type": "mutation", "name": "VerifyMfaDevice($sessionId: String!, $pairingCode: String!)", "content": "{\n    getDashboardTotal(starting_date: $startingDate, ending_date: $endingDate,restaurant:$restaurant){\n      totalOrders\n      totalSales\n    }\n  }"}, {"type": "query", "name": "Restaurant($id:String)", "content": "{\n        getPostPrivate(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "addressLinkConfirm($address_id: Int!, $signature: String!)", "content": "{\n      createStudent(input: $input) {\n        id\n        name\n        email\n        ssn\n        owner\n      }\n    }"}, {"type": "query", "name": "secret($namespace: String!, $name: String!)", "content": "{\n        onCreateStudent {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "mutation", "name": "ownerLogin($email:String!,$password:String!)", "content": "{\n  restaurant(id:$id){\n  _id\n  orderId\n  orderPrefix\n  name\n  image\n  address\n  location{coordinates}\n  deliveryTime\n  username\n  isAvailable\n  notificationToken\n  enableNotification\n  openingTimes{\n    day\n    times{\n      startTime\n      endTime\n    }\n  }\n}}"}, {"type": "subscription", "name": "", "content": "{\n      restaurant(id:$id)\n      {\n      _id\n      orderId\n      orderPrefix\n      slug\n      name\n      image\n      address\n      location{coordinates}\n      deliveryBounds{\n        coordinates\n      }\n      username\n      password\n      deliveryTime\n      minimumOrder\n      tax\n      isAvailable\n      stripeDetailsSubmitted\n      openingTimes{\n        day\n        times{\n          startTime\n          endTime\n        }\n      }\n      owner{\n        _id\n        email\n      }\n    }\n}"}, {"type": "mutation", "name": "removeGroupFromEnvironment(\n      $environmentUri: String!\n      $groupUri: String!\n    )", "content": "{\n    account(where: { identity: { _neq: \"\" } }) {\n      identity\n      account_id\n    }\n  }"}, {"type": "mutation", "name": "deleteApplicationLabel($id: ID!)", "content": "{\n  counters {\n    rows: contents {\n     count(\n       categoryId: $categoryId,\n       slug: $slug,\n       language: $language,\n       namespace: $namespace,\n       search: $search,\n       chatbotId: $chatbotId\n      )\n    }\n  }\n  categories(namespace: $namespace, chatbotId: $chatbotId) {\n    id,\n    name\n  }\n  rows: contents(\n    offset: $offset,\n    limit: $limit,\n    order: $order,\n    categoryId: $categoryId,\n    slug: $slug,\n    language: $language,\n    namespace: $namespace,\n    search: $search,\n    chatbotId: $chatbotId\n  ) {\n    id,\n    slug,\n    title,\n    body,\n    categoryId,\n    language,\n    createdAt,\n    payload,\n    namespace,\n    chatbotId,\n    category {\n      id,\n      name\n    }\n\n  }\n}"}, {"type": "subscription", "name": "ServiceBinding($namespace: String!)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "mutation", "name": "signinResidentUser ($data: SigninResidentUserInput!)", "content": "{\n    signInUser(\n      email: $email\n      password: $password\n      socialLogin: $socialLogin\n      provider: $provider\n      tokenID: $tokenID\n      uuID: $uuID\n    ) {\n      currentUser {\n        id\n        user {\n          id\n          fullName\n          email\n        }\n      }\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "mutation", "name": "addPostAndProposalMutation($onchainProposalId: Int!, $authorId: Int!, $proposerAddress: String!, $content: String!, $topicId: Int!, $typeId: Int!)", "content": "{\n                  allArchivedBlogs {\n                    id\n                    title\n                    content\n                    userId\n                    archived\n                  }\n                }"}, {"type": "mutation", "name": "createServiceBindingUsage(\n    $createServiceBindingUsageInput: CreateServiceBindingUsageInput\n    $namespace: String!\n  )", "content": "{\n      markNotificationAsRead(notificationUri: $notificationUri)\n    }"}, {"type": "query", "name": "GenerateEnvironmentAccessToken(\n      $environmentUri: String!\n      $groupUri: String\n    )", "content": "{\n        result: registerMultiPaymentForVirtualReceipt(data: $data) { dv multiPaymentId webViewUrl feeCalculationUrl directPaymentUrl anonymousPaymentUrl }\n    }"}, {"type": "query", "name": "BrowseDataPipelineRepository($input: DataPipelineBrowseInput!)", "content": "{modelName}WebhookQuery($first: Int!, $skip: Int!, $where: ${modelName}WhereInput!) {\n            objs: all${pluralName}(first: $first, skip: $skip, where: $where, sortBy: [updatedAt_ASC, id_ASC]) ${fields}\n        }"}, {"type": "query", "name": "($id: Int!, $userId: String!)", "content": "{\n      restaurant(id:$id){\n      _id\n      orderId\n      orderPrefix\n      slug\n      name\n      image\n      address\n      location{coordinates}\n      deliveryTime\n      minimumOrder\n      tax\n      categories{\n        _id\n        title\n        foods{\n          _id\n          title\n          description\n          variations{\n            _id\n            title\n            price\n            discounted\n            addons\n          }\n          image\n          isActive\n        }\n      }\n      options{\n        _id\n        title\n        description\n        price\n      }\n      addons{\n        _id\n        options\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n      \n    }\n}"}, {"type": "mutation", "name": "UpdateStudent($input: UpdateStudentInput!)", "content": "{\n    web3 {\n      account(id: $id) {\n        id\n        balance {\n          eth\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "eventDefinition(\n    $applicationId: ID!\n    $apiPackageId: ID!\n    $eventDefinitionId: ID!\n  )", "content": "{\n\t\tmeme_templates {\n\t\t\tid\n\t\t\ttitle\n\t\t\timage_link\n\t\t}\n\t}"}, {"type": "query", "name": "Tips", "content": "{\n    createProposal(input: $input) {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "mutation", "name": "deleteDataPipeline(\n      $DataPipelineUri: String!\n      $deleteFromAWS: Boolean\n    )", "content": "{\n        updatePost(\n          input: { id: \"P4\", type: \"Post\", content: \"Content #4 - Update\", expectedVersion: 1 }\n          condition: { rating: { eq: 4 } }\n        ) {\n          id\n        }\n      }"}, {"type": "query", "name": "AccountTokenBalance($account: ID!, $token: String!)", "content": "{\n  changePassword(oldPassword: $oldPassword, newPassword: $newPassword) {\n    message\n  }\n}"}, {"type": "mutation", "name": "deleteDataPipelineEnvironment(\n      $envPipelineUri: String!\n    )", "content": "{\n        createPostPrivateIAM(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "Balance($id: ID!)", "content": "{\n\t\t\t  getBackupCredentials(provider_id: $providerID) {\n\t\t\t    config\n\t\t\t  }\n\t\t\t}"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n    zones{\n    _id\n    title\n    description\n    location{coordinates}\n    isActive\n    }\n}"}, {"type": "query", "name": "Coupons", "content": "{\n  user(userId: $userId, chatbotId: $chatbotId) {\n    id,\n    userId,\n    payload\n  }\n}"}, {"type": "query", "name": "Namespaces($showSystemNamespaces: Boolean)", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n      ...communityMembers\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}\n  ${communityMembersFragment}"}, {"type": "query", "name": "getAll$", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n  updateRiderLocation(latitude:$latitude,longitude:$longitude){\n    _id\n  }\n}"}, {"type": "query", "name": "WalletStatus", "content": "{\n  deleteWorkspaceMemberInvites(where: {id: {_eq: $id}}) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "Shop($id: Int!)", "content": "{\n      restaurant(id:$id){\n      _id\n      orderId\n      orderPrefix\n      slug\n      name\n      image\n      address\n      location{coordinates}\n      deliveryTime\n      minimumOrder\n      tax\n      categories{\n        _id\n        title\n        foods{\n          _id\n          title\n          description\n          variations{\n            _id\n            title\n            price\n            discounted\n            addons\n          }\n          image\n          isActive\n        }\n      }\n      options{\n        _id\n        title\n        description\n        price\n      }\n      addons{\n        _id\n        options\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n      \n    }\n}"}, {"type": "mutation", "name": "UpdateOrg(\n      $organizationUri: String\n      $input: ModifyOrganizationInput\n    )", "content": "{\n      updateDatasetContributor(\n        datasetUri: $datasetUri\n        userName: $userName\n        role: $role\n      ) {\n        datasetUri\n        label\n        userRoleForDataset\n      }\n    }"}, {"type": "mutation", "name": "GeneratePhoneCode(\n    $prefix: String!\n    $method: String\n    $phone: String!\n  )", "content": "{\n    addMfaDevice(phoneNumber: $phoneNumber, email: $email, type: $type) {\n      sessionId\n      error\n    }\n  }"}, {"type": "query", "name": "($chatbotId: String)", "content": "{\n    rider(id:$id){\n      _id\n      name\n      username\n      available\n    }\n  }"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n    toggleCommunityNoindex(communityId: $communityId) {\n      id\n      slug\n      noindex\n    }\n  }"}, {"type": "query", "name": "Subscription ($postId: Int!)", "content": "{\n  editAddress(addressInput:$addressInput){\n    _id\n    addresses{\n      _id\n      label\n      deliveryAddress\n      details\n      location{coordinates}\n      selected\n    }\n  }\n}"}, {"type": "query", "name": "GetAuthUrl($provider: String!, $redirect: String)", "content": "{\n        __typename\n        insert_option_poll_votes_one(object: {option_poll_id: $optionPollId, user_id: $userId, option: $option}) {\n            id\n        }\n    }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n      createTask(input: $input) {\n        id\n        description\n        name\n      }\n    }"}, {"type": "query", "name": "Post ($slug: String!)", "content": "{\n        searchTodos {\n          items {\n            id\n            groups\n            content\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "requestResetPassword($email: String!)", "content": "{\n      getPostSecretFieldIAM(id: $id) {\n        id\n        title\n      }\n    }"}, {"type": "mutation", "name": "SelectAddress($id:String!)", "content": "{\n        result: registerMultiPaymentForOneReceipt(data: $data) { dv multiPaymentId webViewUrl feeCalculationUrl directPaymentUrl anonymousPaymentUrl }\n    }"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n  delete_poll_votes(\n    where: {_and: [{poll_id: {_eq: $pollId}}, {user_id: {_eq: $userId}}]}\n  ) {\n    affected_rows\n  }\n}"}, {"type": "mutation", "name": "FinalizeOffer($offerID: String!, $from: String)", "content": "{\n        deleteFood(id:$id){\n          _id\n        }\n      }"}, {"type": "query", "name": "", "content": "{\n    deployIdentityViaProxy(from: $from, owner: $owner) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    unsetTag(\n      thread: $thread\n      id: $id\n      tagId: $tagId\n      communityId: $communityId\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "APIRule($name: String!, $namespace: String!)", "content": "{\n  onchain_links(where: {_and: {onchain_motion_id: {_eq: $onchainMotionId}, onchain_referendum_id: {_is_null: true}}}) {\n    id\n  }\n}"}, {"type": "mutation", "name": "addComment($name: String!, $message: String!)", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_motion_id: {\n                    _is_null: false\n                },\n                onchain_referendum_id: {\n                    _is_null: true\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_motion_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_motion_id\n                onchain_motion(where: {NOT: {motionStatus_some: {OR: [{status: \"Executed\"}, {status: \"Disapproved\"}]}}}) {\n                    id\n                    motionStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "subscription", "name": "OnUpdateTaskGroup(\n            $filter: ModelSubscriptionTaskGroupFilterInput\n          )", "content": "{\n    scheduleJob(repoSlug: $repoSlug, branchName: $branchName, commitSha: $commitSha) {\n      id\n    }\n  }"}, {"type": "query", "name": "($limit: Int, $offset: Int, $order: String, $username: String, $userId: String, $chatbotId: String)", "content": "{\n        objs: allProperties(where: $where, orderBy: $orderBy, first: $first, skip: $skip) {\n            id\n            address\n            map { sections { floors { units { type label } } } parking { floors { units { type label } } } }\n        }\n    }"}, {"type": "query", "name": "Stats", "content": "{\n    addAppointment(\n      date: $date\n      startTime: $startTime\n      morningOrEvening: $morningOrEvening\n      endTime: $endTime\n      duration: $duration\n      price: $price\n      esthetician: $esthetician\n      client: {\n        firstName: $firstName\n        lastName: $lastName\n        email: $email\n        phoneNumber: $phoneNumber\n        squareCustomerId: $squareCustomerId\n        unsavedSquareCardIDs: $unsavedSquareCardIDs\n      }\n      treatments: $treatments\n      addOns: $addOns\n      bookedWithCardSquareID: $bookedWithCardSquareID\n      notes: $notes\n    ) {\n      date\n      startTime\n      morningOrEvening\n      endTime\n      duration\n      price\n      createdAt\n      esthetician\n      client {\n        firstName\n        lastName\n        email\n        phoneNumber\n        squareCustomerId\n        unsavedSquareCardIDs\n      }\n      treatments {\n        name\n        price\n        duration\n      }\n      addOns {\n        name\n        price\n        duration\n      }\n      bookedWithCardSquareID\n      notes\n      confirmed\n    }\n  }"}, {"type": "query", "name": "getDiscussionTipById($onchainTipId: String!)", "content": "{\n          feed {\n            ...Item\n          }\n          allFeeds: feed {\n            ...Item\n          }\n        }"}, {"type": "mutation", "name": "changeEmail($email: String!, $password: String!)", "content": "{\n            servers(page: $page, first: $first) {\n              data {\n                id\n                hostname\n                ipv4\n                ipv6\n                created_at\n                updated_at\n                groups {\n                  id\n                  name\n                }\n                users {\n                  id\n                  name\n                }\n                users_count\n              }\n              paginatorInfo {\n                hasMorePages\n              }\n            }\n          }"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n    system(order_by: { timestamp: desc }, limit: 1) {\n      block_height\n      chain\n      node_name\n      node_version\n      timestamp\n    }\n  }"}, {"type": "mutation", "name": "addLocationToContact($contactId: ID!)", "content": "{\n      listDatasetTableProfilingRuns(tableUri: $tableUri) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          profilingRunUri\n          GlueJobRunId\n          GlueTableName\n          results\n          created\n          status\n        }\n      }\n    }"}, {"type": "query", "name": "SearchPrincipal($filter: PrincipalFilter)", "content": "{\n        result: exportNewsRecipients(data: $data) { status linkToFile }\n    }"}, {"type": "mutation", "name": "UploadToken($id:String!,$pushToken:String!)", "content": "{\n      updateSSMParameter(name: $name, value: $value)\n    }"}, {"type": "query", "name": "", "content": "{\n    deletePost (input: { slug: $slug }) {\n      result\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n  organization(id: $id) {\n    id\n    name\n    emails {\n      id\n      email\n      primary\n      label\n    }\n    phoneNumbers {\n      id\n      e164\n      rawPhoneNumber\n      label\n    }\n  }\n}"}, {"type": "mutation", "name": "updateNote($input: NoteUpdateInput!)", "content": "{\n    marketplace {\n      totalEvents\n      events(offset: $offset, limit: $limit) {\n        id\n        event\n        blockNumber\n        block {\n          id\n          timestamp\n        }\n        returnValues {\n          ipfsHash\n          party\n          offerID\n          listingID\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "getEvent($slug: String!)", "content": "{\n        result: resendMessage(data: $data) { status id }\n    }"}, {"type": "mutation", "name": "VerifyPromotion(\n    $identity: String!\n    $identityProxy: String\n    $type: String\n    $socialNetwork: String\n    $content: String\n  )", "content": "{\n    banUser(input: $input)\n  }"}, {"type": "query", "name": "aggSearch", "content": "{\n    searchCompanies(text: $text, companyId: $companyId) {\n      users {\n        id\n        fullName\n        profileUrl\n        companies {\n          id\n          name\n          logoUrl\n        }\n      }\n      companies {\n        id\n        name\n        logoUrl\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateListing(\n    $listingID: ID!\n    $from: String!\n    $additionalDeposit: String\n    $autoApprove: Boolean\n    $data: ListingInput!\n    $unitData: UnitListingInput\n    $fractionalData: FractionalListingInput\n  )", "content": "{\n            account(\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                account {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "mutation", "name": "DeleteTask($input: DeleteTaskInput!)", "content": "{\n    configuration{\n      _id\n      currency\n      currencySymbol\n    }\n  }"}, {"type": "query", "name": "GetDashboardTotal($startingDate: String, $endingDate: String,$restaurant:String!)", "content": "{\n      listDatasets(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          datasetUri\n          owner\n          description\n          region\n          label\n          created\n          SamlAdminGroupName\n          userRoleForDataset\n          userRoleInEnvironment\n          GlueDatabaseName\n          tags\n          topics\n          organization {\n            organizationUri\n            label\n          }\n          AwsAccountId\n          environment {\n            label\n            AwsAccountId\n            region\n          }\n          stack {\n            status\n          }\n          statistics {\n            tables\n            locations\n            upvotes\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "LOGIN($password: String!, $username: String!)", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "mutation", "name": "($password: String)", "content": "{\n      createTodo(input: $input) {\n        id\n        groups\n        content\n      }\n    }"}, {"type": "mutation", "name": "CreateTask($input: CreateTaskInput!)", "content": "{\n  insertDeployment(object: $object) {\n    ...DeploymentRow\n  }\n}\n    ${DeploymentRowFragmentDoc}"}, {"type": "query", "name": "AllAddons($page:Int)", "content": "{\n    web3 {\n      account(id: $id) {\n        identity {\n          id\n          ipfsHash\n          owner {\n            id\n            proxy {\n              id\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "gCliSearch($limit: Int, $keyword: String!)", "content": "{\n  onchain_links(where: {onchain_tech_committee_proposal_id: {_is_null: false}}) {\n    ...discussionTechCommitteeProposal\n  }\n}\n    ${DiscussionTechCommitteeProposalFragmentDoc}"}, {"type": "mutation", "name": "addressUnlink($address: String!)", "content": "{\n    subscribePlaceOrder(restaurant:$restaurant){\n        userId\n        origin\n        order{\n          _id\n          orderId\n          restaurant{\n            _id\n            name\n            image\n            address\n            location{coordinates}\n          }\n          deliveryAddress{\n            location{coordinates}\n            deliveryAddress\n            details\n            label\n          }\n          items{\n            _id\n            title\n            description\n            image\n            quantity\n            variation{\n              _id\n              title\n              price\n              discounted\n            }\n            addons{\n              _id\n              options{\n                _id\n                title\n                description\n                price\n              }\n              description\n              title\n              quantityMinimum\n              quantityMaximum\n            }\n            specialInstructions\n            isActive\n            createdAt\n            updatedAt\n          }\n          user{\n            _id\n            name\n            phone\n            email\n          }\n          paymentMethod\n          paidAmount\n          orderAmount\n          orderStatus\n          tipping\n          taxationAmount\n          status\n          paymentStatus\n          reason\n          isActive\n          createdAt\n          orderDate\n          deliveryCharges\n          isPickedUp\n          preparationTime\n          acceptedAt\n          isRinged\n          rider{\n            _id\n            name\n            username\n            available\n          }\n      }\n}\n}"}, {"type": "mutation", "name": "DeleteCategory($id:String!,$restaurant:String!)", "content": "{\n    banUser(input: $input)\n  }"}, {"type": "mutation", "name": "authenticateUserWithPhoneAndPassword ($phone: String!, $password: String!)", "content": "{\n      getSagemakerStudioUserProfile(\n        sagemakerStudioUserProfileUri: $sagemakerStudioUserProfileUri\n      ) {\n        sagemakerStudioUserProfileUri\n        name\n        owner\n        description\n        label\n        created\n        tags\n        userRoleForSagemakerStudioUserProfile\n        sagemakerStudioUserProfileStatus\n        SamlAdminGroupName\n        sagemakerStudioUserProfileApps {\n          DomainId\n          UserProfileName\n          AppType\n          AppName\n          Status\n        }\n        environment {\n          label\n          name\n          environmentUri\n          AwsAccountId\n          region\n          EnvironmentDefaultIAMRoleArn\n        }\n        organization {\n          label\n          name\n          organizationUri\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n      }\n    }"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "query", "name": "Market ($symbol: String!)", "content": "{\n  posts(\n    limit: $limit\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_motion_id: {_is_null: false}, onchain_referendum_id: {_is_null: true}}}\n    order_by: {onchain_link: {onchain_motion_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_motion_id\n      onchain_motion(\n        where: {NOT: {motionStatus_some: {OR: [{status: \"Executed\"}, {status: \"Disapproved\"}]}}}\n      ) {\n        id\n        motionStatus(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "runtimesForScenario($filter: [LabelFilter!])", "content": "{\n    identity(id: $id) {\n      id\n      firstName\n      lastName\n      description\n      avatar\n      ipfsHash\n\n      verifiedAttestations {\n        id\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnUpdateStudent", "content": "{\n    userForPasswordReset(token: $token) {\n      email\n      resetPasswordPeriodValid\n    }\n  }"}, {"type": "query", "name": "Vendors", "content": "{\n  posts(\n    limit: $limit\n    where: {type: {id: {_eq: $postType}}, topic: {id: {_eq: $postTopic}}, onchain_link: {onchain_proposal_id: {_is_null: false}}}\n    order_by: {onchain_link: {onchain_proposal_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_proposal_id\n      onchain_proposal(where: {}) {\n        id\n        proposalStatus(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "feedQuery", "content": "{\n    deleteCommunity(communityId: $communityId)\n  }"}, {"type": "mutation", "name": "reInviteOrganizationEmployee($data: ReInviteOrganizationEmployeeInput!)", "content": "{\n  orders(offset:$offset){\n    _id\n    delivery_address{\n      latitude\n      longitude\n      delivery_address\n      details\n      label\n    }\n    delivery_charges\n    order_id\n    user{\n      _id\n      phone\n    }\n    \n    items{\n      _id\n      food{\n        _id\n        title\n        category{\n          _id\n        }\n        description\n        img_url\n      }\n      variation{\n        _id\n        title\n        price\n      }\n      addons{\n        _id\n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options{\n          _id\n          title\n          description\n          price\n        }\n      }\n      quantity\n    }\n    payment_status\n    payment_method\n    order_amount\n    paid_amount\n    order_status\n    status_queue{\n      pending\n      preparing\n      picked\n      delivered\n      cancelled\n    }\n    createdAt\n    review{\n      _id\n      rating\n      description\n    }\n    rider{\n      _id\n    }\n  }\n}"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n      countUpVotes(targetUri: $targetUri, targetType: $targetType)\n    }"}, {"type": "query", "name": "cosmosGovernanceParametersVoting($network: String!)", "content": "{\n    deleteAddonsConfiguration(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "query", "name": "getImporters", "content": "{\n    post (slug: $slug) {\n      id\n      title\n      slug\n      body\n      market {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "SkinnyIdentity($id: ID!)", "content": "{\n  phoneNumberUpdateInContact(contactId: $contactId, input: $input) {\n    ...PhoneNumber\n    label\n  }\n}\n    ${PhoneNumberFragmentDoc}"}, {"type": "query", "name": "cosmosGovernanceProposals($network: String!)", "content": "{\n    updateIdentity(\n      from: $from\n      identity: $identity\n      attestations: $attestations\n      profile: $profile\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "setMessageStatus ($data: SetMessageStatusInput!)", "content": "{\n\t\t\t\tupdateBackupSnapshot(id: $snapshotID, hash: $resticSnapshotHash, status: $status, config: $metaData) {\n\t\t\t\t\tid\n\t\t\t\t\trepo_id\n\t\t\t\t\thash\n\t\t\t\t}\n\t\t\t}"}, {"type": "mutation", "name": "updateGroupEnvironmentPermissions(\n      $input: InviteGroupOnEnvironmentInput!\n    )", "content": "{\n    refetch\n  }"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n        obj: authenticateUserWithPhoneAndPassword(data: { phone: $phone, password: $password }) {\n            item {\n                id\n            }\n            token\n        }\n    }"}, {"type": "query", "name": "AccountsWithAllowance($marketplace: String)", "content": "{\n    messageReceived(yourUser: $id) {\n      username\n      notificationMessage\n      chat {\n        _id\n        users {\n          _id\n          name\n          email\n        }\n        messages {\n          _id\n          user {\n            _id\n            name\n            email\n          }\n          message\n          createdAt\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreateSection($section:SectionInput!)", "content": "{\n  phoneNumberRemoveFromContactById(contactId: $contactId, id: $id) {\n    result\n  }\n}"}, {"type": "mutation", "name": "UpdateTodo($id:ID!, $completed:Boolean)", "content": "{\n        posts(where: {onchain_link: {onchain_bounty_id: {_eq: $id}}}) {\n            ...bountyPost\n        }\n    }\n    ${bountyPost}"}, {"type": "mutation", "name": "AddPostReaction($postId: Int!, $userId: Int!, $reaction: bpchar!)", "content": "{\n    hero(episode: $episode) {\n      name @skip(if: $skipName)\n    }\n  }"}, {"type": "mutation", "name": "UpdateNotificationStatus($offerNotification:Boolean!,$orderNotification:Boolean!)", "content": "{\n  options {\n    _id\n    title\n    description\n    price\n  }\n}"}, {"type": "query", "name": "secret($namespace: String!, $name: String!)", "content": "{\n  sendNotificationUser(notificationTitle:$notificationTitle,notificationBody:$notificationBody)\n}"}, {"type": "query", "name": "Orders", "content": "{\n        updateUser(updateUserInput:{name:$name,phone:$phone,is_active:$is_active}){\n          _id\n          name\n          phone\n          is_active\n        }\n      }"}, {"type": "mutation", "name": "moveIdentity($fromUuid: String!, $toUuid: String!)", "content": "{\n    application(id: $applicationId) {\n      name\n      id\n      package(id: $apiPackageId) {\n        id\n        name\n        apiDefinition(id: $apiDefinitionId) {\n          id\n          name\n          description\n          targetURL\n          spec {\n            data\n            format\n            type\n          }\n          group\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "updateDatasetTableColumn(\n      $columnUri: String!\n      $input: DatasetTableColumnInput\n    )", "content": "{\n  contact_Archive(contactId: $id) {\n    result\n  }\n}"}, {"type": "mutation", "name": "UniswapAddLiquidity(\n    $from: String!\n    $exchange: String!\n    $value: String!\n    $tokens: String!\n    $liquidity: String!\n  )", "content": "{\n    graph(graphId: $graphId) {\n      id\n      name\n      stats(traceFilters: $traceFilters, from: $from, to: $to) {\n        count\n        duration\n        errorCount\n        errorPercent\n      }\n    }\n  }"}, {"type": "mutation", "name": "AssignOrder($id:String!)", "content": "{\n    updateDescription(desc: $desc, community: $community)\n  }"}, {"type": "mutation", "name": "", "content": "{\n      createComment(input: $input) {\n        id\n        content\n        owner\n      }\n    }"}, {"type": "mutation", "name": "AddSharedItem($shareUri: String!, $input: AddSharedItemInput!)", "content": "{\n    addListOwner(\n      listId: $listId\n      companyId: $companyId\n      userEmails: $userEmails\n      teamIds: $teamIds\n    ) {\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "mutation", "name": "removeNote($id: ID!)", "content": "{\n    updateClusterAddonsConfiguration(\n      name: $name\n      urls: $urls\n      labels: $labels\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n    unsetThread(communityId: $communityId, threadId: $threadId) {\n      id\n      threads {\n        title\n      }\n    }\n  }"}, {"type": "mutation", "name": "DeleteCoupon($id:String!)", "content": "{\n  updateRiderLocation(latitude:$latitude,longitude:$longitude){\n    _id\n  }\n}"}, {"type": "mutation", "name": "Test($foo: String!)", "content": "{\n    createTag(\n      thread: $thread\n      title: $title\n      color: $color\n      communityId: $communityId\n      topic: $topic\n    ) {\n      id\n      title\n    }\n  }"}, {"type": "query", "name": "fiatPriceHistory($fiat: String!, $network: String!)", "content": "{\n    createComment(thread: $thread, id: $id, body: $body) {\n      id\n      body\n    }\n  }"}, {"type": "query", "name": "getRollsByMAC($device: String!)", "content": "{\n        posts(where: {id: {_eq: $id}}) {\n            ...discussionPost\n        }\n    }\n    ${discussionPost}"}, {"type": "query", "name": "", "content": "{\n  organization_Update(input: $input) {\n    id\n    website\n  }\n}"}, {"type": "mutation", "name": "createContactNote($contactId: ID!, $input: NoteInput!)", "content": "{\n    createPO(input: $input) {\n      _id\n    }\n  }"}, {"type": "mutation", "name": "EditPost($id: Int!, $content: String!, $title: String!)", "content": "{\n    updatePackage(id: $id, in: $in) {\n      name\n    }\n  }"}, {"type": "query", "name": "GetMetrics($filter: MetricFilter)", "content": "{\n            listPosts {\n              items {\n                id\n                title\n              }\n            }\n          }"}, {"type": "mutation", "name": "UniswapExchangeTemplate($from: String!)", "content": "{\n    updateCompanySettings(\n      id: $id\n      name: $name\n      parentId: $parentId\n      brokerId: $brokerId\n      automaticPdf: $autoPdf\n      dynamicWatermarking: $autoWatermark\n      previewOnly: $previewOnly\n      deleteParentId: $deleteParentId\n      deleteBrokerId: $deleteBrokerId\n    ) {\n      errors {\n        path\n        message\n      }\n      success\n      company {\n        id\n        name\n        logoUrl\n        parents {\n          id\n          name\n          logoUrl\n        }\n        brokers {\n          id\n          name\n          logoUrl\n        }\n        totalUsers\n        totalStorage\n        subscription {\n          id\n          maxUsers\n          maxStorage\n        }\n        autoPdf\n        autoWatermark\n        previewOnly\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreateUserMutation(\n    $email: String!\n    $password: String!\n    $name: String!\n  )", "content": "{\n        posts(where: {onchain_link: {onchain_tip_id: {_eq: $hash}}}) {\n            ...tipPost\n        }\n    }\n    ${tipPost}"}, {"type": "mutation", "name": "createOptionPoll($postId: Int!, $question: String!, $options: String! $endAt: Int!)", "content": "{\n    updateTokenAllowance(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "subscription", "name": "OnDeleteMember", "content": "{\n        councils(last: 1){\n            members {\n                id\n                address\n            }\n        }\n  }"}, {"type": "query", "name": "SearchTodos", "content": "{\n    expand_e(id: $id, class: $class, io: $io, rid: $rid, page: $page, size: $size) {\n      id\n      class\n      color\n      name\n      alias\n      properties {\n        n\n        v\n      }\n      inV {\n        id\n        class\n        color\n        name\n        expand\n        analysis\n        alias\n        properties {\n          n\n          v\n        }\n      }\n      outV {\n        id\n        class\n        color\n        name\n        expand\n        analysis\n        alias\n        properties {\n          n\n          v\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "getUser", "content": "{\n    communities(ids: $ids) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "cosmosValidatorDistribution($validatorAddress: String!)", "content": "{\n    marketplace {\n      users(first: $first, after: $after, sort: $sort) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          endCursor\n        }\n        nodes {\n          id\n          account {\n            id\n            owner {\n              id\n            }\n          }\n          firstEvent {\n            id\n            timestamp\n          }\n          lastEvent {\n            id\n            timestamp\n          }\n          offers {\n            totalCount\n          }\n          listings {\n            totalCount\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "APIRule($name: String!, $namespace: String!)", "content": "{\n      importDashboard(input: $input) {\n        dashboardUri\n        name\n        label\n        DashboardId\n        created\n      }\n    }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n  subscriptionZoneOrders(zoneId:$zoneId){\n        zoneId\n        origin\n        order{\n          _id\n          createdAt\n          acceptedAt\n          expectedTime\n          pickedAt\n          assignedAt\n          isPickedUp\n          deliveredAt\n          deliveryCharges\n          orderId\n          restaurant{\n            _id\n            name\n            address\n            location{coordinates}\n          }\n          deliveryAddress{\n            location{coordinates}\n            deliveryAddress\n            label\n            details\n          }\n          items{\n            _id\n            title\n            food\n            description\n            quantity\n            variation{\n              _id\n              title\n              price\n            }\n            addons{\n              _id\n              options{\n                _id\n                title\n                price\n              }\n              title\n              description\n              quantityMinimum\n              quantityMaximum\n            }\n            isActive\n            createdAt\n          }\n          user{\n            _id\n            name\n            phone\n          }\n          paymentMethod\n          paidAmount\n          orderAmount\n          paymentStatus\n          orderStatus\n          tipping\n          taxationAmount\n          reason\n          isRiderRinged\n          preparationTime\n          rider{\n            _id\n            name\n            username\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetDataset(\n      $datasetUri: String!\n      $filter: DatasetStorageLocationFilter\n    )", "content": "{\n  posts(\n    order_by: {last_update: {last_update: desc}}\n    limit: $limit\n    where: {type: {id: {_eq: 1}}}\n  ) {\n    ...postFields\n  }\n}\n    ${PostFieldsFragmentDoc}"}, {"type": "mutation", "name": "createSubscription(\n    $namespace: String!\n    $name: String!\n    $params: EventSubscriptionSpecInput!\n  )", "content": "{\n    directMessageThreadByUserIds(userIds: $userIds) {\n      ...directMessageThreadInfo\n    }\n  }\n  ${directMessageThreadInfoFragment}"}, {"type": "mutation", "name": "ResetPassword($password:String!,$token:String!)", "content": "{\n    web3 {\n      account(id: $id) {\n        id\n        token(symbol: $token) {\n          id\n          balance\n          token {\n            id\n            decimals\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "po($id: String!)", "content": "{MODEL}($id: ID!) {\n            obj: delete${MODEL}(id: $id) ${fields}\n        }"}, {"type": "query", "name": "Wallet($id: ID!)", "content": "{\n    createServiceBindingUsage(\n      createServiceBindingUsageInput: $createServiceBindingUsageInput\n      namespace: $namespace\n    ) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "FinalizeOffer($offerID: String!, $from: String)", "content": "{\n  oasisTransactions(address: $address, startingPage: $startingPage, pageSize: $pageSize) {\n    page\n    limit\n    data {\n      hash\n      fee\n      gas\n      gas_price\n      height\n      method\n      date\n      sender\n      data {\n        ... on OasisBurnEvent {\n          type\n          owner\n          tokens\n        }\n        ... on OasisTransferEvent {\n          type\n          from\n          to\n          tokens\n        }\n        ... on OasisEscrowAddEvent {\n          type\n          to\n          tokens\n        }\n        ... on OasisEscrowTakeEvent {\n          type\n          from\n          to\n          tokens\n        }\n        ... on OasisEscrowReclaimEvent {\n          type\n          from\n          shares\n        }\n        ... on OasisRegisterEntityEvent {\n          type\n          id\n          nodes\n          allow_entity_signed_nodes\n        }\n        ... on OasisRegisterNodeEvent {\n          type\n          id\n          entity_id\n          expiration\n        }\n        ... on OasisUnfreezeNodeEvent {\n          type\n          id\n        }\n        ... on OasisRegisterRuntimeEvent {\n          type\n          id\n          version\n        }\n        ... on OasisRateEvent {\n          type\n          start\n          rate\n        }\n        ... on OasisBoundEvent {\n          type\n          start\n          rate_min\n          rate_max\n        }\n        ... on OasisAmendCommissionScheduleEvent {\n          type\n          rates\n          bounds\n        }\n        ... on OasisUnknownEvent {\n          type\n          method_name\n        }\n      }\n    }\n    moreResultsExist\n  }\n}"}, {"type": "mutation", "name": "DeleteTask($input: DeleteTaskInput!)", "content": "{\n        obj: reInviteOrganizationEmployee(data: $data) ${ORGANIZATION_EMPLOYEE_FIELDS}\n    }"}, {"type": "mutation", "name": "($thread: CmsThread, $id: ID!, $body: String!)", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "CreatePost($input: CreatePostInput!)", "content": "{\n    getProposalByRFPAndSupplier(sender: $sender rfpId: $rfpId) {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "subscription", "name": "clusterAddonsConfigurationEvent", "content": "{\n  workspaces(order_by: {name: asc}) {\n    ...Workspace\n  }\n}\n    ${WorkspaceFragmentDoc}"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n    uniswapDeployFactory(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "addDomain(\n    $domain: String!\n    $isTopDomain: Boolean\n    $organization: String!\n  )", "content": "{\n      createUser(userInput:{\n          phone:$phone,\n          email:$email,\n          password:$password,\n          name:$name,\n          notificationToken:$notificationToken,\n          appleId:$appleId\n      }){\n          userId\n          token\n          tokenExpiration\n          name\n          email\n          phone\n      }\n    }"}, {"type": "mutation", "name": "RemoveSharedItem($shareItemUri: String!)", "content": "{\n    createServiceBindingUsage(\n      namespace: $namespace\n      createServiceBindingUsageInput: $createServiceBindingUsageInput\n    ) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "signIn($email: String!, $password: String!)", "content": "{\n        obj: shareTicket(data: $data) { status }\n    }"}, {"type": "mutation", "name": "updateContactPhoneNumber($contactId: ID!, $input: PhoneNumberUpdateInput!)", "content": "{\n  options {\n    _id\n    title\n    description\n    price\n  }\n}"}, {"type": "mutation", "name": "updateAPIRule(\n    $name: String!\n    $namespace: String!\n    $generation: Int!\n    $params: APIRuleSpecInput!\n  )", "content": "{\n        obj: registerNewOrganization(data: $data) ${ORGANIZATION_FIELDS}\n    }"}, {"type": "query", "name": "getCommunityMember($userId: ID!, $communityId: ID!)", "content": "{\n            listPosts {\n              items {\n                id\n                title\n              }\n            }\n          }"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n      updateTodo(input: $input) {\n        id\n        description\n        name\n      }\n    }"}, {"type": "mutation", "name": "deleteServiceBindingUsages(\n    $serviceBindingUsageNames: [String!]!\n    $namespace: String!\n  )", "content": "{\n  editUser(id:$id, user: $user) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email\n  }\n}"}, {"type": "query", "name": "LatestReferendaPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n  tenant\n}"}, {"type": "mutation", "name": "deleteClusterRoleBinding($name: String!)", "content": "{\n      removeTablePermission(tableUri: $tableUri, userName: $userName)\n    }"}, {"type": "query", "name": "LatestTechCommitteeProposalPosts($postType: Int!, $limit: Int! = 5 )", "content": "{\n    deleteClient(_id: $_id) {\n      _id\n    }\n  }"}, {"type": "mutation", "name": "changeUsername($username: String!, $password: String!)", "content": "{\n    subscribeOrderStatus(_id:$_id){\n        _id\n        orderId\n        orderStatus\n        rider{\n            name\n        }\n    }\n}"}, {"type": "query", "name": "Posts ($userId: ID!, $after: String)", "content": "{\n  postUnsubscribe(post_id: $postId) {\n    message\n  }\n}"}, {"type": "query", "name": "aggSearch", "content": "{\n    foods(page:$page){\n      _id\n      title\n      description\n      stock\n      tag\n      img_url\n      variations{\n        _id\n        title\n        price\n        discounted\n        addons{\n          _id\n          title\n          description\n          quantity_minimum\n          quantity_maximum\n          options{\n            _id\n            title\n            price\n          }\n        }\n      }\n      category{\n          _id\n          title\n      }\n    }\n  }"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n  user: deleteChatId(id: $id) {\n    id,\n    chatIds {\n      id,\n      transport,\n      chatId\n    }\n  }\n}"}, {"type": "query", "name": "ViewerLogin", "content": "{\n    createListing(\n      from: $from\n      deposit: $deposit\n      depositManager: $depositManager\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n      version: $version\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateGroupMember(\n      $environmentUri: String!\n      $userName: String!\n      $role: EnvironmentPermission\n    )", "content": "{\n        objs: allPropertyScopes(where: $where, orderBy: $orderBy) {\n            id\n            name\n            hasAllProperties\n        }\n    }"}, {"type": "query", "name": "listOrganizationGroups(\n      $filter: GroupFilter\n      $organizationUri: String!\n    )", "content": "{\n  posts(\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_motion_id: {_in: $onchainMotionIds}}}\n    order_by: {onchain_link: {onchain_motion_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_motion_id\n      onchain_motion(where: {}) {\n        id\n        motionStatus(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "mutation", "name": "WithdrawListing(\n    $listingID: String!\n    $target: String!\n    $reason: String\n    $from: String\n  )", "content": "{\n  networkSummaries(fiat: $fiat) {\n    name\n    tokenPrice\n    lastDayChange\n    marketCapitalization\n    expectedReward\n    inflation\n    supportsLedger\n  }\n}"}, {"type": "query", "name": "listDatasetsOwnedByEnvGroup(\n      $filter: DatasetFilter\n      $environmentUri: String\n      $groupUri: String\n    )", "content": "{\n  orders(offset:$offset){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    cancelledAt\n    assignedAt\n    deliveredAt\n    acceptedAt\n    pickedAt\n    preparationTime\n  }\n}"}, {"type": "mutation", "name": "resetPassword($newPassword: String!, $userId: Int!, $token: String!)", "content": "{\n  swapContent(id: $id, withId: $withId) {\n    id,\n    order\n  }\n}"}, {"type": "mutation", "name": "DeletePostReaction ($postId: Int!, $userId: Int!, $reaction: bpchar!)", "content": "{\n    messagingStatusChange {\n      newStatus\n    }\n  }"}, {"type": "query", "name": "getSagemakerNotebook($notebookUri: String!)", "content": "{\n      startWorksheetQuery(worksheetUri: $worksheetUri, input: $input) {\n        AthenaQueryId\n        Error\n        Status\n        DataScannedInBytes\n        ElapsedTimeInMs\n      }\n    }"}, {"type": "mutation", "name": "CreateServiceInstance(\n    $name: String!\n    $namespace: String!\n    $externalServiceClassName: String!\n    $externalPlanName: String!\n    $labels: [String!]!\n    $parameterSchema: JSON\n    $classClusterWide: Boolean!\n    $planClusterWide: Boolean!\n  )", "content": "{\n        update_posts(where: {id: {_eq: $id}}, _set: {content: $content, title: $title}) {\n            affected_rows\n        }\n  }"}, {"type": "query", "name": "LatestDemocracyProposalPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5 )", "content": "{\n  chat(order: $order) {\n    id\n    message\n    user {\n      id\n      name\n    }\n    createdAt\n  }\n}"}, {"type": "mutation", "name": "deleteServiceBindingUsages(\n    $serviceBindingUsageNames: [String!]!\n    $namespace: String!\n  )", "content": "{\n  orders(offset:$offset){\n    _id\n    delivery_address{\n      latitude\n      longitude\n      delivery_address\n      details\n      label\n    }\n    delivery_charges\n    order_id\n    user{\n      _id\n      phone\n    }\n    \n    items{\n      _id\n      food{\n        _id\n        title\n        category{\n          _id\n        }\n        description\n        img_url\n      }\n      variation{\n        _id\n        title\n        price\n      }\n      addons{\n        _id\n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options{\n          _id\n          title\n          description\n          price\n        }\n      }\n      quantity\n    }\n    payment_status\n    payment_method\n    order_amount\n    paid_amount\n    order_status\n    status_queue{\n      pending\n      preparing\n      picked\n      delivered\n      cancelled\n    }\n    createdAt\n    review{\n      _id\n      rating\n      description\n    }\n    rider{\n      _id\n    }\n  }\n}"}, {"type": "mutation", "name": "TransferToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n        __typename\n        insert_poll_votes_one(object: {poll_id: $pollId, user_id: $userId, vote: $vote}) {\n            id\n        }\n    }"}, {"type": "query", "name": "getMembers", "content": "{\n    community(title: $title) {\n      community {\n        id\n        name\n        slug\n        communityId\n        description\n        logo\n        cover\n        type\n        category {\n          id\n          name\n        }\n        createdAt\n      }\n      stat {\n        joined\n        stat\n      }\n    }\n  }"}, {"type": "mutation", "name": "($commentId: ID!, $value: CommentVoteValueEnum!)", "content": "{\n    marketplace {\n      listings(\n        first: $first\n        after: $after\n        sort: $sort\n        order: $order\n        search: $search\n        filters: $filters\n        listingIds: $listingIds\n      ) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          endCursor\n        }\n        nodes {\n          ...basicListingFields\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "query", "name": "roles($namespace: String!)", "content": "{\n    deployIdentityContract(from: $from, contract: $contract) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "importIdentities(\n    $backend: String!\n    $interval: Int\n    $params: JSONString\n    $url: String\n  )", "content": "{\n              updateBlogContent(blogId: \"${this.blogId}\", content: \"${this.content}\"){\n                title\n                content\n              }\n            }"}, {"type": "query", "name": "GetServerSettings", "content": "{\n      listSavedQueries(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          savedQueryUri\n          name\n          owner\n          description\n          label\n          created\n          tags\n        }\n      }\n    }"}, {"type": "mutation", "name": "", "content": "{\n          feed {\n            ...Item\n          }\n          allFeeds: feed {\n            ...Item\n          }\n        }"}, {"type": "query", "name": "GetProjectMetrics($appId: String!, $subdomain: String!, $from: Timestamp, $to: Timestamp)", "content": "{\n        __typename\n        insert_poll(objects: {post_id: $postId, block_end: $blockEnd}) {\n            affected_rows\n        }\n    }"}, {"type": "mutation", "name": "update$", "content": "{\n  motions(where: {motionStatus_some: {AND: [{status: \"Proposed\"}, {blockNumber: {number_gte: $startBlock}}]}}) {\n    ...onchainMotion\n  }\n}\n    ${OnchainMotionFragmentDoc}"}, {"type": "query", "name": "($_id: ID, $email: String)", "content": "{\n      listDashboardShares(dashboardUri: $dashboardUri, filter: $filter) {\n        count\n        nodes {\n          dashboardUri\n          shareUri\n          SamlGroupName\n          owner\n          created\n          status\n        }\n      }\n    }"}, {"type": "query", "name": "Sales($id: ID!, $first: Int, $after: String, $filter: String)", "content": "{\n    deleteMessage(id: $id)\n  }"}, {"type": "mutation", "name": "SendOtpToPhoneNumber($phone: String!, $otp: String!)", "content": "{\n  getDashboardSales(starting_date: $startingDate, ending_date: $endingDate){\n    orders{\n      day\n      amount\n    }\n  }\n}"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n          feed {\n            ...FeedWithRepository\n          }\n        }\n\n        ${feedWithRepository}"}, {"type": "query", "name": "GetRolesPermissions($appId: uuid!)", "content": "{\n    uniswapDeployExchangeTemplate(from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "GetTags", "content": "{\n    updateEmployeeInvalidateTokens {\n      _id\n      firstName\n      lastName\n      email\n      phoneNumber\n      password\n      createdAt\n      tokenCount\n    }\n  }"}, {"type": "mutation", "name": "DeleteOption($id:String!,$restaurant:String!)", "content": "{\n      listAllEnvironmentConsumptionRoles(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          consumptionRoleUri\n          consumptionRoleName\n          environmentUri\n          groupUri\n          IAMRoleArn\n        }\n      }\n    }"}, {"type": "query", "name": "", "content": "{\n    functionEvent(namespace: $namespace, functionName: $functionName) {\n      type\n      function {\n        name\n        namespace\n        UID\n        labels\n        source\n        runtime\n        sourceType\n        baseDir\n        reference\n        dependencies\n        replicas {\n          min\n          max\n        }\n        resources {\n          requests {\n            memory\n            cpu\n          }\n          limits {\n            memory\n            cpu\n          }\n        }\n        buildResources {\n          requests {\n            memory\n            cpu\n          }\n          limits {\n            memory\n            cpu\n          }\n        }\n        env {\n          name\n          value\n          valueFrom {\n            type\n            name\n            key\n            optional\n          }\n        }\n        status {\n          phase\n          reason\n          message\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentityViaProxy($from: String!, $owner: String!)", "content": "{\n    userFavourite(latitude:$latitude,longitude:$longitude) {\n      _id\n      orderId\n      orderPrefix\n      name\n      image\n      slug\n      address\n      location{coordinates}\n      deliveryTime\n      minimumOrder\n      tax\n      reviewData{\n        total\n        ratings\n        reviews{\n          _id\n          order{\n            user{\n              _id\n              name\n              email\n            }\n          }\n          rating\n          description\n          createdAt\n        }\n      }\n      categories{\n        _id\n        title\n        foods{\n          _id\n          title\n          image\n          description\n          variations{\n            _id\n            title\n            price\n            discounted\n            addons\n          }\n        }\n      }\n      options{\n        _id\n        title\n        description\n        price\n      }\n      addons{\n        _id\n        options\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n      rating\n      isAvailable\n      openingTimes{\n        day\n        times{\n          startTime\n          endTime\n        }\n      }\n     }\n  }"}, {"type": "mutation", "name": "($postId: Int!, $userId: String!)", "content": "{\n    updateClientInformation(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      phoneNumber: $phoneNumber\n      password: $password\n    ) {\n      firstName\n      lastName\n      email\n      phoneNumber\n      password\n    }\n  }"}, {"type": "query", "name": "serviceClassFilters", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "mutation", "name": "ResetPassword($password:String!,$token:String!)", "content": "{\n    userComments(pagination: $pagination) {\n      page\n      per_page\n      total\n      data {\n        id\n        post {\n          postId\n        }\n        commentId\n        message\n        isReply\n        cover\n        likes\n        user {\n          id\n          fullName\n          photo\n          totalLikes\n          createdAt\n        }\n        createdAt\n      }\n    }\n  }"}, {"type": "mutation", "name": "updateAPIRule(\n    $name: String!\n    $namespace: String!\n    $generation: Int!\n    $params: APIRuleSpecInput!\n  )", "content": "{\n      createPostSecretFieldIAM(input: { title: \"Hello, World!\" }) {\n        id\n        title\n      }\n    }"}, {"type": "mutation", "name": "FinalizeOffer($offerID: String!, $from: String)", "content": "{\n    createListing(\n      from: $from\n      version: $version\n      deposit: $deposit\n      depositManager: $depositManager\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "revokeApiKey($keyId: ID!)", "content": "{\n  contact_RemoveOrganizationById(input: $input) {\n    ...ContactPersonalDetails\n  }\n}\n    ${ContactPersonalDetailsFragmentDoc}"}, {"type": "mutation", "name": "CreateTipping($tippingInput:TippingInput!)", "content": "{\n                blogById(blogId: \"${this.blogId}\") {\n                  title\n                  content\n                }\n              }"}, {"type": "mutation", "name": "DeleteUser(\n        $input: DeleteUserInput!\n        $condition: ModelUserConditionInput\n    )", "content": "{\n    currentUser {\n      login\n    }\n    feed(type: $type, offset: $offset, limit: $limit) {\n      ...FeedEntry\n    }\n  }\n  ${FeedEntryFragmentDoc}"}, {"type": "query", "name": "getAllMSAs", "content": "{\n        result: exportTicketAnalyticsToExcel(data: $data) { link }\n    }"}, {"type": "mutation", "name": "CreateReviewForEpisode($episode: Episode!, $review: ReviewInput!)", "content": "{\n  cosmosGovernanceParametersVoting(network: $network) {\n    voting_period\n  }\n}"}, {"type": "mutation", "name": "createResourceQuota(\n    $namespace: String!\n    $name: String!\n    $resourceQuota: ResourceQuotaInput!\n  )", "content": "{\n  riderEarnings(id: $riderEarningsId, offset:$offset) {\n    orderId\n    deliveryFee\n    orderStatus\n    paymentMethod\n    deliveryTime\n  }\n}"}, {"type": "mutation", "name": "DeleteUser(\n        $input: DeleteUserInput!\n        $condition: ModelUserConditionInput\n    )", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "mutation", "name": "LockIndividual($uuid: String!)", "content": "{\n    getPost(post: $post) {\n      id\n      slug\n      postId\n      content\n      cover\n      likes\n      community {\n        id\n        name\n        slug\n        communityId\n        description\n        logo\n        cover\n        type\n        category {\n          id\n          name\n        }\n        createdAt\n      }\n      user {\n        id\n        userId\n        fullName\n        photo\n        totalLikes\n      }\n      createdAt\n    }\n  }"}, {"type": "query", "name": "selectOrganizationEmployee ($where: OrganizationEmployeeWhereInput, $first: Int = 300, $skip: Int)", "content": "{\n  config(appID: $appId, resolve: true) {\n    id: __typename\n    __typename\n    provider {\n      id: __typename\n      __typename\n      smtp {\n        host\n        method\n        port\n        secure\n        sender\n        user\n      }\n    }\n  }\n}"}, {"type": "query", "name": "GetDatasetPresignedUrl(\n      $datasetUri: String!\n      $input: DatasetPresignedUrlInput\n    )", "content": "{\n  login(email:$email,password:$password,type:$type,appleId:$appleId,name:$name,notificationToken:$notificationToken){\n   userId\n   token\n   tokenExpiration\n   name\n   email\n   phone\n }\n}"}, {"type": "query", "name": "Restaurant($id:String)", "content": "{\n        onCreateTodo(owner: \"${USERNAME2}\") {\n          id\n          name\n          description\n          level\n          owner\n          sharedOwners\n          status\n        }\n      }"}, {"type": "query", "name": "GetDataset($filter: DatasetContributorFilter, $datasetUri: String!)", "content": "{\n    importWallets(accounts: $accounts)\n  }"}, {"type": "mutation", "name": "updateDataPipelineEnvironment($input: NewDataPipelineEnvironmentInput)", "content": "{\n  dashboardView_Organizations(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      id\n      name\n      subsidiaryOf {\n        organization {\n          id\n          name\n        }\n      }\n      owner {\n        id\n        firstName\n        lastName\n      }\n      description\n      industry\n      website\n      domains\n      locations {\n        ...LocationBaseDetails\n        rawAddress\n      }\n      relationshipStages {\n        relationship\n        stage\n      }\n      lastTouchPointTimelineEventId\n      lastTouchPointAt\n      lastTouchPointTimelineEvent {\n        ... on PageView {\n          id\n        }\n        ... on Issue {\n          id\n        }\n        ... on Note {\n          id\n          createdBy {\n            firstName\n            lastName\n          }\n        }\n        ... on InteractionEvent {\n          id\n          channel\n          eventType\n          sentBy {\n            __typename\n            ... on EmailParticipant {\n              type\n              emailParticipant {\n                id\n                email\n                rawEmail\n              }\n            }\n          }\n        }\n        ... on Analysis {\n          id\n        }\n        ... on Meeting {\n          id\n          name\n          attendedBy {\n            __typename\n          }\n        }\n      }\n    }\n    totalElements\n  }\n}\n    ${LocationBaseDetailsFragmentDoc}"}, {"type": "query", "name": "getCommunitySettingsById($id: ID)", "content": "{\n    sendMessage(to: $to, content: $content, media: $media) {\n      success\n      error\n      conversation {\n        id\n      }\n    }\n  }"}, {"type": "mutation", "name": "changePassword($oldPassword: String!, $newPassword: String!)", "content": "{\n    hero(episode: $episode) {\n      name\n      ... on Human {\n        height\n      }\n      ... on Droid {\n        primaryFunction\n      }\n    }\n  }"}, {"type": "query", "name": "operationHeader(\n    $graphId: ID!\n    $operationId: ID!\n    $to: DateTime\n    $from: DateTime\n    $traceFilters: [TraceFilter]\n  )", "content": "{\n    getPartnerByMessagingKey(identity: $identity) {\n      name\n      address\n      role\n      identity\n      zkpPublicKey\n    }\n  }"}, {"type": "mutation", "name": "($id: ID!, $input: GroupUpdateInput!)", "content": "{\n    deleteThread(threadId: $threadId)\n  }"}, {"type": "mutation", "name": "DeleteOptionPollVote ($optionPollId: Int!, $userId: Int!)", "content": "{\n      deleteDatasetQualityRule(ruleUri: $ruleUri)\n    }"}, {"type": "query", "name": "LatestMotionPosts($postType: Int!, $limit: Int! = 5 )", "content": "{\n    oAuth2ClientEvent(namespace: $namespace) {\n      type\n      client {\n        name\n        error {\n          code\n          description\n        }\n        spec {\n          grantTypes\n          responseTypes\n        }\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n  onchain_links(where: {onchain_motion_id: {_eq: $onchainMotionProposalId}}) {\n    id\n  }\n}"}, {"type": "query", "name": "Identity($id: ID!)", "content": "{\n        result: _allPaymentsSum(where: $where) { sum }\n    }"}, {"type": "mutation", "name": "", "content": "{\n    updateEventDefinition(id: $id, in: $in) {\n      id\n      name\n    }\n  }"}, {"type": "mutation", "name": "SaveCurrencyConfiguration($configurationInput:CurrencyConfigurationInput!)", "content": "{\n    posts (first: ${POSTS_PER_PAGE}, after: $after, filter: { market: { value: $marketId } }, orderBy: [{ createdAt: DESC }]) {\n      ...PostList\n    }\n  }\n  ${PostList.fragments.postList}"}, {"type": "query", "name": "ListScheduledQueries($filter: ScheduledQueryFilter)", "content": "{\n        onDeleteTodo {\n          id\n          description\n          name\n        }\n      }"}, {"type": "mutation", "name": "SubmitBirthCertificateOrder(\n    $contactName: String!\n    $contactEmail: String!\n    $confirmContactEmail: String!\n    $contactPhone: String!\n    $shippingName: String!\n    $shippingCompanyName: String!\n    $shippingAddress1: String!\n    $shippingAddress2: String!\n    $shippingCity: String!\n    $shippingState: String!\n    $shippingZip: String!\n    $cardToken: String!\n    $cardLast4: String!\n    $cardholderName: String!\n    $billingAddress1: String!\n    $billingAddress2: String!\n    $billingCity: String!\n    $billingState: String!\n    $billingZip: String!\n    $item: BirthCertificateOrderItemInput!\n    $idempotencyKey: String!\n  )", "content": "{\n    updateEmployeeInvalidateTokens {\n      _id\n      firstName\n      lastName\n      email\n      phoneNumber\n      password\n      createdAt\n      tokenCount\n    }\n  }"}, {"type": "query", "name": "listRedshiftClusterCopyEnabledTables(\n      $clusterUri: String!\n      $filter: DatasetTableFilter\n    )", "content": "{\n  phoneNumberRemoveFromOrganizationById(organizationId: $organizationId, id: $id) {\n    result\n  }\n}"}, {"type": "mutation", "name": "SaveDeliveryConfiguration($configurationInput:DeliveryConfigurationInput!)", "content": "{\n      updateDataPipeline(DataPipelineUri: $DataPipelineUri, input: $input) {\n        DataPipelineUri\n        name\n        label\n        created\n        tags\n      }\n    }"}, {"type": "query", "name": "HeroTypeDependentAliasedField($episode: Episode)", "content": "{\n          onDeleteMember {\n            id\n            name\n            createdAt\n            updatedAt\n          }\n        }"}, {"type": "mutation", "name": "withdraw(\n    $uuid: String!\n    $group: String!\n    $fromDate: DateTime\n    $toDate: DateTime\n    $parentOrg: String\n  )", "content": "{\n    hero(episode: $episode) {\n      name\n      ... on Human {\n        height\n      }\n      ... on Droid {\n        primaryFunction\n      }\n    }\n  }"}, {"type": "mutation", "name": "SaveNotificationTokenWeb($token:String!)", "content": "{\n      getPostConnection(id: $postId) {\n        id\n        title\n        comments {\n          items {\n            id\n            content\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "createMeeting($meeting: MeetingInput!)", "content": "{\n  deleteTask(id:$id){\n    id\n  }\n}"}, {"type": "query", "name": "ListRedshiftClusterAvailableDatasets(\n      $clusterUri: String!\n      $filter: RedshiftClusterDatasetFilter\n    )", "content": "{\n  setCredentialsStart(address: $address) {\n    message\n    signMessage\n  }\n}"}, {"type": "mutation", "name": "($_id: ID)", "content": "{\n    hero(episode: $episode) {\n      name\n      ... on Human {\n        friends {\n          name\n          ... on Human {\n            height(unit: FOOT)\n          }\n        }\n      }\n      ... on Droid {\n        friends {\n          name\n          ... on Human {\n            height(unit: METER)\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateTodo($input: UpdateTodoInput!)", "content": "{\n        result: sendMessageToSupport(data: $data) { id, status }\n    }"}, {"type": "query", "name": "TransactionReceipt($id: ID!)", "content": "{\n    delete_Like(\n      where: { user_id: { _eq: $userId }, post_id: { _eq: $postId } }\n    ) {\n      affected_rows\n    }\n  }"}, {"type": "mutation", "name": "LOGIN($password: String!, $username: String!)", "content": "{\n        result: registerResident(data: $data) ${RESIDENT_FIELDS}\n    }"}, {"type": "query", "name": "organization($id: ID!)", "content": "{\n        result: changePasswordWithToken(data: $data) { status, phone }\n    }"}, {"type": "query", "name": "($_id: ID, $email: String)", "content": "{\n  contacts(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      id\n      firstName\n      lastName\n    }\n  }\n}"}, {"type": "mutation", "name": "AddSongMutation($title: String!, $events: [EventInput]!)", "content": "{\n    sessions {\n      session(id: $sessionId) {\n        update {\n          update(session: $session) {\n            id\n            type\n            category\n            status\n            title\n            shortDescription\n            longDescription\n            primaryCategory\n            secondaryCategory\n            targetAudience\n            supportingArtifacts {\n              name\n              url\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "community($title: String!)", "content": "{\n    userComments(pagination: $pagination) {\n      page\n      per_page\n      total\n      data {\n        id\n        post {\n          postId\n        }\n        commentId\n        message\n        isReply\n        cover\n        likes\n        user {\n          id\n          fullName\n          photo\n          totalLikes\n          createdAt\n        }\n        createdAt\n      }\n    }\n  }"}, {"type": "mutation", "name": "WithdrawListing(\n    $data: String!\n    $from: String!\n    $listingID: String\n    $offerID: String\n  )", "content": "{\n        onCreateStudent(owner: $owner) {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "query", "name": "GetGlossaryTree(\n      $nodeUri: String!\n      $filter: GlossaryNodeSearchFilter\n    )", "content": "{\n    Deactivate(isActive: $isActive,email: $email) {\n      isActive\n    }\n  }"}, {"type": "mutation", "name": "OrderPickedUp($_id:String!)", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            topic: {\n                id: {\n                    _eq: $postTopic\n                }\n            },\n            onchain_link: {\n                onchain_treasury_proposal_id: {\n                    _is_null: false\n                },\n                onchain_motion_id: {\n                    _is_null: true\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_treasury_proposal_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_treasury_proposal_id\n                onchain_treasury_spend_proposal(where: {}) {\n                    id\n                    treasuryStatus(last: 1) {\n                        id\n                        status\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n${authorFields}"}, {"type": "query", "name": "Shop($id: Int!)", "content": "{\n        createNote2(input: $input) {\n            noteId\n            noteType\n            owner\n        }\n      }"}, {"type": "mutation", "name": "($followingId: String!, $userId: String!)", "content": "{\n        auth: authenticateUserWithPassword(email: $identity, password: $secret) {\n            user: item {\n                id\n            }\n            token\n        }\n    }"}, {"type": "query", "name": "PostReactions($postId: Int!)", "content": "{\n    newProposal {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n    createWallet(role: $role, name: $name) {\n      id\n      role\n      name\n    }\n  }"}, {"type": "mutation", "name": "createAddonsConfiguration(\n    $name: String!\n    $namespace: String!\n    $urls: [String!]!\n    $labels: Labels\n  )", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "query", "name": "($id: Int!)", "content": "{\n        tip (\n            where: {\n\t\t\t\tnode: {\n\t\t\t\t\ttipStatus_some: {\n\t\t\t\t\t\tAND: [\n\t\t\t\t\t\t\t{ status: \"TipOpened\" },\n\t\t\t\t\t\t\t{ blockNumber: { number_gte: $startBlock } }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        ){\n            mutation\n            node {\n                id\n                hash\n                finder\n                tipStatus(orderBy: id_DESC) {\n                    blockNumber {\n                        number\n                    }\n                    status\n                }\n            }\n        }\n    }"}, {"type": "mutation", "name": "updateSubscription(\n    $namespace: String!\n    $name: String!\n    $params: EventSubscriptionSpecInput!\n  )", "content": "{\n    updateOrderStatusRider(id:$id,status:$status){\n      _id\n      order_status\n    }\n  }"}, {"type": "subscription", "name": "onNewMSA", "content": "{\n  appSecrets(appID: $appId) {\n    ...Secret\n  }\n}\n    ${SecretFragmentDoc}"}, {"type": "mutation", "name": "AcceptOffer($offerID: String!, $from: String)", "content": "{\n    availableRiders{\n      _id\n      name\n      username\n      phone\n      available\n      zone{\n        _id\n      }\n    }\n  }"}, {"type": "mutation", "name": "($followId: ID!)", "content": "{\n    expand_e(id: $id, class: $class, io: $io, rid: $rid, page: $page, size: $size) {\n      id\n      class\n      color\n      name\n      alias\n      properties {\n        n\n        v\n      }\n      inV {\n        id\n        class\n        color\n        name\n        expand\n        analysis\n        alias\n        properties {\n          n\n          v\n        }\n      }\n      outV {\n        id\n        class\n        color\n        name\n        expand\n        analysis\n        alias\n        properties {\n          n\n          v\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "getAllPartners", "content": "{\n  poll(where: {post_id: {_eq: $postId}}) {\n    ...pollFields\n  }\n}\n    ${PollFieldsFragmentDoc}"}, {"type": "mutation", "name": "RemoveSharedItem($shareItemUri: String!)", "content": "{\n  filesAggregate {\n    aggregate {\n      count\n      sum {\n        size\n      }\n    }\n  }\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}"}, {"type": "query", "name": "trace($traceId: ID!)", "content": "{\n    logSocialShare(contentId: $contentId, actionType: $actionType)\n  }"}, {"type": "query", "name": "Wallet", "content": "{\n    communities(slugs: $slugs) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "mutation", "name": "genderize(\n    $uuids: [String]\n    $exclude: Boolean\n    $noStrictMatching: Boolean\n  )", "content": "{\n\t\t\t\tdeleteBackupSnapshotRecord(id: $snapshotID) {\n\t\t\t\t\tsuccess\n\t\t\t\t}\n\t\t\t}"}, {"type": "query", "name": "GetListOfRepos", "content": "{\n    updateComment (input: { id: $commentId, body: $body }) {\n      comment {\n        ...CommentForm\n      }\n    }\n  }\n  ${CommentForm.fragments.comment}"}, {"type": "mutation", "name": "", "content": "{\n    individuals(filters: { uuid: $uuid }) {\n      entities {\n        isLocked\n        profile {\n          name\n        }\n        identities {\n          name\n          source\n          email\n          uuid\n          username\n        }\n        enrollments {\n          start\n          end\n          group {\n            name\n            type\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateCategory($nodeUri: String!, $input: UpdateCategoryInput)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "query", "name": "GetSignInMethods($appId: uuid!)", "content": "{\n    deployIdentityProxy(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "CreateAddress($addressInput:AddressInput!)", "content": "{\n    secretEvent(namespace: $namespace) {\n      type\n      secret {\n        name\n        data\n      }\n    }\n  }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n    addAction(name: $name, action: $action, equation: $equation) {\n      _id\n    }\n  }"}, {"type": "query", "name": "getAirflowClusterWebLoginToken($clusterUri: String!)", "content": "{\n      searchEnvironmentDataItems(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          shareUri\n          environmentName\n          environmentUri\n          organizationName\n          organizationUri\n          datasetUri\n          datasetName\n          itemType\n          itemAccess\n          GlueDatabaseName\n          GlueTableName\n          S3AccessPointName\n          created\n          principalId\n        }\n      }\n    }"}, {"type": "mutation", "name": "WithdrawListing(\n    $listingID: String!\n    $target: String!\n    $reason: String\n    $from: String\n  )", "content": "{\n    oAuth2ClientEvent(namespace: $namespace) {\n      type\n      client {\n        name\n        error {\n          code\n          description\n        }\n        spec {\n          grantTypes\n          responseTypes\n        }\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnDeleteTodo", "content": "{\n        obj: authenticateUserWithPhoneAndPassword(data: { phone: $phone, password: $password }) {\n            item {\n                id\n            }\n        }\n    }"}, {"type": "query", "name": "($uuid: String!)", "content": "{\n  deleteUser(id: $id) {\n    id\n  }\n}"}, {"type": "query", "name": "organization($id: ID!)", "content": "{\n      updateDatasetContributor(\n        datasetUri: $datasetUri\n        userName: $userName\n        role: $role\n      ) {\n        datasetUri\n        label\n        userRoleForDataset\n      }\n    }"}, {"type": "query", "name": "getBuckets", "content": "{\n      listAllEnvironmentConsumptionRoles(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          consumptionRoleUri\n          consumptionRoleName\n          environmentUri\n          groupUri\n          IAMRoleArn\n        }\n      }\n    }"}, {"type": "mutation", "name": "", "content": "{\n  orders(offset:$offset){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    cancelledAt\n    assignedAt\n    deliveredAt\n    acceptedAt\n    pickedAt\n    preparationTime\n  }\n}"}, {"type": "subscription", "name": "OnCreateStudent", "content": "{\n    loggedIn {\n      wallet\n    }\n  }"}, {"type": "query", "name": "getRemoteAppMetrics", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "query", "name": "getPartnerBySlug($slug: Slug!)", "content": "{\n  deleteAddress(id:$id){\n    _id\n    addresses{\n      _id\n      label\n      deliveryAddress\n      details\n      location{coordinates}\n    }\n  }\n}"}, {"type": "mutation", "name": "AddFavourite($id:String!)", "content": "{\n    deployProxyFactory(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n        getPostPublicIAM(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "meetingUnlinkAttachment($meetingId: ID!, $attachmentId: ID!)", "content": "{\n  sendOtpToPhoneNumber(phone: $phone, otp: $otp) {\n    result\n  }\n}"}, {"type": "subscription", "name": "OnCreateMember", "content": "{\n      updateGroup(groupUri: $groupUri, input: $input) {\n        groupUri\n        groupRoleInOrganization\n        userRoleInGroup\n        created\n        updated\n      }\n    }"}, {"type": "query", "name": "getAllMSAs", "content": "{\n  createRestaurant(restaurant:$restaurant,owner:$owner){\n    _id\n    orderId\n    orderPrefix\n    name\n    slug\n    image\n    address\n    username\n    password\n    minimumOrder\n    tax\n    location{coordinates}\n  }\n}"}, {"type": "query", "name": "UnAssignedOrders", "content": "{\n  meeting_UnlinkAttachment(meetingId: $meetingId, attachmentId: $attachmentId) {\n    id\n    includes {\n      id\n      name\n      mimeType\n    }\n  }\n}"}, {"type": "mutation", "name": "UpdateOrderStatus($id:String!,$status:String!,$reason:String)", "content": "{\n    acceptOrder(_id:$_id, time:$time){\n        _id\n      orderStatus\n      preparationTime\n    }\n}"}, {"type": "mutation", "name": "authenticateUserWithPhoneAndPassword ($phone: String!, $password: String!)", "content": "{\n    getUpdatedEmployee(_id: $_id) {\n      _id\n      firstName\n      lastName\n      email\n      phoneNumber\n      employeeRole\n      permanentPasswordSet\n      password\n      tokenCount\n      createdAt\n      profilePicture\n      notifications {\n        _id\n        new\n        type\n        date\n        time\n        allDay\n        associatedClientFirstName\n        associatedClientLastName\n        originalAssociatedStaffFirstName\n        originalAssociatedStaffLastName\n        newAssociatedStaffFirstName\n        newAssociatedStaffLastName\n        createdByFirstName\n        createdByLastName\n        createdAt\n      }\n    }\n  }"}, {"type": "query", "name": "councilAtBlockNumber($blockNumber: Int!)", "content": "{\n  posts(\n    order_by: {last_update: {last_update: desc}}\n    limit: $limit\n    where: {type: {id: {_eq: 1}}}\n  ) {\n    ...postFields\n  }\n}\n    ${PostFieldsFragmentDoc}"}, {"type": "mutation", "name": "PlaceOrder($restaurant:String!,$orderInput:[OrderInput!]!,$paymentMethod:String!,$couponCode:String,$tipping:Float!, $taxationAmount: Float!,$address:AddressInput!, $orderDate: String!,$isPickedUp: Boolean!, $deliveryCharges: Float!)", "content": "{\n  subscribePlaceOrder{\n      order{\n        _id\n      delivery_address{\n        latitude\n        longitude\n        delivery_address\n        details\n        label\n      }\n      delivery_charges\n      order_amount\n      paid_amount\n      payment_method\n      order_id\n      user{\n        _id\n        name\n        email\n        phone\n      }\n      items{\n        _id\n        food{\n          _id\n          title\n          description\n          img_url\n        }\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          title\n          description\n          quantity_minimum\n          quantity_maximum\n          options{\n            _id\n            title\n            price\n          }\n        }\n        quantity\n      }\n      reason\n      status\n      payment_status\n      order_status\n      createdAt\n      review{\n        _id\n        rating\n        description\n      }\n      rider{\n        _id\n        name\n      }\n    }\n    origin\n  }\n}"}, {"type": "subscription", "name": "SubscribePlaceOrder($restaurant:String!)", "content": "{\n    addIdentity(\n      email: $email\n      name: $name\n      source: $source\n      username: $username\n    ) {\n      uuid\n    }\n  }"}, {"type": "mutation", "name": "(\n    $morningCleanser: [MyRoutineFieldsInputType]\n    $morningToner: [MyRoutineFieldsInputType]\n    $morningSerum: [MyRoutineFieldsInputType]\n    $morningMoisturizer: [MyRoutineFieldsInputType]\n    $morningSPF: [MyRoutineFieldsInputType]\n    $morningRX: [MyRoutineFieldsInputType]\n    $morningEyeCream: [MyRoutineFieldsInputType]\n    $eveningOilCleanser: [MyRoutineFieldsInputType]\n    $eveningCleanser: [MyRoutineFieldsInputType]\n    $eveningExfoliator: [MyRoutineFieldsInputType]\n    $eveningTreatmentMask: [MyRoutineFieldsInputType]\n    $eveningToner: [MyRoutineFieldsInputType]\n    $eveningSerum: [MyRoutineFieldsInputType]\n    $eveningMoisturizer: [MyRoutineFieldsInputType]\n    $eveningNightMask: [MyRoutineFieldsInputType]\n    $eveningOil: [MyRoutineFieldsInputType]\n    $eveningSpotTreatment: [MyRoutineFieldsInputType]\n    $eveningRX: [MyRoutineFieldsInputType]\n    $eveningEyeCream: [MyRoutineFieldsInputType]\n  )", "content": "{\n    clusterRole(name: $name) {\n      name\n      rules {\n        apiGroups\n        resources\n        verbs\n      }\n    }\n  }"}, {"type": "query", "name": "GetGlossary($nodeUri: String!)", "content": "{\n        result: resendMessage(data: $data) { status id }\n    }"}, {"type": "mutation", "name": "AssignOrder($id:String!)", "content": "{\n    addTeamMember(\n      email: $email\n      fullName: $fullName\n      role: $role\n      team: $team\n      companyId: $companyId\n    ) {\n      errors {\n        path\n        message\n      }\n      success\n      user {\n        id\n        fullName\n        profileUrl\n        roles {\n          id\n          name\n          companyId\n        }\n        teams {\n          id\n          name\n          companyId\n        }\n        companies {\n          id\n          name\n          logoUrl\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "tokenAuth($username: String!, $password: String!)", "content": "{\n      updateGlossary(nodeUri: $nodeUri, input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "ImportWallet($role: String, $name: String, $privateKey: String!)", "content": "{\n  \t\t\t\tbackupRepos(site_id: $siteID) {\n    \t\t\t\tid\n    \t\t\t\tsite_id\n    \t\t\t\tprovider_id\n    \t\t\t\thash\n  \t\t\t\t}\n\t\t\t}"}, {"type": "mutation", "name": "Merge($fromUuids: [String!], $toUuid: String!)", "content": "{\n    deleteFunction(namespace: $namespace, function: $function) {\n      name\n    }\n  }"}, {"type": "query", "name": "searchRedshiftClusters($filter: RedshiftClusterFilter)", "content": "{\n              onCreateTodo(\n                owner: \"${USERNAME1}\",\n                filter: { name: { eq: \"todo1\" } }\n              ) {\n                id\n                name\n                owner\n              }\n            }"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n    updateAction(actionId: $actionId, name: $name, action: $action, equation: $equation) {\n      _id\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n  update_onchain_links(where: {onchain_proposal_id: {_eq: $proposalId}}, _set: {onchain_referendum_id: $referendumId}) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "pagedComments(\n    $id: ID!\n    $filter: CommentsFilter!\n    $thread: CmsThread\n    $userHasLogin: Boolean!\n  )", "content": "{\n  counters {\n    rows: devices {\n      count\n    }\n  }\n  rows: devices(limit: $limit, offset: $offset, order: $order) {\n    id,\n    name,\n    payload,\n    createdAt,\n    updatedAt,\n    status,\n    snapshot,\n    jsonSchema,\n    version,\n    lat,\n    lon\n  }\n}"}, {"type": "mutation", "name": "CreateUser($facebookId:String,$phone:String,$email:String,$password:String,$name:String,$notificationToken:String,$appleId:String)", "content": "{\n      linkTerm(\n        nodeUri: $nodeUri\n        targetUri: $targetUri\n        targetType: $targetType\n      ) {\n        linkUri\n        created\n      }\n    }"}, {"type": "query", "name": "fetchUser", "content": "{\n                allBlogs {\n                  id\n                  title\n                  content\n                  userId\n                }\n              }"}, {"type": "mutation", "name": "SetNetwork($network: String!, $customConfig: ConfigInput)", "content": "{\n\t\t\t\tdeleteBackupSnapshotRecord(id: $snapshotID) {\n\t\t\t\t\tsuccess\n\t\t\t\t}\n\t\t\t}"}, {"type": "mutation", "name": "", "content": "{\n    serviceBindingUsageEvent(namespace: $namespace) {\n      type\n      serviceBindingUsage {\n        ...serviceBindingUsageDetails\n      }\n    }\n  }\n  ${SERVICE_BINDING_USAGE_DETAILS_FRAGMENT}"}, {"type": "query", "name": "AddChatQuery($first: Int, $search: String = \"\")", "content": "{\n    createFunction(name: $name, namespace: $namespace, params: $params) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "Approve($id: ID!)", "content": "{\n    marketplace {\n      user(id: $id) {\n        id\n        sales(first: $first, after: $after, filter: $filter) {\n          totalCount\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n          }\n          nodes {\n            ...basicOfferFields\n            listing {\n              ...basicListingFields\n            }\n          }\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "query", "name": "Rider($id:String)", "content": "{\n    logSocialFollow(actionType: $actionType)\n  }"}, {"type": "mutation", "name": "AdjustItemQuantity($id: ID!, $quantity: Int!)", "content": "{\n      getSagemakerStudioUserProfilePresignedUrl(\n        sagemakerStudioUserProfileUri: $sagemakerStudioUserProfileUri\n      )\n    }"}, {"type": "query", "name": "getAccessTokenByUserId ($data: GetAccessTokenByUserIdInput!)", "content": "{\n  orders(offset:$offset){\n    _id\n    delivery_address{\n      latitude\n      longitude\n      delivery_address\n      details\n      label\n    }\n    delivery_charges\n    order_id\n    user{\n      _id\n      phone\n    }\n    \n    items{\n      _id\n      food{\n        _id\n        title\n        category{\n          _id\n        }\n        description\n        img_url\n      }\n      variation{\n        _id\n        title\n        price\n      }\n      addons{\n        _id\n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options{\n          _id\n          title\n          description\n          price\n        }\n      }\n      quantity\n    }\n    payment_status\n    payment_method\n    order_amount\n    paid_amount\n    order_status\n    status_queue{\n      pending\n      preparing\n      picked\n      delivered\n      cancelled\n    }\n    createdAt\n    review{\n      _id\n      rating\n      description\n    }\n    rider{\n      _id\n    }\n  }\n}"}, {"type": "mutation", "name": "SendFromWallet($from: String, $to: String, $value: String)", "content": "{\n    updateMyRoutine(\n      morningCleanser: $morningCleanser\n      morningToner: $morningToner\n      morningSerum: $morningSerum\n      morningMoisturizer: $morningMoisturizer\n      morningSPF: $morningSPF\n      morningRX: $morningRX\n      morningEyeCream: $morningEyeCream\n      eveningOilCleanser: $eveningOilCleanser\n      eveningCleanser: $eveningCleanser\n      eveningExfoliator: $eveningExfoliator\n      eveningTreatmentMask: $eveningTreatmentMask\n      eveningToner: $eveningToner\n      eveningSerum: $eveningSerum\n      eveningMoisturizer: $eveningMoisturizer\n      eveningNightMask: $eveningNightMask\n      eveningOil: $eveningOil\n      eveningSpotTreatment: $eveningSpotTreatment\n      eveningRX: $eveningRX\n      eveningEyeCream: $eveningEyeCream\n    ) {\n      morningCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningToner {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningSerum {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningMoisturizer {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningSPF {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningRX {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningEyeCream {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningOilCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningExfoliator {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningTreatmentMask {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningToner {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningSerum {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningMoisturizer {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningNightMask {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningOil {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningSpotTreatment {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningRX {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningEyeCream {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n    }\n  }"}, {"type": "query", "name": "getAllOrganizationEmployeesWithMeta($where: OrganizationEmployeeWhereInput)", "content": "{\n    eventSubscriptions(ownerName: $ownerName, namespace: $namespace) {\n      name\n      namespace\n      spec {\n        filter {\n          filters {\n            eventType {\n              property\n              type\n              value\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "($id: Int!, $device: NewDevice!)", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "subscription", "name": "SubscribePaceOrder", "content": "{\n          onCreatePost(postOwner: \"${USERNAME1}\") {\n              id\n              title\n              postOwner\n          }\n      }"}, {"type": "mutation", "name": "DeleteOptionPollVote($optionPollId: Int!, $userId: Int!)", "content": "{\n      getAirflowCluster(clusterUri: $clusterUri) {\n        clusterUri\n        environmentUri\n        name\n        label\n        description\n        tags\n        owner\n        created\n        updated\n        AwsAccountId\n        region\n        clusterArn\n        clusterName\n        maxWorkers\n        environmentClass\n        kmsAlias\n        status\n        CFNStackName\n        CFNStackStatus\n        CFNStackArn\n        IAMRoleArn\n        subnetIds\n        vpc\n        securityGroupIds\n        userRoleForCluster\n        userRoleInEnvironment\n        imported\n        organization {\n          organizationUri\n          label\n          name\n        }\n        environment {\n          environmentUri\n          label\n          name\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n      }\n    }"}, {"type": "query", "name": "listNotifications($filter: NotificationFilter)", "content": "{\n    zones{\n    _id\n    title\n    description\n    location{coordinates}\n    isActive\n    }\n}"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n        onCreatePost(postOwner: \"${USERNAME2}\") {\n          id\n          title\n          postOwner\n        }\n      }"}, {"type": "mutation", "name": "UpdateGlossary($nodeUri: String!, $input: UpdateGlossaryInput)", "content": "{\n    addPartner(input: $input) {\n      partner {\n        name\n        address\n        role\n        identity\n      }\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n  insertWorkspaceMemberInvite(object: $workspaceMemberInvite) {\n    id\n  }\n}"}, {"type": "mutation", "name": "UpdateUser($name:String!,$phone:String,$phoneIsVerified:Boolean,$emailIsVerified:Boolean)", "content": "{\n  login(email:$email,password:$password,type:$type,appleId:$appleId,name:$name,notificationToken:$notificationToken){\n   userId\n   token\n   tokenExpiration\n   name\n   email\n   phone\n }\n}"}, {"type": "mutation", "name": "createContactNote($contactId: ID!, $input: NoteInput!)", "content": "{\n    subscribePlaceOrder(restaurant:$restaurant){\n        userId\n        origin\n        order{\n          _id\n          orderId\n          restaurant{\n            _id\n            name\n            image\n            address\n            location{coordinates}\n          }\n          deliveryAddress{\n            location{coordinates}\n            deliveryAddress\n            details\n            label\n          }\n          items{\n            _id\n            title\n            description\n            image\n            quantity\n            variation{\n              _id\n              title\n              price\n              discounted\n            }\n            addons{\n              _id\n              options{\n                _id\n                title\n                description\n                price\n              }\n              description\n              title\n              quantityMinimum\n              quantityMaximum\n            }\n            specialInstructions\n            isActive\n            createdAt\n            updatedAt\n          }\n          user{\n            _id\n            name\n            phone\n            email\n          }\n          paymentMethod\n          paidAmount\n          orderAmount\n          orderStatus\n          tipping\n          taxationAmount\n          status\n          paymentStatus\n          reason\n          isActive\n          createdAt\n          orderDate\n          deliveryCharges\n          isPickedUp\n          preparationTime\n          acceptedAt\n          isRinged\n          rider{\n            _id\n            name\n            username\n            available\n          }\n      }\n}\n}"}, {"type": "query", "name": "Orders", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "subscription", "name": "SubscriptionOrder($id:String!)", "content": "{\n    inviteNewCompanyToList(\n      listId: $listId\n      companyId: $companyId\n      ownerEmail: $ownerEmail\n      newCompanyName: $newCompanyName\n      isRequest: $isRequest\n      isShare: $isShare\n    ) {\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n  updateCommission(id:$id,commissionRate:$commissionRate){\n    _id\n    commissionRate\n  }\n}"}, {"type": "query", "name": "listRedshiftClusterCopyEnabledTables(\n      $clusterUri: String!\n      $filter: DatasetTableFilter\n    )", "content": "{\n        objs: allTicketClassifiers(where: {name_contains_i: $value, organization_is_null: true, parent_is_null: true}) {\n            id\n            name\n        }\n    }"}, {"type": "query", "name": "($postId: ID!)", "content": "{\n    msa(id: $id) {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${MSA_ATTRIBUTES}"}, {"type": "query", "name": "($name: String!, $namespace: String!)", "content": "{\n  cosmosDistributionCommunityPool(network: $network) {\n    denom\n    amount\n  }\n}"}, {"type": "mutation", "name": "($chats: String!, $time: DateTime!, $user: String!)", "content": "{\n    verifyPhoneCode(\n      identity: $identity\n      prefix: $prefix\n      phone: $phone\n      code: $code\n    ) {\n      success\n      reason\n      data\n    }\n  }"}, {"type": "query", "name": "HeroTypeDependentAliasedField($episode: Episode)", "content": "{\n        option_poll_votes(where: {option_poll_id: {_eq: $optionPollId}}) {\n            ...optionPollVotesFields\n        }\n    }\n    ${optionPollVotesFields}"}, {"type": "query", "name": "MyFeed", "content": "{\n    individuals(page: $page, pageSize: $pageSize) {\n      entities {\n        mk\n        isLocked\n        identities {\n          name\n          source\n          uuid\n        }\n        profile {\n          id\n          name\n        }\n      }\n      pageInfo {\n        page\n        pageSize\n        numPages\n        hasNext\n        hasPrev\n        startIndex\n        endIndex\n        totalResults\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateRiderLocation($latitude:String!,$longitude:String!)", "content": "{\n      getScheduledQuery(scheduledQueryUri: $scheduledQueryUri) {\n        scheduledQueryUri\n        name\n        label\n        cronexpr\n        description\n        owner\n        created\n        description\n        queries {\n          count\n          page\n          pages\n          nodes {\n            savedQueryUri\n            sqlBody\n            description\n            label\n            name\n            queryOrder\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "getBackupSite ($repoID: String)", "content": "{\n        createPost(input: { id: \"P2\", type: \"Post\", category: \"T1\", content: \"Content #2\", slug: \"content-2\", rating: 4 }) {\n          id\n        }\n      }"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n    userPublic(user: $user) {\n      id\n      userId\n      fullName\n      photo\n      bio\n      totalLikes\n      createdAt\n    }\n  }"}, {"type": "query", "name": "GetSearchE($id: ID!, $rid: String!)", "content": "{\n    hero(episode: $episode) {\n      name\n      friends {\n        name\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreatePost($input: CreatePostInput!)", "content": "{\n        onCreateStudent {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "query", "name": "getMotionWithNoAssociatedReferendumQuery($onchainMotionId: Int!)", "content": "{\n      createTask(input: $input) {\n        id\n        description\n        name\n      }\n    }"}, {"type": "mutation", "name": "UpdateIdentity(\n    $from: String!\n    $identity: String!\n    $profile: ProfileInput\n    $attestations: [AttestationInput]\n  )", "content": "{\n  note_UnlinkAttachment(noteId: $noteId, attachmentId: $attachmentId) {\n    id\n    includes {\n      id\n      name\n      mimeType\n    }\n  }\n}"}, {"type": "mutation", "name": "addTagToContact($input: ContactTagInput!)", "content": "{\n        obj: registerServiceConsumer(data: $data) ${SERVICE_CONSUMER_FIELDS}\n    }"}, {"type": "mutation", "name": "sigin($identity: String, $secret: String)", "content": "{\n              onCreateTodo(\n                filter: { name: { eq: \"todo1\" } }\n              ) {\n                id\n                name\n                owner\n              }\n            }"}, {"type": "mutation", "name": "GenerateDatasetAccessToken($datasetUri: String!)", "content": "{\n      listSavedQueries(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          savedQueryUri\n          name\n          owner\n          description\n          label\n          created\n          tags\n        }\n      }\n    }"}, {"type": "subscription", "name": "SubscriptionRiderLocation($riderId:String!)", "content": "{\n    currentUser {\n      login\n    }\n    feed(type: $type, offset: $offset, limit: $limit) {\n      ...FeedEntry\n    }\n  }\n  ${FeedEntryFragmentDoc}"}, {"type": "query", "name": "userPublicComments($pagination: PaginationInputType!, $user: String!)", "content": "{\n        getOrganization(organizationUri: $organizationUri) {\n          organizationUri\n          label\n          userRoleInOrganization\n          users(filter: $filter) {\n            count\n            page\n            pageSize\n            pages\n            hasNext\n            hasPrevious\n            nodes {\n              userName\n              created\n              userRoleInOrganization\n            }\n          }\n        }\n      }"}, {"type": "query", "name": "getGithubRepositories", "content": "{\n  chatbots {\n    id,\n    name,\n    chatbotId\n  }\n}"}, {"type": "query", "name": "getUserGithubProfile($id: ID)", "content": "{\n    configuration{\n      _id\n      currency\n      currency_symbol\n      delivery_charges\n    }\n  }"}, {"type": "query", "name": "TrackerMotionPosts($postType: Int!, $onchainMotionIds: [Int!]! )", "content": "{\n    userFavourite(latitude:$latitude,longitude:$longitude) {\n      _id\n      orderId\n      orderPrefix\n      name\n      image\n      slug\n      address\n      location{coordinates}\n      deliveryTime\n      minimumOrder\n      tax\n      reviewData{\n        total\n        ratings\n        reviews{\n          _id\n          order{\n            user{\n              _id\n              name\n              email\n            }\n          }\n          rating\n          description\n          createdAt\n        }\n      }\n      categories{\n        _id\n        title\n        foods{\n          _id\n          title\n          image\n          description\n          variations{\n            _id\n            title\n            price\n            discounted\n            addons\n          }\n        }\n      }\n      options{\n        _id\n        title\n        description\n        price\n      }\n      addons{\n        _id\n        options\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n      rating\n      isAvailable\n      openingTimes{\n        day\n        times{\n          startTime\n          endTime\n        }\n      }\n     }\n  }"}, {"type": "query", "name": "getDevices", "content": "{\n    deployMarketplace(\n      from: $from\n      token: $token\n      version: $version\n      autoWhitelist: $autoWhitelist\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "GetBenchmark ($name: String, $repoSlug: String)", "content": "{\n    updateIdentity(\n      from: $from\n      identity: $identity\n      attestations: $attestations\n      profile: $profile\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "updateLocation($input: LocationUpdateInput!)", "content": "{\n  comment_reactions(where: {comment_id: {_eq: $commentId}}) {\n    ...commentReactionFields\n  }\n}\n    ${CommentReactionFieldsFragmentDoc}"}, {"type": "mutation", "name": "PauseApplication($appId: uuid!)", "content": "{\n  getBackupPresignedUrl: getBackupPresignedURL(\n    appID: $appId\n    backupID: $backupId\n    expireInMinutes: $expireInMinutes\n  ) {\n    url\n    expiresAt: expires_at\n  }\n}"}, {"type": "mutation", "name": "CreateUser($facebookId:String,$phone:String,$email:String,$password:String,$name:String,$notificationToken:String,$appleId:String)", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        shares(filter: $filter) {\n          page\n          pages\n          pageSize\n          hasPrevious\n          hasNext\n          count\n          nodes {\n            shareUri\n            created\n            owner\n            status\n            userRoleForShareObject\n            statistics {\n              tables\n              locations\n            }\n            principal {\n              principalId\n              principalType\n              principalName\n              principalIAMRoleName\n              SamlGroupName\n              environmentUri\n              environmentName\n              AwsAccountId\n              region\n              organizationUri\n              organizationName\n            }\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "AddAffiliate($from: String!, $affiliate: String!)", "content": "{\n    newRFP {\n      ...RFP_ATTRIBUTES\n    }\n  }\n  ${RFP_ATTRIBUTES}"}, {"type": "query", "name": "Test($foo: String!)", "content": "{\n    partners {\n      partner(findBy: { slug: $slug }) {\n        id\n        slug\n        companyName\n        companyLogo\n        heroImage\n        website\n        goals\n        aboutUs\n        city\n        state\n        contactNumber\n        linkedIn\n        github\n        youtube\n        instagram\n        twitter\n        facebook\n        twitch\n        chat\n        blog\n        vlog\n        city\n        state\n        jobListings(isFeatured: true) {\n          id\n          title\n          description\n          slug\n        }\n        members {\n          id\n          firstName\n          lastName\n          jobTitle\n          partnerFeaturedOrder\n          profileImage\n        }\n        sessions {\n          id\n          title\n          shortDescription\n          speakers {\n            id\n            firstName\n            lastName\n            profileImage\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "deletePost($post: String!)", "content": "{\n        auth: authenticateUserWithPassword(email: $identity, password: $secret) {\n            user: item {\n                id\n            }\n        }\n    }"}, {"type": "query", "name": "SearchDeathCertificates(\n    $query: String!\n    $page: Int!\n    $startYear: String\n    $endYear: String\n  )", "content": "{\n    setCustomerForOrder(input: $input) {\n      ...ActiveOrder\n    }\n  }\n  ${ORDER_FRAGMENT}"}, {"type": "mutation", "name": "(\n    $id: ID!\n    $title: String\n    $desc: String\n    $logo: String\n    $raw: String\n  )", "content": "{\n    marketplace {\n      listing(id: $listingId) {\n        ...basicListingFields\n        ... on Listing {\n          allOffers {\n            ...basicOfferFields\n          }\n          events {\n            id\n            event\n            blockNumber\n            block {\n              id\n              timestamp\n            }\n            returnValues {\n              ipfsHash\n              party\n              offerID\n              listingID\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "mutation", "name": "( $UserId: String! , $FileCategory: String!)", "content": "{\n  editUser(id:$id, user: $user) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email\n  }\n}"}, {"type": "mutation", "name": "UpdateDataset($datasetUri: String, $input: ModifyDatasetInput)", "content": "{\n    createManyTriggers(\n      namespace: $namespace\n      triggers: $triggers\n      ownerRef: $ownerRef\n    ) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "registerMultiPaymentForOneReceipt ($data: RegisterMultiPaymentForOneReceiptInput!)", "content": "{\n    serviceBindingEvent(namespace: $namespace) {\n      type\n      serviceBinding {\n        ...serviceBindingDetails\n      }\n    }\n  }\n  ${SERVICE_BINDING_DETAILS_FRAGMENT}"}, {"type": "mutation", "name": "PostUnsubscribe($postId: Int!)", "content": "{\n    updateDice(diceId: $diceId, did: $did, name: $name, userId: $userId, actionIds: $actionIds, coverImg: $coverImg) {\n      _id\n    }\n  }"}, {"type": "query", "name": "LatestTechCommitteeProposalPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n          searchPosts {\n            items {\n              id\n              content\n              secret\n            }\n            nextToken\n          }\n        }"}, {"type": "query", "name": "GetDashboardSales($startingDate: String, $endingDate: String)", "content": "{\n    channel(id: $id) {\n      ...channelInfo\n      ...channelThreadConnection\n    }\n  }\n  ${channelInfoFragment}\n  ${channelThreadConnectionFragment}"}, {"type": "mutation", "name": "UpdateDevice($deviceId: ID!, $mac: String!, $name: String!, $ownerId: String!, $followerIds: [String])", "content": "{\n  updatePaymentMethods(\n    where: {workspaceId: {_eq: $workspaceId}}\n    _set: {isDefault: false}\n  ) {\n    affected_rows\n  }\n  insertPaymentMethod(object: $paymentMethod) {\n    id\n  }\n}"}, {"type": "mutation", "name": "addPhoneToContact($contactId: ID!, $input: PhoneNumberInput!)", "content": "{\n              test(foo: $foo)\n            }"}, {"type": "query", "name": "UserLists", "content": "{\n    updateNamespace(name: $name, labels: $labels) {\n      name\n      labels\n    }\n  }"}, {"type": "query", "name": "Shop($id: Int!)", "content": "{\n    login(email: $email)\n  }"}, {"type": "subscription", "name": "OnUpdateTodo", "content": "{\n    events {\n      event(findBy: { id: $eventId }) {\n        partners {\n          level(level: $level) {\n            id\n            slug\n            companyName\n            companyLogo\n            placement\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "deleteApplication($appId: uuid!)", "content": "{\n          feed {\n            ...Item\n          }\n          allFeeds: feed {\n            ...Item\n          }\n        }"}, {"type": "query", "name": "GetTenantName", "content": "{\n      createOrganization(input: $input) {\n        organizationUri\n        label\n        created\n      }\n    }"}, {"type": "subscription", "name": "OnUpdateStudent", "content": "{\n          feed {\n            ...FeedWithRepository\n          }\n        }\n\n        ${feedWithRepository}"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n      getRedshiftCluster(clusterUri: $clusterUri) {\n        clusterUri\n        environmentUri\n        name\n        label\n        description\n        tags\n        owner\n        created\n        updated\n        AwsAccountId\n        region\n        clusterArn\n        clusterName\n        created\n        databaseName\n        databaseUser\n        datahubSecret\n        masterUsername\n        masterSecret\n        masterDatabaseName\n        nodeType\n        numberOfNodes\n        kmsAlias\n        status\n        subnetGroupName\n        CFNStackName\n        CFNStackStatus\n        CFNStackArn\n        port\n        endpoint\n        IAMRoles\n        subnetIds\n        vpc\n        securityGroupIds\n        userRoleForCluster\n        userRoleInEnvironment\n        imported\n        SamlGroupName\n        organization {\n          organizationUri\n          label\n          name\n        }\n        environment {\n          environmentUri\n          label\n          name\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n      }\n    }"}, {"type": "mutation", "name": "ForgotPassword($email:String!, $otp:String!)", "content": "{\n    deleteComment (input: { id: $commentId }) {\n      result\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n                getDataset(datasetUri:$datasetUri){\n                    datasetUri\n                    locations(filter:$filer){\n                        count\n                        page\n                        pages\n                        hasNext\n                        hasPrevious\n                        nodes{\n                            locationUri\n                            created\n                            label\n                        }\n                    }\n\n                }\n                    tables(filter:$filter){\n                        count\n                        page\n                        pages\n                        hasNext\n                        hasPrevious\n                        nodes{\n                            datasetUri\n                            tableUri\n                            created\n                            GlueTableName\n                            label\n                        }\n                    }\n\n                }\n            }"}, {"type": "mutation", "name": "setCredentialsStart($address: String!)", "content": "{\n  meeting_LinkAttachment(meetingId: $meetingId, attachmentId: $attachmentId) {\n    id\n    includes {\n      id\n      name\n      mimeType\n    }\n  }\n}"}, {"type": "query", "name": "", "content": "{\n    service(name: $name, namespace: $namespace) {\n      name\n      json\n      labels\n      clusterIP\n      UID\n    }\n  }"}, {"type": "mutation", "name": "AssignRider($id:String!,$riderId:String!)", "content": "{\n    user(id: \"1\") {\n      ...usernameFragment\n    }\n  }\n\n  ${usernameFragment}"}, {"type": "mutation", "name": "createMeeting($meeting: MeetingInput!)", "content": "{\n    config\n  }"}, {"type": "mutation", "name": "updateMember($profile: ProfileUpdateInput!)", "content": "{\n      updateEnvironmentStack(environmentUri: $environmentUri)\n    }"}, {"type": "mutation", "name": "DeleteTodo($input: DeleteTodoInput!)", "content": "{\n    marketplace {\n      offer(id: $offerId) {\n        listing {\n          ...basicListingFields\n        }\n        ...basicOfferFields\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "query", "name": "Orders", "content": "{\n  message: createMessage(message: $message) {\n    id,\n    chatId\n  }\n}"}, {"type": "query", "name": "Poll($postId: Int!)", "content": "{\n      logout {\n        result\n      }\n    }"}, {"type": "mutation", "name": "ChangePassword($oldPassword:String!,$newPassword:String!)", "content": "{\n    updateListing(\n      listingID: $listingID\n      from: $from\n      additionalDeposit: $additionalDeposit\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "GetActiveOrders($restaurantId:ID)", "content": "{\n    config\n    configObj {\n      affiliate\n      arbitrator\n      discovery\n      growth\n      graphql\n      bridge\n      ipfsRPC\n      ipfsGateway\n      ipfsEventCache\n      provider\n      providerWS\n      proxyAccountsEnabled\n      relayerEnabled\n      originGraphQLVersion\n      relayer\n      performanceMode\n      marketplaceVersion\n      messaging {\n        globalKeyServer\n        messagingNamespace\n      }\n      centralizedIdentityEnabled\n      authServer\n    }\n  }"}, {"type": "query", "name": "allTasks", "content": "{\n          searchBlogs(aggregates: [{ name: \"Terms\", type: terms, field: secret }]) {\n            aggregateItems {\n              name\n              result {\n                ... on SearchableAggregateBucketResult {\n                  buckets {\n                    doc_count\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }"}, {"type": "mutation", "name": "RestoreApplicationDatabase($appId: String!, $backupId: String!)", "content": "{\n    serviceInstances(namespace: $namespace) {\n      ...serviceInstanceDetails\n    }\n  }\n  ${SERVICE_INSTANCE_DETAILS_FRAGMENT}"}, {"type": "subscription", "name": "onNewTransaction", "content": "{\n  createAddons(addonInput:$addonInput){\n    _id\n    title\n    description\n    options{\n      _id\n      title\n      description\n      price\n    }\n    quantity_minimum\n    quantity_maximum\n  }\n}"}, {"type": "mutation", "name": "VerifyMfaDevice($sessionId: String!, $pairingCode: String!)", "content": "{\n  __typename\n  insert_option_poll_votes_one(\n    object: {option_poll_id: $optionPollId, user_id: $userId, option: $option}\n  ) {\n    id\n  }\n}"}, {"type": "mutation", "name": "deleteAPIRule($name: String!, $namespace: String!)", "content": "{\n    sendFromNode(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "query", "name": "Config", "content": "{\n  __typename\n  insert_posts(\n    objects: {author_id: $userId, content: $content, title: $title, topic_id: $topicId}\n  ) {\n    affected_rows\n    returning {\n      id\n    }\n  }\n}"}, {"type": "subscription", "name": "OnUpdateTaskGroup(\n            $filter: ModelSubscriptionTaskGroupFilterInput\n          )", "content": "{\n  sendNotificationUser(notificationTitle:$notificationTitle,notificationBody:$notificationBody)\n}"}, {"type": "query", "name": "OutgoingPullRequests($login: String!, $startCursor: String)", "content": "{\n    me {\n      _id\n      email\n      name\n    }\n    users(first: $first, search: $search) {\n      count\n      edges {\n        _id\n        name\n        email\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateUser($name:String!,$phone:String!,$is_active:Boolean!)", "content": "{\n        getPostPublic(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "subscription", "name": "", "content": "{\n  tag_Create(input: $input) {\n    id\n    name\n    createdAt\n    updatedAt\n    source\n  }\n}"}, {"type": "query", "name": "AccountTokenBalance($account: ID!, $token: String!)", "content": "{\n    resetNotifications {\n      firstName\n      lastName\n      email\n      phoneNumber\n      employeeRole\n      notifications {\n        new\n        type\n        date\n        time\n        allDay\n        associatedClientFirstName\n        associatedClientLastName\n        newAssociatedStaffFirstName\n        newAssociatedStaffLastName\n        originalAssociatedStaffFirstName\n        originalAssociatedStaffLastName\n        createdByFirstName\n        createdByLastName\n        createdAt\n      }\n    }\n  }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n        result: _internalScheduleTaskByName(data: $data) { id }\n    }"}, {"type": "mutation", "name": "", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "updateGroupEnvironmentPermissions(\n      $input: InviteGroupOnEnvironmentInput!\n    )", "content": "{\n  onchain_links(where: {_and: {onchain_proposal_id: {_eq: $onchainProposalId}, onchain_referendum_id: {_is_null: true}}}) {\n    id\n  }\n}"}, {"type": "mutation", "name": "($device: NewDevice!)", "content": "{\n        updatePost(\n          input: { id: \"P4\", type: \"Post\", content: \"Content #4 - Update\", expectedVersion: 1 }\n          condition: { rating: { eq: 5 } }\n        ) {\n          id\n        }\n      }"}, {"type": "query", "name": "TrackerTipPosts($postType: Int!, $onchainTipIds: [String!]! )", "content": "{\n  deleteWorkspaceMemberInvites(where: {id: {_eq: $id}}) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "", "content": "{\n    getPost(post: $post) {\n      id\n      slug\n      postId\n      content\n      cover\n      likes\n      community {\n        id\n        name\n        slug\n        communityId\n        description\n        logo\n        cover\n        type\n        category {\n          id\n          name\n        }\n        createdAt\n      }\n      user {\n        id\n        userId\n        fullName\n        photo\n        totalLikes\n      }\n      createdAt\n    }\n  }"}, {"type": "query", "name": "loadMoreEverythingThreads($after: String)", "content": "{\n          searchBlogs(aggregates: [{ name: \"Terms\", type: terms, field: secret }]) {\n            aggregateItems {\n              name\n              result {\n                ... on SearchableAggregateBucketResult {\n                  buckets {\n                    doc_count\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }"}, {"type": "mutation", "name": "ExecuteRulingMutation(\n    $offerID: String!\n    $ruling: String!\n    $commission: String!\n    $message: String\n    $refund: String\n    $from: String\n  )", "content": "{\n    Follow_aggregate(where: { following_id: { _eq: $id } }) {\n      aggregate {\n        count\n      }\n    }\n  }"}, {"type": "query", "name": "SkinnyIdentity($id: ID!)", "content": "{\n    gassiest: badges(first: 10, orderBy: totalGas, orderDirection: desc) {\n      memberAddress\n      totalGas\n    }\n  }"}, {"type": "query", "name": "cosmosTransactions($address: String!, $startingPage: Float, $pageSize: Float)", "content": "{\n  viewer {\n    login\n    avatarUrl\n    name\n  }\n}"}, {"type": "mutation", "name": "AssignOrder($id:String!)", "content": "{\n    msa(id: $id) {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${MSA_ATTRIBUTES}"}, {"type": "mutation", "name": "(\n  $plugin: String!,\n  $url: String!,\n  $version: String!,\n  $initialConfiguration: String,\n  $initialContent: InputContent,\n  $chatbotId: String,\n  $pluginId: String\n  )", "content": "{\n    hero(episode: $episode) {\n      name @include(if: $includeName)\n    }\n  }"}, {"type": "mutation", "name": "addAPIDefinition($apiPackageId: ID!, $in: APIDefinitionInput!)", "content": "{\n      enableRedshiftClusterDatasetTableCopy(\n        clusterUri: $clusterUri\n        datasetUri: $datasetUri\n        tableUri: $tableUri\n        schema: $schema\n        dataLocation: $dataLocation\n      )\n    }"}, {"type": "query", "name": "($communityId: ID!, $thread: CmsThread!)", "content": "{\n        addSharedItem(shareUri: $shareUri, input: $input) {\n          shareItemUri\n        }\n      }"}, {"type": "query", "name": "getMeter (\n        $where: MeterWhereInput\n    )", "content": "{\n    categories {\n      id\n      catId\n      name\n    }\n  }"}, {"type": "mutation", "name": "CreateUser(\n        $input: CreateUserInput!\n        $condition: ModelUserConditionInput\n    )", "content": "{\n    tokens {\n      id\n      symbol\n    }\n  }"}, {"type": "query", "name": "celoSystemBalances", "content": "{\n        updateDataset(datasetUri: $datasetUri, input: $input) {\n          datasetUri\n          label\n          tags\n          userRoleForDataset\n        }\n      }"}, {"type": "query", "name": "GetEnvironmentVariables($appId: uuid!)", "content": "{\n      generateEnvironmentAccessToken(\n        environmentUri: $environmentUri\n        groupUri: $groupUri\n      )\n    }"}, {"type": "query", "name": "ordersByRestId($restaurant:String!,$page:Int,$rows:Int,$search:String)", "content": "{\n    usageKinds {\n      name\n      displayName\n    }\n  }"}, {"type": "mutation", "name": "DeleteServiceBindingUsage(\n    $serviceBindingUsageName: String!\n    $namespace: String!\n  )", "content": "{\n          searchBlogs(aggregates: [{ name: \"Terms\", type: terms, field: title }]) {\n            aggregateItems {\n              name\n              result {\n                ... on SearchableAggregateBucketResult {\n                  buckets {\n                    doc_count\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }"}, {"type": "mutation", "name": "(\n    $morningCleanserID: ID\n    $morningTonerID: ID\n    $morningSerumID: ID\n    $morningMoisturizerID: ID\n    $morningSPFID: ID\n    $morningRXID: ID\n    $morningEyeCreamID: ID\n    $eveningOilCleanserID: ID\n    $eveningCleanserID: ID\n    $eveningExfoliatorID: ID\n    $eveningTreatmentMaskID: ID\n    $eveningTonerID: ID\n    $eveningSerumID: ID\n    $eveningMoisturizerID: ID\n    $eveningNightMaskID: ID\n    $eveningOilID: ID\n    $eveningSpotTreatmentID: ID\n    $eveningRXID: ID\n    $eveningEyeCreamID: ID\n  )", "content": "{\n  editUser(id: $id, user: $user) {\n    id,\n    context\n  }\n}"}, {"type": "query", "name": "getEverythingThreads($after: String)", "content": "{\n  user(userId: $userId, chatbotId: $chatbotId) {\n    id,\n    userId,\n    payload\n  }\n}"}, {"type": "query", "name": "FoodByCategory($category:String!,$onSale:Boolean,$inStock:Boolean,$min:Float,$max:Float,$search:String)", "content": "{\n      createNetwork(input: $input) {\n        vpcUri\n        VpcId\n        label\n        description\n        tags\n        owner\n        SamlGroupName\n        privateSubnetIds\n        privateSubnetIds\n      }\n    }"}, {"type": "mutation", "name": "", "content": "{\n        posts(where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_treasury_proposal_id: {\n                    _in: $onchainTreasuryProposalIds\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_treasury_proposal_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_treasury_proposal_id\n                onchain_treasury_spend_proposal(where: {}) {\n                    id\n                    treasuryStatus(last: 1) {\n                        id\n                        status\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n${authorFields}"}, {"type": "query", "name": "GetDashboardOrders($startingDate: String, $endingDate: String,$restaurant:String!)", "content": "{\n    currencies {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        decimals\n      }\n    }\n  }"}, {"type": "query", "name": "ListOrg($filter: OrganizationFilter)", "content": "{\n    deleteTasks(taskIds: $taskIds) {\n      success\n      taskIds\n    }\n  }"}, {"type": "query", "name": "Comments ($postId: ID!)", "content": "{\n  deleteAddress(id:$id){\n    _id\n    addresses{\n      _id\n      label\n      delivery_address\n      details\n      longitude\n      latitude\n      selected\n    }\n  }\n}"}, {"type": "mutation", "name": "SendOtpToPhoneNumber($phone: String!, $otp: String!)", "content": "{\n    todos {\n      id\n      contents\n    }\n  }"}, {"type": "query", "name": "GetDataset($datasetUri:String!,$filter:DatasetTableFilter)", "content": "{\n            updateBlogArchived(blogId: \"${this.currentBlog.id}\", archived : false)\n            {\n              id\n            }\n          }"}, {"type": "mutation", "name": "MakeOffer($listingID: String!, $value: String!, $from: String)", "content": "{\n  cosmosAccountHistory(address: $address, fiat: $fiat) {\n    balanceHistory {\n      address\n      denom\n      balance\n      height\n      timestamp\n      chain\n    }\n    delegations {\n      balance\n      address\n      timestamp\n    }\n    unbondings {\n      balance\n      address\n      timestamp\n    }\n    delegatorRewards {\n      balance\n      height\n      address\n      timestamp\n      denom\n    }\n    validatorCommissions {\n      balance\n      height\n      validator\n      timestamp\n      denom\n    }\n    fiatPriceHistory {\n      price\n      timestamp\n    }\n  }\n}"}, {"type": "mutation", "name": "RestoreApplicationDatabase($appId: String!, $backupId: String!)", "content": "{\n      updateTodo(input: $input) {\n        id\n        description\n        name\n      }\n    }"}, {"type": "query", "name": "LatestDemocracyProposalPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5)", "content": "{\n  celoAccountBalances(address: $address) {\n    address\n    height\n    availableGoldBalance\n    totalLockedGoldBalance\n    nonVotingLockedGoldBalance\n    votingLockedGoldBalance\n    pendingWithdrawalBalance\n    celoUSDValue\n    delegations {\n      group\n      totalVotes\n      activeVotes\n      pendingVotes\n    }\n  }\n}"}, {"type": "subscription", "name": "OnCreateStudent", "content": "{\n  cosmosDistributionParameters(network: $network) {\n    base_proposer_reward\n    bonus_proposer_reward\n    community_tax\n  }\n}"}, {"type": "subscription", "name": "onNotification($userAddress: Address!)", "content": "{\n  orders(offset:$offset){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    cancelledAt\n    assignedAt\n    deliveredAt\n    acceptedAt\n    pickedAt\n    preparationTime\n  }\n}"}, {"type": "mutation", "name": "deleteFunction(\n    $namespace: String!\n    $function: FunctionMetadataInput!\n  )", "content": "{\n  updateApp(pk_columns: {id: $appId}, _set: $app) {\n    name\n    id\n    slug\n  }\n}"}, {"type": "mutation", "name": "changeNotificationPreference($postParticipated: Boolean, $postCreated: Boolean, $newProposal: Boolean, $ownProposal: Boolean)", "content": "{\n  celoTransactions(address: $address, startingPage: $startingPage, pageSize: $pageSize) {\n    page\n    limit\n    data {\n      blockNumber\n      timestamp\n      hash\n      from\n      to\n      details {\n        nonce\n        gasLimit\n        gasPrice\n        gasUsed\n        feeCurrency\n        gatewayFeeRecipient\n        gatewayFee\n        to\n        value\n      }\n      tags {\n        eventname\n        source\n        parameters\n      }\n    }\n    moreResultsExist\n  }\n}"}, {"type": "mutation", "name": "EditPost($id: Int!, $content: String!, $title: String!)", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n      ...communityMembers\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}\n  ${communityMembersFragment}"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n  orders(offset:$offset){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    cancelledAt\n    assignedAt\n    deliveredAt\n    acceptedAt\n    pickedAt\n    preparationTime\n  }\n}"}, {"type": "mutation", "name": "Login($facebookId:String,$email:String,$password:String,$type:String!,$appleId:String,$name:String,$notificationToken:String)", "content": "{\n    createCompany(name: $name) {\n      company {\n        name\n      }\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "mutation", "name": "DeleteVote($pollId: Int!, $userId: Int!)", "content": "{\n      importAirflowCluster(\n        environmentUri: $environmentUri\n        clusterInput: $clusterInput\n      ) {\n        clusterUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "($thread: CmsThread, $id: ID!)", "content": "{\n      importDataset(input: $input) {\n        datasetUri\n        label\n        userRoleForDataset\n      }\n    }"}, {"type": "mutation", "name": "startConfirmPhoneAction($data: StartConfirmPhoneActionInput!)", "content": "{\n    sendMessage(to: $to, content: $content)\n  }"}, {"type": "query", "name": "LatestBountyPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n  createTask(status: $status, title: $title) {\n    id\n    status\n    title\n  }\n}"}, {"type": "query", "name": "AllTechCommitteeProposalPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n    setRuntimeLabel(runtimeID: $id, key: \"scenarios\", value: $scenarios) {\n      key\n      value\n    }\n  }"}, {"type": "query", "name": "GetTrustAccount", "content": "{\n      deleteTodo(input: $input) {\n        id\n        name\n        description\n        level\n        owner\n        sharedOwners\n        status\n      }\n    }"}, {"type": "query", "name": "", "content": "{\n        result: _internalScheduleTaskByName(data: $data) { id }\n    }"}, {"type": "mutation", "name": "(\n    $title: String!\n    $notes: String\n    $staff: String!\n    $date: String!\n    $startTime: String!\n    $endTime: String!\n    $duration: Int!\n    $allDay: Boolean\n    $blockTime: Boolean\n  )", "content": "{\n    launches(after: $after) {\n      cursor\n      hasMore\n      launches {\n        ...LaunchTile\n      }\n    }\n  }\n  ${LAUNCH_TILE_DATA}"}, {"type": "query", "name": "", "content": "{\n        post_topics {\n            ...topic\n        }\n    }\n    ${topic_fragment}"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n    verifyMfaDevice(sessionId: $sessionId, pairingCode: $pairingCode) {\n      success\n      error\n    }\n  }"}, {"type": "mutation", "name": "enableMessaging", "content": "{\n    setNetwork(network: $network, customConfig: $customConfig)\n  }"}, {"type": "mutation", "name": "Logout($wallet: String!)", "content": "{\n        __typename\n        insert_posts(objects: {\n            author_id: $userId,\n            content: $content,\n            title: $title,\n            topic_id: $topicId,\n        }) {\n            affected_rows\n            returning {\n                id\n            }\n        }\n    }"}, {"type": "subscription", "name": "SubscribeOrderStatus($_id:String!)", "content": "{\n      archiveDataset(datasetUri: $datasetUri)\n    }"}, {"type": "mutation", "name": "resetOrganization ($data: ResetOrganizationInput!)", "content": "{\n      createTodo(input: $input) {\n        id\n        groups\n        content\n      }\n    }"}, {"type": "query", "name": "($id: Int,$username: String, $search: String, $chatbotId: String)", "content": "{\n      deleteCategory(nodeUri: $nodeUri)\n    }"}, {"type": "query", "name": "listDataItemsSharedWithEnvGroup(\n      $filter: EnvironmentDataItemFilter\n      $environmentUri: String\n      $groupUri: String\n    )", "content": "{\n  editAddon(addonInput:$addonInput){\n    _id\n    title\n    description\n    options{\n      _id\n      title\n      description\n      price\n    }\n    quantity_minimum\n    quantity_maximum\n  }\n}"}, {"type": "mutation", "name": "updateGroupEnvironmentPermissions(\n      $input: InviteGroupOnEnvironmentInput!\n    )", "content": "{\n        onCreateTodo {\n          id\n          description\n          name\n        }\n      }"}, {"type": "mutation", "name": "DeleteVendor($id:String!)", "content": "{\n  saveEmailConfiguration(configurationInput:$configurationInput){\n    _id\n    email\n    emailName\n    password\n    enableEmail\n  }\n}"}, {"type": "mutation", "name": "AddTaskOwners(\n    $taskID: ID!\n    $userOwners: [String!]\n    $userReviewers: [String!]\n    $teamOwners: [ID!]\n    $teamReviewers: [ID!]\n  )", "content": "{\n      getCommentConnection(id: $commentId) {\n        id\n        content\n      }\n    }"}, {"type": "mutation", "name": "addOrganizationSubsidiary($input: LinkOrganizationsInput!)", "content": "{\n    user {\n      id\n      graphs {\n        id\n        name\n        stats(to: $to, from: $from, traceFilters: $traceFilters) {\n          errorCount\n          errorPercent\n          count\n          duration\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateOrderStatus($id:String!,$status:String!,$reason:String)", "content": "{\n        listUsers(filter: { tenantId: { eq: $tenantId } }) {\n            items {\n                displayName\n            }\n        }\n    }"}, {"type": "mutation", "name": "($ids: [Int], $all: Boolean, $queue: String!)", "content": "{\n    updatePackage(id: $id, in: $in) {\n      name\n    }\n  }"}, {"type": "subscription", "name": "OnDeleteTodo", "content": "{\n    uniswapDeployExchangeTemplate(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "UpdateTodo($input: UpdateTodoInput!)", "content": "{\n    newRFP {\n      ...RFP_ATTRIBUTES\n    }\n  }\n  ${RFP_ATTRIBUTES}"}, {"type": "mutation", "name": "createFunction(\n    $name: String!\n    $namespace: String!\n    $params: FunctionMutationInput!\n  )", "content": "{\n    createProposal(input: $input) {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "mutation", "name": "AddressLoginStart($address: String!)", "content": "{\n        feed {\n          id\n          commentCount\n          repository {\n            full_name\n            html_url\n            owner {\n              avatar_url\n            }\n          }\n        }\n      }"}, {"type": "query", "name": "GraphQLPRID($name: String!, $owner: String!, $num: Int!)", "content": "{\n  orderStatusChanged(userId:$userId){\n    userId\n    origin\n    order{\n      _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    preparationTime\n    }\n  }\n}"}, {"type": "query", "name": "LatestMotionPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n        posts (filter: { and: [\n          { pinnedUntil: { value: $now, comparator: GREATER_THAN } },\n          { market: { value: $marketId } },\n        ] }) {\n          ...PostList\n        }\n      }\n      ${PostList.fragments.postList}"}, {"type": "query", "name": "GetDataset($filter: DatasetContributorFilter, $datasetUri: String!)", "content": "{\n      rejectDashboardShare(shareUri: $shareUri) {\n        shareUri\n        status\n      }\n    }"}, {"type": "query", "name": "GetBackupPresignedUrl($appId: String!, $backupId: String!, $expireInMinutes: Int)", "content": "{\n  post_topics {\n    ...topic\n  }\n}\n    ${TopicFragmentDoc}"}, {"type": "mutation", "name": "MakeOffer(\n    $listingID: String\n    $finalizes: Int\n    $affiliate: String\n    $commission: String\n    $value: String\n    $currency: String\n    $arbitrator: String\n    $data: MakeOfferInput\n    $from: String\n    $withdraw: String\n    $quantity: Int\n  )", "content": "{\n        post_topics {\n            ...topic\n        }\n    }\n    ${topic_fragment}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{ getAllShorts{ archived, user{  name  },shortTag{ tag },userId,id, thumbnail}}"}, {"type": "query", "name": "get$", "content": "{\n  users(limit: $limit, offset: $offset) {\n    ...RemoteAppGetUsers\n  }\n  usersAggregate {\n    aggregate {\n      count\n    }\n  }\n}\n    ${RemoteAppGetUsersFragmentDoc}"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n    importWallets(accounts: $accounts) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "($followId: ID!)", "content": "{\n      deleteDatasetTable(tableUri: $tableUri)\n    }"}, {"type": "mutation", "name": "LOGIN($password: String!, $username: String!)", "content": "{\n        posts(where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_referendum_id: {\n                    _in: $onchainReferendumIds\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_referendum_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_referendum_id\n                onchain_referendum(where: {}) {\n                    id\n                    end\n                    referendumStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "mutation", "name": "CreatePost($input: CreatePostInput!)", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "query", "name": "($id: ID!)", "content": "{\n    marketplace {\n      listing(id: $listingId) {\n        ...basicListingFields\n        ... on Listing {\n          allOffers {\n            ...basicOfferFields\n          }\n          events {\n            id\n            event\n            blockNumber\n            block {\n              id\n              timestamp\n            }\n            returnValues {\n              ipfsHash\n              party\n              offerID\n              listingID\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "mutation", "name": "createAPIRule(\n    $name: String!\n    $namespace: String!\n    $params: APIRuleSpecInput!\n  )", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        datasetUri\n        contributors(filter: $filter) {\n          count\n          page\n          pageSize\n          hasNext\n          hasPrevious\n          pages\n          nodes {\n            userName\n            userRoleForDataset\n            userRoleInEnvironment\n            created\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "UpdateCompany(\n    $id: ID!\n    $name: String!\n    $parentId: ID\n    $brokerId: ID\n    $deleteParentId: ID\n    $deleteBrokerId: ID\n    $autoPdf: Boolean!\n    $autoWatermark: Boolean!\n    $previewOnly: Boolean!\n  )", "content": "{\n  update_comments(where: {id: {_eq: $id}}, _set: {content: $content}) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "getCurrentUser", "content": "{\n      createUser(userInput:{\n          phone:$phone,\n          email:$email,\n          password:$password,\n          name:$name,\n          notificationToken:$notificationToken,\n          appleId:$appleId\n      }){\n          userId\n          token\n          tokenExpiration\n          name\n          email\n          phone\n      }\n    }"}, {"type": "subscription", "name": "OnCreateNote", "content": "{\n        result: changePasswordWithToken(data: $data) { status, phone }\n    }"}, {"type": "mutation", "name": "CreatePost($input: CreatePostInput!)", "content": "{\n  orders(offset:$offset){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    cancelledAt\n    assignedAt\n    deliveredAt\n    acceptedAt\n    pickedAt\n    preparationTime\n  }\n}"}, {"type": "query", "name": "FetchAccountAndApps", "content": "{\n    updateClientInformation(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      phoneNumber: $phoneNumber\n      password: $password\n    ) {\n      firstName\n      lastName\n      email\n      phoneNumber\n      password\n    }\n  }"}, {"type": "mutation", "name": "registerApplicationFromTemplate($in: ApplicationFromTemplateInput!)", "content": "{\n      createMember(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n      }\n    }"}, {"type": "query", "name": "Chat($order: ID!)", "content": "{\n        getPostPublic(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "setCredentialsStart($address: String!)", "content": "{\n      listEnvironments(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          environmentUri\n          userRoleInEnvironment\n          name\n          label\n          description\n          AwsAccountId\n          region\n          created\n          owner\n          tags\n          SamlGroupName\n          EnvironmentDefaultIAMRoleName\n          networks {\n            VpcId\n            privateSubnetIds\n            publicSubnetIds\n          }\n          stack {\n            stack\n            status\n            stackUri\n            targetUri\n            accountid\n            region\n            stackid\n            link\n            outputs\n            resources\n          }\n          organization {\n            organizationUri\n            name\n            label\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "gCliSearch($limit: Int, $keyword: String!)", "content": "{\n    deleteServiceBindingUsages(\n      serviceBindingUsageNames: $serviceBindingUsageNames\n      namespace: $namespace\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n  login(email:$email,password:$password,type:$type,appleId:$appleId,name:$name,notificationToken:$notificationToken){\n   userId\n   token\n   tokenExpiration\n   name\n   email\n   phone\n }\n}"}, {"type": "mutation", "name": "createServiceBinding(\n    $serviceInstanceName: String!\n    $namespace: String!\n    $parameters: JSON\n  )", "content": "{\n    submitComment(repoFullName: $repoFullName, commentContent: $commentContent) {\n      ...CommentsPageComment\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "mutation", "name": "deleteCategory($nodeUri: String!)", "content": "{\n  createContent(content: $content) {\n    id,\n    slug,\n    title,\n    body,\n    language,\n    payload,\n    fields {\n      id,\n      name,\n      value,\n      type\n    }\n  }\n}"}, {"type": "query", "name": "Vendors", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_motion_id: {\n                    _is_null: false\n                },\n                onchain_referendum_id: {\n                    _is_null: true\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_motion_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_motion_id\n                onchain_motion(where: {NOT: {motionStatus_some: {OR: [{status: \"Executed\"}, {status: \"Disapproved\"}]}}}) {\n                    id\n                    motionStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "query", "name": "aggSearch", "content": "{\n        onCreateStudent {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "query", "name": "GetTransactions($addr: String!, $page: Int)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "mutation", "name": "WithdrawListing(\n    $listingID: String!\n    $target: String!\n    $reason: String\n    $from: String\n  )", "content": "{\n    banUser(input: $input)\n  }"}, {"type": "mutation", "name": "CreateStudent($input: CreateStudentInput!)", "content": "{\n        obj: reInviteOrganizationEmployee(data: $data) ${ORGANIZATION_EMPLOYEE_FIELDS}\n    }"}, {"type": "mutation", "name": "changeEmail($email: String!, $password: String!)", "content": "{\n    marketplace {\n      users(first: $first, after: $after, sort: $sort) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          endCursor\n        }\n        nodes {\n          id\n          firstEvent {\n            id\n            timestamp\n          }\n          lastEvent {\n            id\n            timestamp\n          }\n          offers {\n            totalCount\n          }\n          listings {\n            totalCount\n          }\n          account {\n            id\n            owner {\n              id\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "TrackerTechCommitteeProposalPosts($postType: Int!, $onchainTechCommitteeProposalIds: [Int!]! )", "content": "{\n  login(email:$email,password:$password,type:$type,appleId:$appleId,name:$name,notificationToken:$notificationToken){\n   userId\n   token\n   tokenExpiration\n   name\n   email\n   phone\n }\n}"}, {"type": "query", "name": "loadMoreMessages($id: ID!, $after: String)", "content": "{\n    addPost(input: $input) {\n      id\n      postId\n      slug\n      content\n      cover\n      likes\n      comments\n      user {\n        id\n        fullName\n        photo\n        totalLikes\n      }\n      tags {\n        id\n        tagName\n      }\n      createdAt\n    }\n  }"}, {"type": "query", "name": "account", "content": "{\n    generateTelegramCode(identity: $identity) {\n      success\n      reason\n      code\n    }\n  }"}, {"type": "mutation", "name": "approveShareObject($shareUri: String!)", "content": "{\n      deleteDatasetTable(tableUri: $tableUri)\n    }"}, {"type": "mutation", "name": "ToggleMetaMask($enabled: Boolean)", "content": "{\n        login(password: $password, username:$username){\n            token\n        }\n    }"}, {"type": "subscription", "name": "OnCreateTaskGroup(\n            $filter: ModelSubscriptionTaskGroupFilterInput\n          )", "content": "{\n  updateApp(pk_columns: {id: $appId}, _set: {desiredState: 5}) {\n    id\n  }\n}"}, {"type": "mutation", "name": "UpdateOrderStatus($id:String!,$status:String!,$reason:String)", "content": "{\n      getDataset(datasetUri: $datasetUri) {\n        shares(filter: $filter) {\n          page\n          pages\n          pageSize\n          hasPrevious\n          hasNext\n          count\n          nodes {\n            shareUri\n            created\n            owner\n            status\n            userRoleForShareObject\n            statistics {\n              tables\n              locations\n            }\n            principal {\n              principalId\n              principalType\n              principalName\n              principalIAMRoleName\n              SamlGroupName\n              environmentUri\n              environmentName\n              AwsAccountId\n              region\n              organizationUri\n              organizationName\n            }\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "listDatasetTableProfilingRuns($tableUri: String!)", "content": "{\n      updateSSMParameter(name: $name, value: $value)\n    }"}, {"type": "query", "name": "GetTransactions($addr: String!, $page: Int)", "content": "{\n    communityPosts(pagination: $pagination, title: $title) {\n      page\n      per_page\n      total\n      data {\n        id\n        postId\n        slug\n        content\n        cover\n        likes\n        comments\n        community {\n          id\n          name\n          slug\n          communityId\n          description\n          logo\n          cover\n          type\n          category {\n            id\n            name\n          }\n          createdAt\n        }\n        tags {\n          id\n          tagName\n        }\n        user {\n          id\n          fullName\n          photo\n          totalLikes\n        }\n        createdAt\n      }\n    }\n  }"}, {"type": "query", "name": "Restaurant($id:String)", "content": "{\n  uninstallPlugin(plugin: $plugin, chatbotId: $chatbotId) {\n    id\n  }\n}"}, {"type": "mutation", "name": "UpdateMember($input: UpdateMemberInput!)", "content": "{\n    user(login: $login) {\n      repositoriesContributedTo(first: 100, orderBy: {field: UPDATED_AT, direction: DESC}, contributionTypes: COMMIT) {\n        nodes {\n          name\n          owner {\n            login\n            avatarUrl\n          }\n          isArchived\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateMember($input: UpdateMemberInput!)", "content": "{\n  organization_AddNewLocation(organizationId: $organzationId) {\n    id\n  }\n}"}, {"type": "mutation", "name": "CreateUserMutation(\n    $email: String!\n    $password: String!\n    $name: String!\n  )", "content": "{\n  sendOtpToPhoneNumber(phone: $phone, otp: $otp) {\n    result\n  }\n}"}, {"type": "mutation", "name": "UniswapDeployFactory($from: String!)", "content": "{\n      listScheduledQueries(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          scheduledQueryUri\n          name\n          owner\n          description\n          label\n          created\n          tags\n          environment {\n            AwsAccountId\n            region\n            name\n            label\n          }\n          organization {\n            organizationUri\n            name\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "community($title: String!)", "content": "{\n  createZone(zone:$zone){\n    _id\n    title\n    description\n    location{coordinates}\n    isActive\n  }\n}"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n    updateComment (input: { id: $commentId, body: $body }) {\n      comment {\n        ...CommentForm\n      }\n    }\n  }\n  ${CommentForm.fragments.comment}"}, {"type": "query", "name": "Restaurant($id:String)", "content": "{\n    submitComment(repoFullName: $repoFullName, commentContent: $commentContent) {\n      ...CommentsPageComment\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "query", "name": "HeroDetails($episode: Episode)", "content": "{\n        comment_reactions(where: {comment_id: {_eq: $commentId}}) {\n            ...commentReactionFields\n        }\n    }\n    ${commentReactionFields}"}, {"type": "query", "name": "getCurrentUserCommunityConnection", "content": "{\n    resyncAddonsConfiguration(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "query", "name": "$", "content": "{\n  updateWorkspace(pk_columns: {id: $id}, _set: $workspace) {\n    id\n    name\n    email\n    companyName\n    addressLine1\n    addressLine2\n    addressPostalCode\n    addressCity\n    addressCountryCode\n    slug\n    taxIdType\n    taxIdValue\n  }\n}"}, {"type": "query", "name": "getOnchainTips($startBlock: Int!)", "content": "{\n    updateService(name: $name, namespace: $namespace, service: $service) {\n      name\n    }\n  }"}, {"type": "query", "name": "Orders", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityChannelConnection\n    }\n  }\n  ${communityInfoFragment}\n  ${communityChannelConnectionFragment}"}, {"type": "mutation", "name": "SwapToToken($from: String!, $token: String!, $tokenValue: String!)", "content": "{\n    createListing(\n      from: $from\n      deposit: $deposit\n      depositManager: $depositManager\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n      version: $version\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "CreateUser(\n        $input: CreateUserInput!\n        $condition: ModelUserConditionInput\n    )", "content": "{\n    hero(episode: $episode) {\n      ... on Human {\n        property: homePlanet\n      }\n      ... on Droid {\n        property: primaryFunction\n      }\n    }\n  }"}, {"type": "query", "name": "ticketAnalyticsReport ($data: TicketAnalyticsReportInput!)", "content": "{\n    individuals(\n      page: $page\n      pageSize: $pageSize\n      filters: $filters\n      orderBy: $orderBy\n    ) {\n      entities {\n        ...individual\n      }\n      pageInfo {\n        page\n        pageSize\n        numPages\n        totalResults\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "query", "name": "aggSearch", "content": "{\n      updateDatasetTable(tableUri: $tableUri, input: $input) {\n        tableUri\n      }\n    }"}, {"type": "mutation", "name": "editCoupon($couponInput:CouponInput!)", "content": "{\n      createComment(input: $input) {\n        id\n        content\n        owner\n      }\n    }"}, {"type": "query", "name": "getAllRFPs", "content": "{\n  contacts(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      id\n      firstName\n      lastName\n    }\n  }\n}"}, {"type": "mutation", "name": "resyncClusterAddonsConfiguration($name: String!)", "content": "{\n    newProposal {\n      ...PROPOSAL_ATTRIBUTES\n    }\n  }\n  ${PROPOSAL_ATTRIBUTES}"}, {"type": "mutation", "name": "($id: ID!, $input: UserUpdateInput!)", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "mutation", "name": "updateApplication($id: ID!, $in: ApplicationUpdateInput!)", "content": "{\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"}, {"type": "query", "name": "TransactionReceipt($id: ID!)", "content": "{\n    own_past_appointments(_id: $_id, email: $email) {\n      id\n      date\n      startTime\n      morningOrEvening\n      endTime\n      duration\n      price\n      treatments {\n        name\n        duration\n        price\n      }\n      addOns {\n        name\n        duration\n        price\n      }\n      client {\n        _id\n        squareCustomerId\n        unsavedSquareCardIDs\n        firstName\n        lastName\n        email\n        phoneNumber\n      }\n      bookedWithCardSquareID\n      notes\n      confirmed\n    }\n  }"}, {"type": "query", "name": "CheckTelegramStatus($identity: String!, $maxTries: Int)", "content": "{\n  createAdmin(admin: $admin) {\n    id,\n    username,\n    first_name,\n    last_name,\n    username,\n    payload,\n    permissions,\n    chatbotIds,\n    createdAt,\n    email\n  }\n}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n      txnsByAddr(addr: $addr) {\n        ID\n      }\n    }"}, {"type": "query", "name": "CheckEnvironment($input: AwsEnvironmentInput!)", "content": "{\n      getAuthorSession(\n        environmentUri: $environmentUri\n        dashboardUri: $dashboardUri\n      )\n    }"}, {"type": "mutation", "name": "DeployIdentity(\n    $from: String!\n    $profile: ProfileInput\n    $attestations: [String]\n  )", "content": "{\n    updateService(name: $name, namespace: $namespace, service: $service) {\n      name\n    }\n  }"}, {"type": "query", "name": "Rider($id:String)", "content": "{\n        posts(order_by: {id: desc}, limit: $limit, where: {type: {id: {_eq: 1}}}) {\n            ...postFields\n        }\n    }\n    ${postFields}"}, {"type": "query", "name": "predictTicketClassification ($data: PredictTicketClassificationInput!)", "content": "{\n  addons{\n  _id\n  title\n  description\n  options{\n    _id\n    title\n    description\n    price\n  }\n  quantity_minimum\n  quantity_maximum\n}}"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n        addressLogin(address: $address, signature:$signature){\n            token\n        }\n    }"}, {"type": "query", "name": "", "content": "{\n              onCreateTask(\n                filter: { priority: { eq: 8 } }\n              ) {\n                id\n                title\n                priority\n                owner\n              }\n            }"}, {"type": "query", "name": "Network", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "query", "name": "ListScheduledQueries($filter: ScheduledQueryFilter)", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "query", "name": "Function($name: String!, $namespace: String!)", "content": "{\n    addEventDefinitionToPackage(packageID: $apiPackageId, in: $in) {\n      id\n      name\n      description\n      spec {\n        data\n        format\n        type\n      }\n      group\n    }\n  }"}, {"type": "mutation", "name": "SubmitMarriageCertificateOrder(\n    $contactName: String!\n    $contactEmail: String!\n    $confirmContactEmail: String!\n    $contactPhone: String!\n    $shippingName: String!\n    $shippingCompanyName: String!\n    $shippingAddress1: String!\n    $shippingAddress2: String!\n    $shippingCity: String!\n    $shippingState: String!\n    $shippingZip: String!\n    $cardToken: String!\n    $cardLast4: String!\n    $cardholderName: String!\n    $billingAddress1: String!\n    $billingAddress2: String!\n    $billingCity: String!\n    $billingState: String!\n    $billingZip: String!\n    $item: MarriageCertificateOrderItemInput!\n    $idempotencyKey: String!\n  )", "content": "{\n          organization(id: $id) {\n            id\n            name\n            issueSummaryByStatus {\n              status\n              count\n            }\n            externalLinks {\n              type\n              externalId\n              externalUrl\n            }\n          }\n        }"}, {"type": "query", "name": "getMembers($after: String)", "content": "{\n      getAllWithdrawRequests(offset:$offset){\n          success\n          message\n          data{\n            _id\n            requestId\n            requestAmount\n            requestTime\n            rider{\n              _id\n              name\n              currentWalletAmount\n            }\n            status\n          }\n          pagination{\n            total\n          }\n      }\n  }"}, {"type": "query", "name": "Zones", "content": "{\n    addDevice(mac: $mac, name: $name, ownerId: $ownerId, followerIds: $followerIds) {\n      _id\n    }\n  }"}, {"type": "query", "name": "($name: String!)", "content": "{\n          feed {\n            ...Item\n          }\n          allFeeds: feed {\n            ...Item\n          }\n        }"}, {"type": "query", "name": "getMeter (\n        $where: MeterWhereInput\n    )", "content": "{\n        createPostPrivate(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "($followingId: String!, $userId: String!)", "content": "{\n  allAddons(page:$page){\n  _id\n  title\n  description\n  options{\n    _id\n    title\n    description\n    price\n  }\n  quantity_minimum\n  quantity_maximum\n  is_active\n}}"}, {"type": "subscription", "name": "SubscriptionOrder($id:String!)", "content": "{\n    organizations(page: $page, pageSize: $pageSize, filters: $filters) {\n      entities {\n        id\n        name\n        enrollments {\n          id\n          individual {\n            mk\n          }\n        }\n        domains {\n          domain\n          isTopDomain\n        }\n      }\n      pageInfo {\n        page\n        pageSize\n        numPages\n        totalResults\n      }\n    }\n  }"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n          feed @client {\n            id\n          }\n        }"}, {"type": "query", "name": "", "content": "{\n  editSection(section:$section){\n      _id\n      name\n      enabled\n      restaurants{\n        _id\n        name\n      }\n    }\n}"}, {"type": "mutation", "name": "CreateMember($input: CreateMemberInput!)", "content": "{\n    web3 {\n      accounts {\n        id\n        role\n        name\n      }\n      useMetaMask\n      metaMaskAccount {\n        id\n        role\n        name\n      }\n    }\n  }"}, {"type": "query", "name": "UserTasks(\n    $listIds: [ID!]!\n    $sectionIds: [ID!]!\n    $offset: Int\n    $limit: Int\n  )", "content": "{\n  subscriptionRiderLocation(riderId:$riderId) {\n    _id\n    location {coordinates}\n  }\n}"}, {"type": "query", "name": "GetTenantName", "content": "{\n      getCommentConnection(id: $commentId) {\n        id\n        content\n        post {\n          id\n          title\n        }\n      }\n    }"}, {"type": "mutation", "name": "", "content": "{\n    createCommentVote (input: { comment: $commentId, value: $value }) {\n      commentVote {\n        value\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreatePost($input: CreatePostInput!)", "content": "{\n    cancelOrder(_id:$_id,reason:$reason){\n        _id\n      orderStatus\n    }\n}"}, {"type": "query", "name": "GetWorksheet($worksheetUri: String!)", "content": "{\n      listDatasetsOwnedByEnvGroup(\n        environmentUri: $environmentUri\n        groupUri: $groupUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          datasetUri\n          label\n          AwsAccountId\n          region\n          GlueDatabaseName\n          SamlAdminGroupName\n          name\n          S3BucketName\n          created\n          owner\n          stack {\n            status\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "GetContactMentionSuggestions($pagination: Pagination!, $where: Filter, $sort: [SortBy!])", "content": "{\n    unsetThread(communityId: $communityId, threadId: $threadId) {\n      id\n      threads {\n        title\n      }\n    }\n  }"}, {"type": "mutation", "name": "($postId: ID!)", "content": "{\n        update_comments(where: {id: {_eq: $id}}, _set: {content: $content}) {\n            affected_rows\n        }\n    }"}, {"type": "mutation", "name": "UpdateTimings($id:String!,$openingTimes:[TimingsInput])", "content": "{\n  forgotPassword(email:$email,otp:$otp){\n    result\n  }\n}"}, {"type": "mutation", "name": "createSubscription(\n    $namespace: String!\n    $name: String!\n    $params: EventSubscriptionSpecInput!\n  )", "content": "{\n  createOptions(optionInput:$optionInput){\n    _id\n    options{\n      _id\n      title\n      description\n      price\n    }\n  }\n}"}, {"type": "query", "name": "get$", "content": "{\n      listScheduledQueries(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          scheduledQueryUri\n          name\n          owner\n          description\n          label\n          created\n          tags\n          environment {\n            AwsAccountId\n            region\n            name\n            label\n          }\n          organization {\n            organizationUri\n            name\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "SearchPosts", "content": "{\n  posts(where: {onchain_link: {onchain_bounty_id: {_eq: $id}}}) {\n    ...bountyPost\n  }\n}\n    ${BountyPostFragmentDoc}"}, {"type": "mutation", "name": "EditAddress($addressInput:AddressInput!)", "content": "{\n    runtime(id: $id) {\n      id\n      name\n      description\n      status {\n        condition\n      }\n      labels\n    }\n  }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n  emailRemoveFromContactById(contactId: $contactId, id: $id) {\n    result\n  }\n}"}, {"type": "query", "name": "Configuration", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "query", "name": "SearchComments", "content": "{\n  chatbot: editChatbot(id: $id, chatbot: $chatbot) {\n    id,\n    name,\n    description,\n    guid,\n    chatbotId\n  }\n}"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n    createCategory(title: $title, raw: $raw) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n\t\tsongs {\n\t\t\tid\n\t\t\ttitle\n\t\t\tevents{\n\t\t\t\tactiveNotes\n\t\t\t\tduration\n\t\t\t}\n\t\t}\n\t}"}, {"type": "mutation", "name": "AddAffiliate($from: String!, $affiliate: String!)", "content": "{\n        posts(where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_proposal_id: {\n                    _in: $onchainProposalIds\n                },\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_proposal_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_proposal_id\n                onchain_proposal(where: {}) {\n                    id\n                    proposalStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n    updateAdminPassword(password: $password) {\n      _id\n      permanentPasswordSet\n      firstName\n      lastName\n      email\n      phoneNumber\n      password\n    }\n  }"}, {"type": "mutation", "name": "EditCategory( $_id:String,$title:String!,$description:String!,$img_menu:String)", "content": "{\n      updateEnvironmentStack(environmentUri: $environmentUri)\n    }"}, {"type": "query", "name": "TwoHeroes", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "subscription", "name": "OnCreateMember", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "query", "name": "TipPostAndComments ($hash:String!)", "content": "{\n        createPostPublic(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "UpdateDatasetTable(\n      $tableUri: String!\n      $input: ModifyDatasetTableInput!\n    )", "content": "{\n    user: currentUser {\n      ...userInfo\n      email\n      pendingEmail\n      ...userSettings\n    }\n  }\n  ${userInfoFragment}\n  ${userSettingsFragment}"}, {"type": "query", "name": "getAll$", "content": "{\n  login(email:$email,password:$password,type:$type,appleId:$appleId,name:$name,notificationToken:$notificationToken){\n   userId\n   token\n   tokenExpiration\n   name\n   email\n   phone\n }\n}"}, {"type": "mutation", "name": "changeUsername($username: String!, $password: String!)", "content": "{\n  updateOrderStatusRider(id:$id,status:$status){\n    _id\n    orderStatus\n  }\n}"}, {"type": "query", "name": "getAllNotices", "content": "{\n    uniswapDeployExchangeTemplate(from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "Stats", "content": "{\n  signup(email: $email, password: $password, username: $username) {\n    token\n  }\n}"}, {"type": "mutation", "name": "_internalScheduleTaskByName ($data: _internalScheduleTaskByNameInput!)", "content": "{\n    hosting {\n      name\n      status\n    }\n  }"}, {"type": "query", "name": "communities($filter: PagedFilter!)", "content": "{\n    operation(\n      graphId: $graphId\n      operationId: $operationId\n      traceFilters: $traceFilters\n      to: $to\n      from: $from\n    ) {\n      id\n      key\n      stats {\n        count\n        errorCount\n        errorPercent\n        duration\n      }\n    }\n  }"}, {"type": "mutation", "name": "DisputeOffer($offerID: String!, $from: String)", "content": "{\n    namespace(name: $name) {\n      name\n      labels\n      applications\n      pods {\n        name\n        status\n      }\n      deployments {\n        name\n        status {\n          replicas\n          readyReplicas\n        }\n      }\n    }\n\n    resourceQuotas(namespace: $name) {\n      name\n      json\n      spec {\n        hard {\n          limits {\n            memory\n          }\n          requests {\n            memory\n          }\n          pods\n        }\n      }\n    }\n\n    limitRanges(namespace: $name) {\n      name\n      json\n      spec {\n        limits {\n          type\n          max {\n            memory\n            cpu\n          }\n          default {\n            memory\n            cpu\n          }\n          defaultRequest {\n            memory\n            cpu\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "apiDefinition(\n    $applicationId: ID!\n    $apiPackageId: ID!\n    $apiDefinitionId: ID!\n  )", "content": "{\n      addTablePermission(\n        tableUri: $tableUri\n        userName: $userName\n        role: $role\n      ) {\n        tableUri\n      }\n    }"}, {"type": "query", "name": "user", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "query", "name": "getMembers", "content": "{\n  placeOrder(orderInput: $orderInput,paymentMethod:$paymentMethod,couponCode:$couponCode,address:$address) {\n    _id\n    order_id\n    delivery_address{\n      latitude\n      longitude\n      delivery_address\n      details\n      label\n    }\n    delivery_charges\n    items{\n      _id\n      food{\n        _id\n        title\n        category{\n          _id\n        }\n        description\n        img_url\n      }\n      variation{\n        _id\n        title\n        price\n      }\n      addons{\n        _id\n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options{\n          _id\n          title\n          description\n          price\n        }\n      }\n      quantity\n    }\n    user {\n      _id\n      phone\n      email\n    }\n    rider{\n      _id\n    }\n    payment_status\n    payment_method\n    paid_amount\n    order_amount\n    order_status\n    status_queue{\n      pending\n      preparing\n      picked\n      delivered\n      cancelled\n    }\n    createdAt\n    review{\n      _id\n      rating\n      description\n    }\n  }\n}"}, {"type": "query", "name": "($commentId: ID!)", "content": "{\n  subscriptionNewMessage(order:$order){\n    id\n    message\n    user {\n      id\n      name\n    }\n    createdAt\n  }\n}"}, {"type": "mutation", "name": "PublishActiveUsers($revision: ID!)", "content": "{\n    addPost(input: $input) {\n      id\n      postId\n      slug\n      content\n      cover\n      likes\n      comments\n      user {\n        id\n        fullName\n        photo\n        totalLikes\n      }\n      tags {\n        id\n        tagName\n      }\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n          onDeleteMember {\n            id\n            name\n            createdAt\n            updatedAt\n          }\n        }"}, {"type": "query", "name": "Orders", "content": "{\n  __typename\n  insert_poll(objects: {post_id: $postId, block_end: $blockEnd}) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "getBackupReposByProviderID($providerID: String)", "content": "{\n            book(id: $id) {\n              title\n              pages\n              chapters\n              authors {\n                name\n              }\n            }\n          }"}, {"type": "query", "name": "allTasks", "content": "{\n    publicTaskMessages(taskId: $taskId) {\n      message\n      user {\n        fullName\n      }\n      createdAt\n    }\n  }"}, {"type": "query", "name": "listAllEnvironmentConsumptionRoles(\n      $filter: ConsumptionRoleFilter\n      $environmentUri: String!\n    )", "content": "{\n  config(appID: $appId, resolve: true) {\n    id: __typename\n    __typename\n    auth {\n      id: __typename\n      __typename\n      redirections {\n        clientUrl\n        allowedUrls\n      }\n      totp {\n        enabled\n        issuer\n      }\n      signUp {\n        enabled\n      }\n      session {\n        accessToken {\n          expiresIn\n        }\n        refreshToken {\n          expiresIn\n        }\n      }\n      user {\n        email {\n          allowed\n          blocked\n        }\n        emailDomains {\n          allowed\n          blocked\n        }\n        gravatar {\n          enabled\n          default\n          rating\n        }\n      }\n      version\n    }\n  }\n}"}, {"type": "mutation", "name": "addressLinkStart($network: String!, $address: String!)", "content": "{\n      listKeyValueTags(targetUri: $targetUri, targetType: $targetType) {\n        tagUri\n        targetUri\n        targetType\n        key\n        value\n        cascade\n      }\n    }"}, {"type": "mutation", "name": "addNewItem ($name: String!, $desc: String, $ownerId: ID!)", "content": "{\n    foods(page:$page){\n      _id\n      title\n      description\n      stock\n      tag\n      img_url\n      variations{\n        _id\n        title\n        price\n        discounted\n        addons{\n          _id\n          title\n          description\n          quantity_minimum\n          quantity_maximum\n          options{\n            _id\n            title\n            price\n          }\n        }\n      }\n      category{\n          _id\n          title\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateMember($input: UpdateMemberInput!)", "content": "{\n        result: registerResident(data: $data) ${RESIDENT_FIELDS}\n    }"}, {"type": "mutation", "name": "UpdateUser($name:String!,$phone:String!,$is_active:Boolean!)", "content": "{\n  nearByRestaurants(latitude:$latitude,longitude:$longitude){\n    offers{\n      _id\n      name\n      tag\n      restaurants\n    }\n    sections{\n      _id\n      name\n      restaurants\n    }\n    restaurants{\n      _id\n      name\n      image\n      slug\n      address\n      location{coordinates}\n      deliveryTime\n      minimumOrder\n      tax\n      reviewData{\n          total\n          ratings\n          reviews{\n            _id\n          }\n      }\n      categories{\n        _id\n        title\n        foods{\n          _id\n          title\n        }\n      }\n      rating\n      isAvailable\n      openingTimes{\n      day\n      times{\n        startTime\n        endTime\n      }\n    }\n  }\n}\n}"}, {"type": "query", "name": "getAllOrganizationEmployeesWithMeta($where: OrganizationEmployeeWhereInput)", "content": "{\n      disableRedshiftClusterDatasetTableCopy(\n        clusterUri: $clusterUri\n        datasetUri: $datasetUri\n        tableUri: $tableUri\n      )\n    }"}, {"type": "query", "name": "usageKinds", "content": "{\n    zones{\n    _id\n    title\n    description\n    location{coordinates}\n    isActive\n    }\n}"}, {"type": "subscription", "name": "OnCreatePost", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "query", "name": "TrackerReferendaPosts($postType: Int!, $onchainReferendumIds: [Int!]!)", "content": "{\n\t\tmeme_templates {\n\t\t\tid\n\t\t\ttitle\n\t\t\timage_link\n\t\t}\n\t}"}, {"type": "mutation", "name": "EditAddress($addressInput:AddressInput!)", "content": "{\n    user(id: $id) {\n      ...userInfo\n      ...userThreadConnection\n    }\n  }\n  ${userInfoFragment}\n  ${userThreadConnectionFragment}"}, {"type": "mutation", "name": "FinalizeOffer($offerID: String!, $from: String)", "content": "{\n    deleteServiceBinding(\n      serviceBindingName: $serviceBindingName\n      namespace: $namespace\n    ) {\n      name\n    }\n  }"}, {"type": "subscription", "name": "GetServerStatusUpdate", "content": "{\n              onCreateTodo(\n                owner: \"${USERNAME1}\"\n              ) {\n                id\n                name\n                owner\n              }\n            }"}, {"type": "query", "name": "($namespace: String, $chatbotId: String)", "content": "{\n                blogByUserId(userId: \"${this.loggedInUser}\") {\n                  id\n                  title\n                  content\n                  userId\n                }\n              }"}, {"type": "query", "name": "GetWorkspaceAndProject($workspaceSlug: String!, $projectSlug: String)", "content": "{\n  config(appID: $appId, resolve: true) {\n    id: __typename\n    __typename\n    auth {\n      id: __typename\n      __typename\n      redirections {\n        clientUrl\n        allowedUrls\n      }\n      totp {\n        enabled\n        issuer\n      }\n      signUp {\n        enabled\n      }\n      session {\n        accessToken {\n          expiresIn\n        }\n        refreshToken {\n          expiresIn\n        }\n      }\n      user {\n        email {\n          allowed\n          blocked\n        }\n        emailDomains {\n          allowed\n          blocked\n        }\n        gravatar {\n          enabled\n          default\n          rating\n        }\n      }\n      version\n    }\n  }\n}"}, {"type": "mutation", "name": "($content: InputContent!)", "content": "{\n      getEnvironmentAssumeRoleUrl(\n        environmentUri: $environmentUri\n        groupUri: $groupUri\n      )\n    }"}, {"type": "query", "name": "TransactionReceipt($id: ID!)", "content": "{\n    deleteServiceBinding(\n      serviceBindingName: $serviceBindingName\n      namespace: $namespace\n    ) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "EditVendor($vendorInput:VendorInput)", "content": "{\n      submitShareObject(shareUri: $shareUri) {\n        shareUri\n        status\n      }\n    }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n    createLimitRange(\n      namespace: $namespace\n      name: $name\n      limitRange: $limitRange\n    ) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "($voteId: ID!)", "content": "{\n        result: predictTransactionClassification(data: $data) { id name isOutcome category }\n    }"}, {"type": "mutation", "name": "UpdateTodo($input: UpdateTodoInput!)", "content": "{\n\tchatbots {\n    id,\n    chatbotId,\n    name,\n    description,\n    guid,\n    plugins {\n      id,\n      plugin,\n      version,\n      filename\n    }\n  }\n}"}, {"type": "mutation", "name": "SendOtpToPhoneNumber($phone: String!, $otp: String!)", "content": "{\n    withdrawOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "PROFILE($username: String!)", "content": "{\n    submitComment(repoFullName: $repoFullName, commentContent: $commentContent) {\n      ...CommentsPageComment\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "mutation", "name": "sendMessageToResidentScopes ($data: SendMessageToResidentScopesServiceInput!)", "content": "{\n  organization_Create(input: $input) {\n    id\n    name\n  }\n}"}, {"type": "query", "name": "($namespace: String, $chatbotId: String)", "content": "{\n              onCreateTask(\n                owner: \"${USERNAME1}\"\n              ) {\n                id\n                title\n                priority\n                owner\n              }\n            }"}, {"type": "query", "name": "getMonitoringVPCConnectionId", "content": "{\n    synthesizeText(text: $text, voice: $voice) {\n      url\n    }\n  }"}, {"type": "mutation", "name": "setCredentialsConfirm($address: String!, $email: String, $signature: String!, $username: String!, $password: String!)", "content": "{\n    cancelOrder(_id:$_id,reason:$reason){\n        _id\n      orderStatus\n    }\n}"}, {"type": "subscription", "name": "OnCreateMember", "content": "{\n  filesAggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n}"}, {"type": "mutation", "name": "deleteNetwork($vpcUri: String!)", "content": "{\n    createCommunity(title: $title, desc: $desc, logo: $logo, raw: $raw) {\n      id\n      title\n      desc\n    }\n  }"}, {"type": "mutation", "name": "muteRing($orderId:String)", "content": "{\n      createPostSecretFieldIAM(input: { title: \"Hello, World!\", secret: \"42\" }) {\n        id\n        title\n        secret\n      }\n    }"}, {"type": "query", "name": "getPlatformAuthorSession($awsAccount: String)", "content": "{\n        createTipping(tippingInput:$tippingInput){\n          _id\n          tipVariations\n          enabled\n        }\n      }"}, {"type": "query", "name": "", "content": "{\n  subscription(post_id: $postId) {\n    subscribed\n  }\n}"}, {"type": "query", "name": "cosmosStakingParameters($network: String!)", "content": "{\n      createNetwork(input: $input) {\n        vpcUri\n        VpcId\n        label\n        description\n        tags\n        owner\n        SamlGroupName\n        privateSubnetIds\n        privateSubnetIds\n      }\n    }"}, {"type": "query", "name": "user($login: String)", "content": "{\n    hero(episode: $episode) {\n      name\n      ... on Human {\n        height\n      }\n      ... on Droid {\n        primaryFunction\n      }\n    }\n  }"}, {"type": "query", "name": "getBackupReposBySiteID($siteID: Int)", "content": "{\n  viewer {\n    login\n    avatarUrl\n    name\n  }\n}"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "query", "name": "ListRedshiftClusterAvailableDatasets(\n      $clusterUri: String!\n      $filter: RedshiftClusterDatasetFilter\n    )", "content": "{\n                result: ${mutationAction}Company(input: {\n                  ${payload.companyId ?"}, {"type": "mutation", "name": "deleteDomain($domain: String!)", "content": "{\n  ridersByZone(id:$id){\n    _id\n    name\n    username\n    password\n    phone\n    available\n    zone{\n      _id\n      title\n    }\n  }\n}"}, {"type": "mutation", "name": "tokenAuth($username: String!, $password: String!)", "content": "{\n  sendChatMessage(message: $messageInput, orderId: $orderId) {\n    success\n    message\n    data {\n      id\n      message\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n}"}, {"type": "query", "name": "", "content": "{\n  onchain_links(where: {onchain_motion_id: {_eq: $onchainMotionProposalId}}) {\n    id\n  }\n}"}, {"type": "mutation", "name": "createBankAccountRequest ($data: CreateBankAccountRequestInput!)", "content": "{\n      listRedshiftClusterCopyEnabledTables(\n        clusterUri: $clusterUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        count\n        nodes {\n          datasetUri\n          tableUri\n          name\n          label\n          GlueDatabaseName\n          GlueTableName\n          S3Prefix\n          AwsAccountId\n          RedshiftSchema(clusterUri: $clusterUri)\n          RedshiftCopyDataLocation(clusterUri: $clusterUri)\n        }\n      }\n    }"}, {"type": "mutation", "name": "editCoupon($couponInput:CouponInput!)", "content": "{\n  editUser(id: $id, user: $user) {\n    id,\n    context\n  }\n}"}, {"type": "mutation", "name": "DeployIdentityProxy($from: String!)", "content": "{\n      removeTablePermission(tableUri: $tableUri, userName: $userName)\n    }"}, {"type": "query", "name": "system", "content": "{\n    posts (first: ${POSTS_PER_PAGE}, after: $after, filter: { market: { value: $marketId } }, orderBy: [{ createdAt: DESC }]) {\n      ...PostList\n    }\n  }\n  ${PostList.fragments.postList}"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n  contact_AddTagById(input: $input) {\n    id\n    tags {\n      ...Tag\n    }\n  }\n}\n    ${TagFragmentDoc}"}, {"type": "query", "name": "getCommunitiesByIds($ids: [ID])", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "mutation", "name": "SaveEmailConfiguration($configurationInput:EmailConfigurationInput!)", "content": "{\n    userCommunities {\n      id\n      name\n      slug\n      communityId\n      description\n      logo\n      cover\n      type\n      category {\n        id\n        name\n      }\n      createdAt\n    }\n  }"}, {"type": "query", "name": "post($id: ID!)", "content": "{\n  saveCurrencyConfiguration(configurationInput:$configurationInput){\n    _id\n    currency\n    currencySymbol\n  }\n}"}, {"type": "query", "name": "Orders", "content": "{\n      updateWorksheetShare(\n        worksheetShareUri: $worksheetShareUri\n        canEdit: $canEdit\n      ) {\n        worksheetShareUri\n        canEdit\n      }\n    }"}, {"type": "query", "name": "Tips", "content": "{\n    cancelOrder(_id:$_id,reason:$reason){\n        _id\n      orderStatus\n    }\n}"}, {"type": "query", "name": "Rider($id:String)", "content": "{\n          onDeleteMember {\n            id\n            name\n            createdAt\n            updatedAt\n          }\n        }"}, {"type": "mutation", "name": "TransferToken(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n      createTodo(input: $input) {\n        id\n        description\n        name\n      }\n    }"}, {"type": "mutation", "name": "updateResourceQuota(\n    $namespace: String!\n    $name: String!\n    $json: JSON!\n  )", "content": "{\n  tag_Update(input: $input) {\n    id\n    name\n  }\n}"}, {"type": "query", "name": "", "content": "{\n        updatePost(\n          input: { id: \"P1\", type: \"Post\", content: \"Content #1 - Update\", expectedVersion: 1 }\n          condition: { rating: { eq: 5 } }\n        ) {\n          id\n        }\n      }"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n        obj: reInviteOrganizationEmployee(data: $data) ${ORGANIZATION_EMPLOYEE_FIELDS}\n    }"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n      updateDataPipelineEnvironment(input: $input) {\n        envPipelineUri\n        environmentUri\n        environmentLabel\n        pipelineUri\n        pipelineLabel\n        stage\n        region\n        AwsAccountId\n        samlGroupName\n      }\n    }"}, {"type": "subscription", "name": "SubscriptionOrder($id:String!)", "content": "{\n    job(id: $id) {\n      branchName\n      claimedAt\n      commitSha\n      completedAt\n      id\n      log\n      repoSlug\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n  cosmosStakingPool(network: $network) {\n    loose_tokens\n    bonded_tokens\n    not_bonded_tokens\n    inflation_last_time\n    inflation\n    date_last_commission_reset\n    prev_bonded_shares\n  }\n}"}, {"type": "query", "name": "serviceClasses($namespace: String!)", "content": "{\n  chatbot(chatbotId: $chatbotId) {\n   \tid,\n    name,\n    description,\n    guid,\n    chatbotId,\n    plugins {\n      id,\n      plugin,\n      version,\n      filename\n    }\n  }\n}"}, {"type": "query", "name": "getRedshiftClusterDatabaseCredentials($clusterUri: String!)", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "query", "name": "($key: String!)", "content": "{\n        result: registerMultiPaymentForOneReceipt(data: $data) { dv multiPaymentId webViewUrl feeCalculationUrl directPaymentUrl anonymousPaymentUrl }\n    }"}, {"type": "mutation", "name": "GenerateWebsiteCode($identity: String!, $website: String!)", "content": "{\n        objs: allOrganizationEmployees(\n            where: {\n                id: $id\n            }\n            first: 1\n        ) {\n            id\n            inviteCode\n        }\n    }"}, {"type": "query", "name": "getRedshiftClusterDatabaseCredentials($clusterUri: String!)", "content": "{\n      startProfilingJob(tableUri: $tableUri) {\n        jobUri\n      }\n    }"}, {"type": "mutation", "name": "updateKeyValueTags($input: UpdateKeyValueTagsInput!)", "content": "{\n  serverStatus {\n    balance\n  }\n}"}, {"type": "mutation", "name": "DeployIdentityContract($from: String!, $contract: String!)", "content": "{\n        result: createBankAccountRequest(data: $data) { status id }\n    }"}, {"type": "mutation", "name": "UpdateUser($name:String!,$phone:String!,$is_active:Boolean!)", "content": "{\n    graphCreate(name: $name) {\n      id\n      name\n      stats(to: $to, from: $from, traceFilters: $traceFilters) {\n        errorCount\n        errorPercent\n        count\n        duration\n      }\n    }\n  }"}, {"type": "query", "name": "GRAPH_SETTINGS($graphId: ID!)", "content": "{\n              updateBlogContent(blogId: \"${this.blogId}\", content: \"${this.content}\"){\n                title\n                content\n              }\n            }"}, {"type": "mutation", "name": "($thread: CmsThread, $id: ID!, $communityId: ID!)", "content": "{\n    applications {\n      data {\n        id\n        providerName\n        name\n        description\n        labels\n        status {\n          condition\n        }\n        packages {\n          totalCount\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "cosmosSlashingParameters($network: String!)", "content": "{MODEL}($id: ID!) {\n            obj: delete${MODEL}(id: $id) ${fields}\n        }"}, {"type": "mutation", "name": "addOrRemoveFromCart($launchId: ID!)", "content": "{\n      updateWorksheet(worksheetUri: $worksheetUri, input: $input) {\n        worksheetUri\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "ReviewOrder(\n  $orderId:String!,\n  $rating:Int!,\n  $description:String\n)", "content": "{\n    executeRuling(\n      offerID: $offerID\n      ruling: $ruling\n      commission: $commission\n      message: $message\n      refund: $refund\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "subscription", "name": "SubscriptionOrder($id:String!)", "content": "{\n  phoneNumberMergeToOrganization(organizationId: $organizationId, input: $input) {\n    ...PhoneNumber\n    label\n  }\n}\n    ${PhoneNumberFragmentDoc}"}, {"type": "query", "name": "userPublic($user: String!)", "content": "{\n          onDeleteStudent {\n            id\n            name\n            email\n            ssn\n            owner\n          }\n        }"}, {"type": "query", "name": "getWorkspaceMemberInvitesToManage($userId: uuid!)", "content": "{\n    updateMyRoutine(\n      morningCleanser: $morningCleanser\n      morningToner: $morningToner\n      morningSerum: $morningSerum\n      morningMoisturizer: $morningMoisturizer\n      morningSPF: $morningSPF\n      morningRX: $morningRX\n      morningEyeCream: $morningEyeCream\n      eveningOilCleanser: $eveningOilCleanser\n      eveningCleanser: $eveningCleanser\n      eveningExfoliator: $eveningExfoliator\n      eveningTreatmentMask: $eveningTreatmentMask\n      eveningToner: $eveningToner\n      eveningSerum: $eveningSerum\n      eveningMoisturizer: $eveningMoisturizer\n      eveningNightMask: $eveningNightMask\n      eveningOil: $eveningOil\n      eveningSpotTreatment: $eveningSpotTreatment\n      eveningRX: $eveningRX\n      eveningEyeCream: $eveningEyeCream\n    ) {\n      morningCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningToner {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningSerum {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningMoisturizer {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningSPF {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningRX {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      morningEyeCream {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningOilCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningCleanser {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningExfoliator {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningTreatmentMask {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningToner {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningSerum {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningMoisturizer {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningNightMask {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningOil {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningSpotTreatment {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningRX {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n      eveningEyeCream {\n        _id\n        name\n        frequency\n        useNotes\n        link\n      }\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "applicationsForScenario($filter: [LabelFilter!])", "content": "{\n      listSavedQueries(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          savedQueryUri\n          name\n          owner\n          description\n          label\n          created\n          tags\n        }\n      }\n    }"}, {"type": "mutation", "name": "VendorResetPassword($oldPassword: String!, $newPassword: String!)", "content": "{\n  insertApp(object: $app) {\n    id\n    name\n    slug\n    workspace {\n      id\n      name\n      slug\n    }\n  }\n}"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n    individuals(filters: { uuid: $uuid }) {\n      entities {\n        isLocked\n        profile {\n          name\n        }\n        identities {\n          name\n          source\n          email\n          uuid\n          username\n        }\n        enrollments {\n          start\n          end\n          group {\n            name\n            type\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n      updateEnvironmentStack(environmentUri: $environmentUri)\n    }"}, {"type": "mutation", "name": "EditAddress($addressInput:AddressInput!)", "content": "{\n    currentUser {\n      login\n    }\n    feed(type: $type, offset: $offset, limit: $limit) {\n      ...FeedEntry\n    }\n  }\n  ${FeedEntryFragmentDoc}"}, {"type": "query", "name": "OptionPollVotes ($optionPollId: Int!)", "content": "{\n    deployToken(\n      name: $name\n      symbol: $symbol\n      decimals: $decimals\n      supply: $supply\n      type: $type\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "secrets($namespace: String!)", "content": "{\n      getPostConnection(id: $postId) {\n        id\n        title\n      }\n    }"}, {"type": "subscription", "name": "ServiceInstanceEvent($namespace: String!)", "content": "{\n    subscribePlaceOrder(restaurant:$restaurant){\n        userId\n        origin\n        order{\n          _id\n          orderId\n          restaurant{\n            _id\n            name\n            image\n            address\n            location{coordinates}\n          }\n          deliveryAddress{\n            location{coordinates}\n            deliveryAddress\n            details\n            label\n          }\n          items{\n            _id\n            title\n            description\n            image\n            quantity\n            variation{\n              _id\n              title\n              price\n              discounted\n            }\n            addons{\n              _id\n              options{\n                _id\n                title\n                description\n                price\n              }\n              description\n              title\n              quantityMinimum\n              quantityMaximum\n            }\n            specialInstructions\n            isActive\n            createdAt\n            updatedAt\n          }\n          user{\n            _id\n            name\n            phone\n            email\n          }\n          paymentMethod\n          paidAmount\n          orderAmount\n          orderStatus\n          tipping\n          taxationAmount\n          status\n          paymentStatus\n          reason\n          isActive\n          createdAt\n          orderDate\n          deliveryCharges\n          isPickedUp\n          preparationTime\n          acceptedAt\n          isRinged\n          rider{\n            _id\n            name\n            username\n            available\n          }\n      }\n}\n}"}, {"type": "query", "name": "", "content": "{\n    updateFunction(name: $name, namespace: $namespace, params: $params) {\n      name\n      namespace\n      labels\n      size\n      runtime\n      content\n      dependencies\n    }\n  }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n  contact(id: $id) {\n    ...ContactPersonalDetails\n    organizations(pagination: {limit: 99999, page: 1}) {\n      content {\n        id\n        name\n      }\n    }\n  }\n}\n    ${ContactPersonalDetailsFragmentDoc}"}, {"type": "mutation", "name": "SendOtpToEmail($email: String!, $otp: String!)", "content": "{\n        result: signinResidentUser(data: $data) { user { id name }, token }\n    }"}, {"type": "mutation", "name": "($id: Int!, $chatbot: InputChatbot!)", "content": "{\n    checkTelegramStatus(identity: $identity, maxTries: $maxTries) {\n      success\n      reason\n      data {\n        attestation\n        verified\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateTodo($input: UpdateTodoInput!)", "content": "{\n        objs: allPropertyScopes(where: $where, orderBy: $orderBy) {\n            id\n            name\n            hasAllProperties\n        }\n    }"}, {"type": "mutation", "name": "DeleteDatasetStorageLocation($locationUri: String)", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "query", "name": "SearchPosts", "content": "{\n    user: currentUser {\n      ...userInfo\n      ...userDirectMessageThreadConnection\n    }\n  }\n  ${userInfoFragment}\n  ${userDirectMessageThreadsConnectionFragment}"}, {"type": "query", "name": "getVote($targetUri: String!, $targetType: String!)", "content": "{\n    getMediaMessagesForThread(threadId: $threadId) {\n      id\n      content {\n        body\n      }\n    }\n  }"}, {"type": "query", "name": "AllDemocracyProposalPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5)", "content": "{\n    pagedTags(filter: $filter) {\n      entries {\n        id\n        title\n        color\n        thread\n        community {\n          id\n          title\n          logo\n        }\n      }\n      pageNumber\n      pageSize\n      totalCount\n      totalPages\n    }\n  }"}, {"type": "mutation", "name": "createFunction(\n    $name: String!\n    $namespace: String!\n    $params: FunctionMutationInput!\n  )", "content": "{\n  orders(offset:$offset){\n    _id\n    delivery_address{\n      latitude\n      longitude\n      delivery_address\n      details\n      label\n    }\n    delivery_charges\n    order_id\n    user{\n      _id\n      phone\n    }\n    \n    items{\n      _id\n      food{\n        _id\n        title\n        category{\n          _id\n        }\n        description\n        img_url\n      }\n      variation{\n        _id\n        title\n        price\n      }\n      addons{\n        _id\n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options{\n          _id\n          title\n          description\n          price\n        }\n      }\n      quantity\n    }\n    payment_status\n    payment_method\n    order_amount\n    paid_amount\n    order_status\n    status_queue{\n      pending\n      preparing\n      picked\n      delivered\n      cancelled\n    }\n    createdAt\n    review{\n      _id\n      rating\n      description\n    }\n    rider{\n      _id\n    }\n  }\n}"}, {"type": "query", "name": "serviceClassFilters", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "mutation", "name": "($thread: CmsThread, $id: ID!, $communityId: ID!)", "content": "{\n    replyComment(thread: $thread, id: $id, body: $body) {\n      id\n      body\n    }\n  }"}, {"type": "subscription", "name": "SubscriptionOrder($id:String!)", "content": "{\n  profile(username: $username) {\n    id\n    username\n    kusama_default_address\n    polkadot_default_address\n  }\n}"}, {"type": "subscription", "name": "apiRuleEvent($namespace: String!, $serviceName: String)", "content": "{\n    sendNotification(\n      title: $title\n      content: $content\n      color: $color\n      icon: $icon\n      instanceName: $instanceName\n    ) @client {\n      title\n    }\n  }"}, {"type": "mutation", "name": "Refetch", "content": "{\n        onCreateTodo {\n          id\n          description\n          name\n        }\n      }"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n  organization_RemoveRelationship(\n    organizationId: $organizationId\n    relationship: $relationship\n  ) {\n    id\n  }\n}"}, {"type": "mutation", "name": "ToggleMetaMask($enabled: Boolean)", "content": "{\n  contact(id: $id) {\n    ...ContactPersonalDetails\n    organizations(pagination: {limit: 99999, page: 1}) {\n      content {\n        id\n        name\n      }\n    }\n  }\n}\n    ${ContactPersonalDetailsFragmentDoc}"}, {"type": "mutation", "name": "createOptionPoll($postId: Int!, $question: String!, $options: String! $endAt: Int!)", "content": "{\n    hero {\n      name\n      appearsIn\n    }\n  }"}, {"type": "query", "name": "getOrganizationTableData($pagination: Pagination, $where: Filter, $sort: [SortBy!])", "content": "{\n  searchCompanyUsers(text: $text, companyId: $companyId) {\n    users {\n      id\n      email\n      fullName\n      profileUrl\n    }\n    teams {\n      id\n      name\n    }\n  }\n}"}, {"type": "mutation", "name": "AuthenticateUserMutation($email: String!, $password: String!)", "content": "{\n    deployToken(\n      name: $name\n      symbol: $symbol\n      decimals: $decimals\n      supply: $supply\n      type: $type\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "subscription", "name": "bountySubscription($startBlock: Int!)", "content": "{\n    Post(where: { id: { _eq: $id } }) {\n      Likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      Likes(where: { user_id: { _eq: $userId } }) {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "CanConverseWith($account: String!)", "content": "{\n  __typename\n  insert_onchain_links(objects: {onchain_bounty_id: $onchainBountyId, proposer_address: $proposerAddress, post: {data: {author_id: $authorId, content: $content, topic_id: $topicId, type_id: $typeId}}}) {\n    returning {\n      id\n    }\n  }\n}"}, {"type": "query", "name": "($id: ID!)", "content": "{\n  update_poll(where: {id: {_eq: $id}}, _set: {block_end: $blockEnd}) {\n    affected_rows\n  }\n}"}, {"type": "mutation", "name": "updateApplication($id: ID!, $in: ApplicationUpdateInput!)", "content": "{\n  update_onchain_links(where: {onchain_treasury_proposal_id: {_eq: $treasuryProposalId}}, _set: {onchain_motion_id: $motionId}) {\n    affected_rows\n  }\n}"}, {"type": "mutation", "name": "insertApplication($app: apps_insert_input!)", "content": "{\n  bounties(where: {bountyStatus_some: {AND: [{status: \"BountyProposed\"}, {blockNumber: {number_gte: $startBlock}}]}}) {\n    ...onchainBounty\n  }\n}\n    ${OnchainBountyFragmentDoc}"}, {"type": "mutation", "name": "updateSession($sessionId: ID!, $session: SessionUpdateInput!)", "content": "{\n    createRider(\n        riderInput:$riderInput\n    ){\n    _id\n    name\n    username\n    password\n    phone\n    available\n      zone{\n        _id\n      }\n    }\n  }"}, {"type": "query", "name": "HeroDetails($episode: Episode)", "content": "{\n    notification @client {\n      title\n      content\n      color\n      icon\n      visible\n    }\n  }"}, {"type": "query", "name": "ListGlossaries($filter: GlossaryFilter)", "content": "{\n    thread(id: $id) {\n      ...threadInfo\n      ...threadMessageConnection\n    }\n  }\n  ${threadInfoFragment}\n  ${threadMessageConnectionFragment}"}, {"type": "query", "name": "TrackerReferendaPosts($postType: Int!, $onchainReferendumIds: [Int!]!)", "content": "{\n      updateTaskGroup(input: $input) {\n        id\n        title\n        description\n        priority\n        severity\n        groups\n        singleGroup\n      }\n    }"}, {"type": "mutation", "name": "SelectAddress($id:String!)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "mutation", "name": "editCoupon($couponInput:CouponInput!)", "content": "{\n        deleteCoupon(id:$id)\n      }"}, {"type": "query", "name": "ListOrganizationTopics(\n      $organizationUri: String\n      $filter: OrganizationTopicFilter\n    )", "content": "{\n    me {\n      _id\n      name\n      email\n    }\n    chat(_id: $id) {\n      _id\n      users {\n        _id\n        name\n        email\n      }\n      messages {\n        _id\n        user {\n          _id\n          name\n          email\n        }\n        message\n        createdAt\n      }\n    }\n  }"}, {"type": "mutation", "name": "UniswapInitFactory($from: String!)", "content": "{\n        obj: shareTicket(data: $data) { status }\n    }"}, {"type": "mutation", "name": "LOGOUT", "content": "{\n    login(wallet: $wallet) {\n      success\n      reason\n    }\n  }"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n  posts(\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_proposal_id: {_in: $onchainProposalIds}}}\n    order_by: {onchain_link: {onchain_proposal_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_proposal_id\n      onchain_proposal(where: {}) {\n        id\n        proposalStatus(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "community($title: String!)", "content": "{\n      listDeltaLakeCrawlerRuns(datasetUri: $datasetUri) {\n        datasetUri\n        GlueJobName\n        GlueJobRunId\n        AwsAccountId\n        GlueTriggerName\n        created\n        status\n        owner\n      }\n    }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n        getPostPublic(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "GetStorageSettings($appId: uuid!)", "content": "{\n    applicationTemplates {\n      data {\n        id\n        name\n        applicationInput\n        placeholders {\n          name\n          description\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateRefundMutation(\n    $offerID: String!\n    $amount: String!\n    $from: String\n  )", "content": "{\n  configurations(namespace: $namespace, chatbotId: $chatbotId) {\n    id\n    namespace\n    payload\n  }\n}"}, {"type": "query", "name": "getProductPageData($productHandle: String!)", "content": "{\n        posts(where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_bounty_id: {\n                    _in: $onchainBountyIds\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_bounty_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_bounty_id\n                onchain_bounty(where: {}) {\n                    id\n                    bountyStatus(last: 1) {\n                        id\n                        status\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "query", "name": "usageKinds", "content": "{\n    secrets(namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n    deployToken(\n      name: $name\n      symbol: $symbol\n      decimals: $decimals\n      supply: $supply\n      type: $type\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "LatestBountyPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n    marketplace {\n      offer(id: $offerId) {\n        listing {\n          ...basicListingFields\n        }\n        ...basicOfferFields\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "mutation", "name": "deleteApplication($appId: uuid!)", "content": "{\n    me {\n      id\n      email\n      trips {\n        ...LaunchTile\n      }\n    }\n  }\n  ${LAUNCH_TILE_DATA}"}, {"type": "mutation", "name": "updateOrganizationById($id: ID!, $data: OrganizationUpdateInput!)", "content": "{\n  ridersByZone(id:$id){\n    _id\n    name\n    username\n    password\n    phone\n    available\n    zone{\n      _id\n      title\n    }\n  }\n}"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n    deleteAPIRule(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n        onCreateTodo(\n          owner: \"${USERNAME2}\",\n          filter: { name: { eq: \"todo1\" } },\n        ) {\n          id\n          name\n          description\n          level\n          owner\n          sharedOwners\n          status\n        }\n      }"}, {"type": "query", "name": "serviceClassFilters", "content": "{\n  orders(offset:$offset){\n    _id\n    delivery_address{\n      latitude\n      longitude\n      delivery_address\n      details\n      label\n    }\n    delivery_charges\n    order_id\n    user{\n      _id\n      phone\n    }\n    \n    items{\n      _id\n      food{\n        _id\n        title\n        category{\n          _id\n        }\n        description\n        img_url\n      }\n      variation{\n        _id\n        title\n        price\n      }\n      addons{\n        _id\n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options{\n          _id\n          title\n          description\n          price\n        }\n      }\n      quantity\n    }\n    payment_status\n    payment_method\n    order_amount\n    paid_amount\n    order_status\n    status_queue{\n      pending\n      preparing\n      picked\n      delivered\n      cancelled\n    }\n    createdAt\n    review{\n      _id\n      rating\n      description\n    }\n    rider{\n      _id\n    }\n  }\n}"}, {"type": "mutation", "name": "UpdateSecret($appId: uuid!, $secret: ConfigEnvironmentVariableInsertInput!)", "content": "{MODELS}($where: ${whereName}, $first: Int = ${DEFAULT_PAGE_SIZE}, $skip: Int, $sortBy: [${sortName}!]) {\n             objs: ${queryName}(where: $where, first: $first, skip: $skip, sortBy: $sortBy) ${fields}\n         }"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n  dashboardView_Contacts(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      ...ContactPersonalDetails\n      ...ContactCommunicationChannelsDetails\n      locations {\n        ...LocationBaseDetails\n        rawAddress\n      }\n    }\n    totalElements\n  }\n}\n    ${ContactPersonalDetailsFragmentDoc}\n${ContactCommunicationChannelsDetailsFragmentDoc}\n${LocationBaseDetailsFragmentDoc}"}, {"type": "mutation", "name": "cartLinesAdd($lines: [CartLineInput!]!, $cartId: ID!)", "content": "{\n            account(\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                account {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "mutation", "name": "DeployIdentity(\n    $from: String!\n    $profile: ProfileInput\n    $attestations: [String]\n  )", "content": "{\n  posts(where: {onchain_link: {onchain_treasury_proposal_id: {_eq: $id}}}) {\n    ...treasuryProposalPost\n  }\n}\n    ${TreasuryProposalPostFragmentDoc}"}, {"type": "query", "name": "trace($traceId: ID!)", "content": "{\n  orders(offset:$offset){\n    _id\n    delivery_address{\n      latitude\n      longitude\n      delivery_address\n      details\n      label\n    }\n    delivery_charges\n    order_id\n    user{\n      _id\n      phone\n    }\n    \n    items{\n      _id\n      food{\n        _id\n        title\n        category{\n          _id\n        }\n        description\n        img_url\n      }\n      variation{\n        _id\n        title\n        price\n      }\n      addons{\n        _id\n        title\n        description\n        quantity_minimum\n        quantity_maximum\n        options{\n          _id\n          title\n          description\n          price\n        }\n      }\n      quantity\n    }\n    payment_status\n    payment_method\n    order_amount\n    paid_amount\n    order_status\n    status_queue{\n      pending\n      preparing\n      picked\n      delivered\n      cancelled\n    }\n    createdAt\n    review{\n      _id\n      rating\n      description\n    }\n    rider{\n      _id\n    }\n  }\n}"}, {"type": "mutation", "name": "updateDatasetTableColumn(\n      $columnUri: String!\n      $input: DatasetTableColumnInput\n    )", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_referendum_id: {\n                    _is_null: false\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_referendum_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_referendum_id\n                onchain_referendum(where: {NOT: {referendumStatus_some: {OR: [{status: \"Passed\"}, {status: \"Executed\"}, {status: \"NotPassed\"}, {status: \"Cancelled\"}, {status: \"Vetoed\"}]}}}) {\n                    id\n                    end\n                    referendumStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "mutation", "name": "updateOrganizationDescription($input: OrganizationUpdateInput!)", "content": "{\n        feed(limit: $limit) {\n          id\n          commentCount\n          repository {\n            full_name\n            html_url\n            owner {\n              avatar_url\n            }\n          }\n        }\n      }"}, {"type": "query", "name": "GetServerSettings", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "query", "name": "getApplicationState($appId: uuid!)", "content": "{\n    uniswapDeployExchangeTemplate(from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AddTablePermission(\n      $tableUri: String!\n      $userName: String!\n      $role: DatasetRole!\n    )", "content": "{\n        getPostOwnerIAM(id: $id) {\n          id\n          title\n          owner\n        }\n      }"}, {"type": "query", "name": "account", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n      ...communitySettings\n    }\n  }\n  ${communityInfoFragment}\n  ${communitySettingsFragment}\n  ${communityMetaDataFragment}"}, {"type": "mutation", "name": "refreshTokens($token: String!)", "content": "{\n    enrollmentStatus(walletAddress: $walletAddress)\n  }"}, {"type": "mutation", "name": "CREATE_GRAPH(\n    $name: String!\n    $traceFilters: [TraceFilter]\n    $to: DateTime\n    $from: DateTime\n  )", "content": "{\n      countDeletedNotifications\n    }"}, {"type": "subscription", "name": "OnUpdateStudent", "content": "{\n        updateUser(updateUserInput:{name:$name,phone:$phone,is_active:$is_active}){\n          _id\n          name\n          phone\n          is_active\n        }\n      }"}, {"type": "query", "name": "clusterRoleBindings", "content": "{\n  deleteContent(id: $id) {\n    id\n  }\n}"}, {"type": "query", "name": "FetchCommissions", "content": "{\n  logsVolume: getLogsVolume(appID: $appId, from: $from, to: $to) {\n    value\n  }\n  cpuSecondsUsage: getCPUSecondsUsage(appID: $appId, from: $from, to: $to) {\n    value\n  }\n  functionInvocations: getFunctionsInvocations(\n    appID: $appId\n    from: $from\n    to: $to\n  ) {\n    value\n  }\n  postgresVolumeCapacity: getPostgresVolumeCapacity(appID: $appId) {\n    value\n  }\n  postgresVolumeUsage: getPostgresVolumeUsage(appID: $appId) {\n    value\n  }\n  totalRequests: getTotalRequests(appID: $appId, from: $from, to: $to) {\n    value\n  }\n  egressVolume: getEgressVolume(\n    appID: $appId\n    subdomain: $subdomain\n    from: $from\n    to: $to\n  ) {\n    value\n  }\n}"}, {"type": "mutation", "name": "($id: Int!)", "content": "{\n  counters {\n    users {\n     count(username: $username, userId: $userId)\n    }\n  }\n  users(limit: $limit, offset: $offset, order: $order, username: $username, userId: $userId) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email,\n    chatIds {\n      id,\n      transport,\n      chatId\n    }\n  }\n}"}, {"type": "mutation", "name": "toggleCommunityRedirect($communityId: ID!)", "content": "{\n            updateBlogArchived(blogId: \"${this.currentBlog.id}\", archived : false)\n            {\n              id\n            }\n          }"}, {"type": "query", "name": "GetContactLocations($id: ID!)", "content": "{\n  posts(\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_tech_committee_proposal_id: {_in: $onchainTechCommitteeProposalIds}}}\n    order_by: {onchain_link: {onchain_tech_committee_proposal_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_tech_committee_proposal_id\n      onchain_tech_committee_proposal(where: {}) {\n        id\n        status(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "getCommentVote($comment: String!)", "content": "{\n          refreshTokens(token: $token) {\n            token\n            refreshToken\n            expiresAt\n          }\n        }"}, {"type": "query", "name": "SearchPosts", "content": "{\n  profile(username: $username) {\n    id\n    username\n    kusama_default_address\n    polkadot_default_address\n  }\n}"}, {"type": "query", "name": "networkSummaries($fiat: String!)", "content": "{\n        createNote2(input: $input) {\n            noteId\n            noteType\n            owner\n        }\n      }"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n\t\tmeme_categories_aggregate(limit: 10, offset: 0) {\n\t\t\tnodes {\n\t\t\t\tid\n\t\t\t\tcategory_title\n\t\t\t\tno_of_memes\n\t\t\t\tthumb_nail\n\t\t\t}\n\t\t}\n\n\t\tcount: memes_aggregate(offset: 0) {\n\t\t\taggregate {\n\t\t\t\tcount\n\t\t\t}\n\t\t}\n\t}"}, {"type": "query", "name": "listEnvironmentClusters(\n      $environmentUri: String!\n      $filter: RedshiftClusterFilter\n    )", "content": "{\n    merge(fromUuids: $fromUuids, toUuid: $toUuid) {\n      uuid\n      individual {\n        ...individual\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "mutation", "name": "SwapToToken($from: String!, $token: String!, $tokenValue: String!)", "content": "{\n          isLoggedIn @client\n        }"}, {"type": "query", "name": "ListDataPipelines($filter: DataPipelineFilter)", "content": "{\n    messageReceived(yourUser: $id) {\n      username\n      notificationMessage\n      chat {\n        _id\n        users {\n          _id\n          name\n          email\n        }\n        messages {\n          _id\n          user {\n            _id\n            name\n            email\n          }\n          message\n          createdAt\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "totalUsersByDate($where: users_bool_exp!)", "content": "{\n      deleteDatasetStorageLocation(locationUri: $locationUri)\n    }"}, {"type": "mutation", "name": "deleteRoleBinding($name: String!, $namespace: String!)", "content": "{\n    withdraw(\n      uuid: $uuid\n      group: $group\n      fromDate: $fromDate\n      toDate: $toDate\n      parentOrg: $parentOrg\n    ) {\n      uuid\n      individual {\n        ...individual\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "query", "name": "listKeyValueTags($targetUri: String!, $targetType: String!)", "content": "{\n      getUser(userID: $userID) {\n        creditCards {\n          items {\n            number\n            name\n            issuer\n            userID\n            expYear\n            expMonth\n          }\n        }\n        firstname\n        lastname\n        birth\n        displayName\n        userID\n      }\n    }"}, {"type": "query", "name": "selectPropertyScope ($where: PropertyScopeWhereInput, $orderBy: String)", "content": "{\n    addPersonalEvent(\n      title: $title\n      notes: $notes\n      staff: $staff\n      date: $date\n      startTime: $startTime\n      endTime: $endTime\n      duration: $duration\n      allDay: $allDay\n      blockTime: $blockTime\n    ) {\n      title\n      notes\n      staff\n      date\n      startTime\n      endTime\n      duration\n      allDay\n      blockTime\n    }\n  }"}, {"type": "mutation", "name": "($id: Int!, $device: NewDevice!)", "content": "{\n    po(id: $id) {\n      ...PO_ATTRIBUTES\n    }\n  }\n  ${PO_ATTRIBUTES}"}, {"type": "query", "name": "publicTaskMessages($taskId: ID!)", "content": "{\n    manageMergeRecommendation(\n      recommendationId: $recommendationId\n      apply: $apply\n    ) {\n      applied\n    }\n  }"}, {"type": "mutation", "name": "SaveEmailConfiguration($configurationInput:EmailConfigurationInput!)", "content": "{\n      deleteMember(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n      }\n    }"}, {"type": "query", "name": "FetchCommissions", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityMetaData\n    }\n  }\n  ${communityInfoFragment}\n  ${communityMetaDataFragment}"}, {"type": "query", "name": "($id: ID!, $filter: PagedFilter!)", "content": "{\n      getPlatformReaderSession(dashboardId: $dashboardId)\n    }"}, {"type": "mutation", "name": "addLocationToContact($contactId: ID!)", "content": "{\n    createCommentVote (input: { comment: $commentId, value: POSITIVE_1 }) {\n      commentVote {\n        id\n        value\n      }\n    }\n  }"}, {"type": "mutation", "name": "WithdrawDust($from: String, $currency: String!, $amount: String!)", "content": "{\n      updateEnvironment(environmentUri: $environmentUri, input: $input) {\n        environmentUri\n        label\n        userRoleInEnvironment\n        SamlGroupName\n        AwsAccountId\n        dashboardsEnabled\n        notebooksEnabled\n        mlStudiosEnabled\n        pipelinesEnabled\n        warehousesEnabled\n        created\n      }\n    }"}, {"type": "mutation", "name": "", "content": "{\n    hero(episode: $episode) {\n      name\n      friends {\n        name\n      }\n    }\n  }"}, {"type": "query", "name": "Restaurant($id:String)", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n  getActiveOrders(restaurantId:$restaurantId){\n    _id\n    zone{\n      _id\n    }\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      address\n      location{coordinates}\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n      details\n      label\n    }\n    items{\n      _id\n      title\n      description\n      image\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        description\n        title\n        quantityMinimum\n        quantityMaximum\n      }\n      specialInstructions\n      isActive\n      createdAt\n      updatedAt\n    }\n    user{\n      _id\n      name\n      phone\n      email\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    isPickedUp\n    status\n    paymentStatus\n    reason\n    isActive\n    createdAt\n    deliveryCharges\n    rider{\n      _id\n      name\n      username\n      available\n    }\n  }\n}"}, {"type": "mutation", "name": "update$", "content": "{\n    deleteGitRepository(namespace: $namespace, name: $name) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "SubmitDeathCertificateOrder(\n    $contactName: String!\n    $contactEmail: String!\n    $confirmContactEmail: String!\n    $contactPhone: String!\n    $shippingName: String!\n    $shippingCompanyName: String!\n    $shippingAddress1: String!\n    $shippingAddress2: String!\n    $shippingCity: String!\n    $shippingState: String!\n    $shippingZip: String!\n    $cardToken: String!\n    $cardLast4: String!\n    $cardholderName: String!\n    $billingAddress1: String!\n    $billingAddress2: String!\n    $billingCity: String!\n    $billingState: String!\n    $billingZip: String!\n    $items: [DeathCertificateOrderItemInput!]!\n    $idempotencyKey: String!\n  )", "content": "{\n    function(name: $name, namespace: $namespace) {\n      name\n      namespace\n      UID\n      labels\n      source\n      dependencies\n      runtime\n      sourceType\n      baseDir\n      reference\n      replicas {\n        min\n        max\n      }\n      resources {\n        requests {\n          memory\n          cpu\n        }\n        limits {\n          memory\n          cpu\n        }\n      }\n      buildResources {\n        requests {\n          memory\n          cpu\n        }\n        limits {\n          memory\n          cpu\n        }\n      }\n      env {\n        name\n        value\n        valueFrom {\n          type\n          name\n          key\n          optional\n        }\n      }\n      status {\n        phase\n        reason\n        message\n      }\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    tokenVerify(token: $token) {\n      id\n      email\n      createdAt\n    }\n  }"}, {"type": "query", "name": "GetContactPersonalDetails($id: ID!)", "content": "{\n    deleteAPIDefinition(id: $id) {\n      name\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n  riderOrders{\n        _id\n      orderId\n      createdAt\n      acceptedAt\n      pickedAt\n      assignedAt\n      isPickedUp\n      deliveredAt\n      expectedTime\n      deliveryCharges\n      restaurant{\n        _id\n        name\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        label\n        details\n      }\n      items{\n        _id\n        title\n        food\n        description\n        quantity\n        variation{\n          _id\n          title\n          price\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            price\n          }\n          title\n          description\n          quantityMinimum\n          quantityMaximum\n        }\n        isActive\n        createdAt\n      }\n      user{\n        _id\n        name\n        phone\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      paymentStatus\n      orderStatus\n      tipping\n      taxationAmount\n      reason\n      isRiderRinged\n      preparationTime\n      rider{\n        _id\n        name\n        username\n      }\n    }\n    }"}, {"type": "query", "name": "cosmosDistributionCommunityPool($network: String!)", "content": "{\n        resetPassword(newPassword: $newPassword, userId: $userId, token: $token){\n            message\n        }\n    }"}, {"type": "query", "name": "AllReferendaPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n  organizations(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      id\n      name\n    }\n  }\n}"}, {"type": "query", "name": "($chatId: String, $transport: String)", "content": "{\n    deleteEventDefinition(id: $id) {\n      name\n    }\n  }"}, {"type": "query", "name": "getMediaMessagesForThread($threadId: ID!)", "content": "{\n    acceptOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "GRAPH_SHOW(\n    $graphId: ID!\n    $traceFilters: [TraceFilter]\n    $from: DateTime\n    $to: DateTime\n  )", "content": "{\n          contact(id: $id) {\n            id\n            firstName\n            lastName\n            name\n            emails {\n              email\n            }\n            phoneNumbers {\n              rawPhoneNumber\n              e164\n            }\n            jobRoles {\n              organization {\n                name\n              }\n            }\n          }\n        }"}, {"type": "mutation", "name": "ResetDatabasePassword($appId: String!, $newPassword: String!)", "content": "{\n  workspaceMemberInvites(where: {userByEmail: {id: {_eq: $userId}}}) {\n    id\n    email\n    userByEmail {\n      id\n    }\n    workspace {\n      id\n      name\n      slug\n    }\n  }\n}"}, {"type": "query", "name": "PollVotes($pollId: Int!)", "content": "{\n      searchEnvironmentDataItems(\n        environmentUri: $environmentUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          shareUri\n          environmentName\n          environmentUri\n          organizationName\n          organizationUri\n          datasetUri\n          datasetName\n          itemType\n          itemAccess\n          GlueDatabaseName\n          GlueTableName\n          S3AccessPointName\n          created\n          principalId\n        }\n      }\n    }"}, {"type": "subscription", "name": "OnDeleteTodo", "content": "{\n    functions(namespace: $namespace) {\n      name\n      namespace\n      labels\n      runtime\n      sourceType\n      status {\n        phase\n        reason\n        message\n      }\n    }\n    gitRepositories(namespace: $namespace) {\n      name\n      namespace\n      spec {\n        url\n        auth {\n          type\n          secretName\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateQuery($id: ID!, $completed: Boolean!)", "content": "{\n  counters {\n    rows: users {\n     count(username: $username, userId: $userId, chatbotId: $chatbotId)\n    }\n  }\n  rows: users(limit: $limit, offset: $offset, order: $order, username: $username, userId: $userId, chatbotId: $chatbotId) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email,\n    chatIds {\n      id,\n      transport,\n      chatId\n    }\n  }\n}"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n    availableRiders{\n      _id\n      name\n      username\n      phone\n      available\n      zone{\n        _id\n      }\n    }\n  }"}, {"type": "mutation", "name": "ImportWallets($accounts: [WalletInput]!)", "content": "{\n    sendFromNode(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "query", "name": "Restaurants", "content": "{\n      createPostSecretFieldIAM(input: { title: \"Hello, World!\" }) {\n        id\n        title\n      }\n    }"}, {"type": "mutation", "name": "addEmailToOrganization($organizationId: ID!, $input: EmailInput!)", "content": "{\n  categories(namespace: $namespace) {\n    id,\n    name\n  }\n}"}, {"type": "query", "name": "getCommunityThreadConnection(\n    $id: ID\n    $after: String\n    $sort: CommunityThreadConnectionSort\n  )", "content": "{\n  resetPassword(newPassword: $newPassword, userId: $userId, token: $token) {\n    message\n  }\n}"}, {"type": "query", "name": "Post ($slug: String!)", "content": "{\n  allTasks{\n    id\n    status\n    title\n  }\n}"}, {"type": "query", "name": "getPaginatedMemeSearch($searchTerm: String!)", "content": "{\n      createFood(\n          foodInput:$foodInput\n      ){\n        _id\n        title\n        img_url\n        description\n        stock\n        variations{\n          _id\n          title\n          price\n          discounted\n          addons{\n            _id\n            title\n            description\n            quantity_minimum\n            quantity_maximum\n            options{\n              _id\n              title\n              price\n            }\n          }\n        }\n        category{\n          _id\n          title\n      }\n      }\n    }"}, {"type": "mutation", "name": "AddTaskOwners(\n    $taskID: ID!\n    $userOwners: [String!]\n    $userReviewers: [String!]\n    $teamOwners: [ID!]\n    $teamReviewers: [ID!]\n  )", "content": "{\n        posts(where: {onchain_link: {onchain_tip_id: {_eq: $hash}}}) {\n            ...tipPost\n        }\n    }\n    ${tipPost}"}, {"type": "mutation", "name": "requestOneTimeTokenForApplication($id: ID!)", "content": "{\n  contact(id: $id) {\n    id\n    tags {\n      ...Tag\n    }\n  }\n}\n    ${TagFragmentDoc}"}, {"type": "query", "name": "Listing($listingId: ID!)", "content": "{\n        obj: registerNewOrganization(data: $data) ${ORGANIZATION_FIELDS}\n    }"}, {"type": "query", "name": "eventDefinition(\n    $applicationId: ID!\n    $apiPackageId: ID!\n    $eventDefinitionId: ID!\n  )", "content": "{\n    verifyMfaDevice(sessionId: $sessionId, pairingCode: $pairingCode) {\n      success\n      error\n    }\n  }"}, {"type": "mutation", "name": "UniswapInitFactory($from: String!)", "content": "{\n        createPost(input: { id: \"P1\", type: \"Post\", category: \"T1\", content: \"Content #1\", slug: \"content-1\", rating: 4 }) {\n          id\n        }\n      }"}, {"type": "mutation", "name": "CreateSection($section:SectionInput!)", "content": "{\n  organization_SetRelationshipStage(\n    organizationId: $organizationId\n    relationship: $relationship\n    stage: $stage\n  ) {\n    id\n  }\n}"}, {"type": "query", "name": "getCommunitySettingsById($id: ID)", "content": "{\n    web3 {\n      networkId\n      networkName\n    }\n  }"}, {"type": "mutation", "name": "vote($repoFullName: String!, $type: VoteType!)", "content": "{\n  referendums(where: {referendumStatus_some: {AND: [{status: \"Started\"}, {blockNumber: {number_gte: $startBlock}}]}}) {\n    ...onchainReferendum\n  }\n}\n    ${OnchainReferendumFragmentDoc}"}, {"type": "query", "name": "getAll$", "content": "{\n        actions {\n            _id\n            action,\n            name,\n            equation\n        }\n    }"}, {"type": "mutation", "name": "authenticateUserWithPhoneAndPassword ($phone: String!, $password: String!)", "content": "{\n        createTipping(tippingInput:$tippingInput){\n          _id\n          tipVariations\n          enabled\n        }\n      }"}, {"type": "query", "name": "getCurrentUser", "content": "{\n        motion (\n            where: {\n\t\t\t\tnode: {\n\t\t\t\t\tmotionStatus_some: {\n\t\t\t\t\t\tAND: [\n\t\t\t\t\t\t\t{ status: \"Proposed\" },\n\t\t\t\t\t\t\t{ blockNumber: { number_gte: $startBlock } }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        ){\n            mutation\n            node {\n                author\n                id\n                motionProposalId\n                motionStatus(orderBy: id_DESC) {\n                    blockNumber {\n                        number\n                    }\n                    status\n                }\n                preimage {\n                    hash\n                }\n                section\n                motionProposalArguments{\n                    name\n                    value\n                }\n            }\n        }\n    }"}, {"type": "mutation", "name": "deleteSagemakerNotebook(\n      $notebookUri: String!\n      $deleteFromAWS: Boolean\n    )", "content": "{\n    assignedOrders(id:$id){\n      _id\n      rider{\n        _id\n      }\n      order_id\n      delivery_address{\n        latitude\n        longitude\n        delivery_address\n        details\n        label\n      }\n      delivery_charges\n      payment_method\n      order_amount\n      paid_amount\n      order_status\n      payment_status\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      items{\n        _id\n        food{\n          _id\n          title\n        }\n        quantity\n        variation{\n          _id\n          title\n          price\n        }\n        addons{\n          title\n          options{\n            title\n            price\n          }\n        }\n      }\n      createdAt\n    }\n  }"}, {"type": "query", "name": "Coupons", "content": "{\n  createSection(section:$section){\n      _id\n      name\n      enabled\n      restaurants{\n        _id\n        name\n      }\n    }\n}"}, {"type": "mutation", "name": "CreateReviewForEpisode($episode: Episode!, $review: ReviewInput!)", "content": "{\n  user: mergeUser(fromId: $fromId, toId: $toId, chatbotId: $chatbotId) {\n    id,\n    username,\n    userId,\n    first_name,\n    last_name,\n    username,\n    language,\n    payload,\n    createdAt,\n    email,\n    chatIds {\n      id,\n      transport,\n      chatId\n    }\n  }\n}"}, {"type": "query", "name": "Rider($id:String)", "content": "{\n      createPostConnection(input: { title: \"Hello, World!\" }) {\n        id\n        title\n      }\n    }"}, {"type": "query", "name": "getOrganizationsOptions($pagination: Pagination)", "content": "{\n  assignOrder(id:$id){\n    _id\n    orderStatus\n    rider{\n      _id\n      name\n      username\n    }\n  }\n}"}, {"type": "mutation", "name": "DeployToken(\n    $name: String\n    $symbol: String\n    $decimals: String\n    $supply: String\n    $type: String\n    $from: String\n  )", "content": "{\n        feed {\n          id\n          commentCount\n          repository {\n            full_name\n            html_url\n            owner {\n              avatar_url\n            }\n          }\n        }\n      }"}, {"type": "query", "name": "($id: String!)", "content": "{\n    post(id: $id) {\n      id\n      title\n      body\n      views\n      linkAddr\n      insertedAt\n      updatedAt\n      favoritedCount\n      starredCount\n      viewerHasFavorited @include(if: $userHasLogin)\n      viewerHasStarred @include(if: $userHasLogin)\n    }\n  }"}, {"type": "query", "name": "AllDemocracyTreasuryProposalPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5 )", "content": "{\n  user_ByEmail(email: $email) {\n    id\n    firstName\n    lastName\n  }\n}"}, {"type": "mutation", "name": "createOnBoardingByType ($data: CreateOnBoardingInput!)", "content": "{\n  createCoupon(couponInput:$couponInput){\n    _id\n    title\n    discount\n    enabled\n  }\n}"}, {"type": "query", "name": "GetMetrics($filter: MetricFilter)", "content": "{\n    po(id: $id) {\n      ...PO_ATTRIBUTES\n    }\n  }\n  ${PO_ATTRIBUTES}"}, {"type": "query", "name": "Restaurant($id:String)", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "mutation", "name": "($namespace: String!, $application: String!)", "content": "{\n    marketplace {\n      offer(id: $offerId) {\n        id\n        history {\n          id\n          event {\n            id\n            event\n            block {\n              id\n              timestamp\n            }\n          }\n          ipfsHash\n          ipfsUrl\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetPosts ($now: Date!, $marketId: ID!)", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n    }\n    messaging(id: \"defaultAccount\") {\n      id\n      pubKey\n      pubSig\n      enabled\n      isKeysLoading\n      synced\n      syncProgress\n      totalUnread\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n        result: sendNewReceiptMessagesToResidentScopes(data: $data) { \n            status \n        }\n    }"}, {"type": "query", "name": "backupProviders", "content": "{\n\t\t\t\tdeleteBackupRepoRecord(\n\t\t\t\t\tsite_id: $backupSiteID,\n\t\t\t\t\tid: $backupRepoID,\n\t\t\t\t) {\n\t\t\t\t\tsuccess\n\t\t\t\t}\n\t\t\t}"}, {"type": "mutation", "name": "updateSubscription(\n    $namespace: String!\n    $name: String!\n    $params: EventSubscriptionSpecInput!\n  )", "content": "{\n  organization_Update(input: $input) {\n    id\n    name\n  }\n}"}, {"type": "mutation", "name": "deleteImportTask($taskId: Int!)", "content": "{\n      listDashboardShares(dashboardUri: $dashboardUri, filter: $filter) {\n        count\n        nodes {\n          dashboardUri\n          shareUri\n          SamlGroupName\n          owner\n          created\n          status\n        }\n      }\n    }"}, {"type": "mutation", "name": "verifyEmail($token: String!)", "content": "{\n    individuals(filters: { uuid: $uuid }) {\n      entities {\n        isLocked\n        profile {\n          name\n        }\n        identities {\n          name\n          source\n          email\n          uuid\n          username\n        }\n        enrollments {\n          start\n          end\n          group {\n            name\n            type\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n    oAuth2Client(namespace: $namespace, name: $name) {\n      name\n      namespace\n      generation\n      error {\n        code\n        description\n      }\n      spec {\n        grantTypes\n        responseTypes\n        scope\n        secretName\n      }\n    }\n  }"}, {"type": "query", "name": "dashboardView_Contacts($pagination: Pagination!, $where: Filter, $sort: SortBy)", "content": "{\n  workspaceMemberInvites(where: {userByEmail: {id: {_eq: $userId}}}) {\n    id\n    email\n    userByEmail {\n      id\n    }\n    workspace {\n      id\n      name\n      slug\n    }\n  }\n}"}, {"type": "query", "name": "currentUserDirectMessageThreads($after: String)", "content": "{\n  deleteTask(id: $id, queue: $queue) {\n    id\n  }\n}"}, {"type": "mutation", "name": "(\n    $morningCleanser: [MyRoutineFieldsInputType]\n    $morningToner: [MyRoutineFieldsInputType]\n    $morningSerum: [MyRoutineFieldsInputType]\n    $morningMoisturizer: [MyRoutineFieldsInputType]\n    $morningSPF: [MyRoutineFieldsInputType]\n    $morningRX: [MyRoutineFieldsInputType]\n    $morningEyeCream: [MyRoutineFieldsInputType]\n    $eveningOilCleanser: [MyRoutineFieldsInputType]\n    $eveningCleanser: [MyRoutineFieldsInputType]\n    $eveningExfoliator: [MyRoutineFieldsInputType]\n    $eveningTreatmentMask: [MyRoutineFieldsInputType]\n    $eveningToner: [MyRoutineFieldsInputType]\n    $eveningSerum: [MyRoutineFieldsInputType]\n    $eveningMoisturizer: [MyRoutineFieldsInputType]\n    $eveningNightMask: [MyRoutineFieldsInputType]\n    $eveningOil: [MyRoutineFieldsInputType]\n    $eveningSpotTreatment: [MyRoutineFieldsInputType]\n    $eveningRX: [MyRoutineFieldsInputType]\n    $eveningEyeCream: [MyRoutineFieldsInputType]\n  )", "content": "{\n            stats {\n              users_count\n              servers_count\n              groups_count\n            }\n          }"}, {"type": "subscription", "name": "", "content": "{\n    pagedJobs(filter: $filter) {\n      totalCount\n    }\n  }"}, {"type": "query", "name": "Room($id: String!, $before: Int, $after: Int)", "content": "{\n    Deactivate(isActive: $isActive,email: $email) {\n      isActive\n    }\n  }"}, {"type": "mutation", "name": "pauseRedshiftCluster($clusterUri: String!)", "content": "{\n      resetPassword(username: $username, password: $password, code: $code) {\n        result\n      }\n    }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n    deleteGitRepository(namespace: $namespace, name: $name) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "RemoveCompanyMember($companyId: ID!, $userId: ID, $userIds: [ID!])", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "DeleteCommentReaction($commentId: uuid!, $userId: Int!, $reaction: bpchar!)", "content": "{\n    deleteUpload(\n      type: MC\n      attachmentKey: $attachmentKey\n      uploadSessionID: $uploadSessionId\n    ) {\n      message\n      success\n    }\n  }"}, {"type": "query", "name": "SearchTodos", "content": "{\n  cosmosAccountHistory(address: $address, fiat: $fiat) {\n    balanceHistory {\n      address\n      denom\n      balance\n      height\n      timestamp\n      chain\n    }\n    delegations {\n      balance\n      address\n      timestamp\n    }\n    unbondings {\n      balance\n      address\n      timestamp\n    }\n    delegatorRewards {\n      balance\n      height\n      address\n      timestamp\n      denom\n    }\n    validatorCommissions {\n      balance\n      height\n      validator\n      timestamp\n      denom\n    }\n    fiatPriceHistory {\n      price\n      timestamp\n    }\n  }\n}"}, {"type": "query", "name": "Orders", "content": "{\n    webRTCMessage(yourUser: $id) {\n      callID\n      type\n      message\n      chat {\n        _id\n      }\n    }\n  }"}, {"type": "mutation", "name": "resendMessage ($data: ResendMessageInput!)", "content": "{\n      getDataPipeline(DataPipelineUri: $DataPipelineUri) {\n        DataPipelineUri\n        name\n        owner\n        SamlGroupName\n        description\n        label\n        created\n        userRoleForPipeline\n        tags\n        repo\n        cloneUrlHttp\n        devStrategy\n        template\n        environment {\n          environmentUri\n          AwsAccountId\n          region\n          label\n        }\n        organization {\n          organizationUri\n          label\n          name\n        }\n        developmentEnvironments {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            envPipelineUri\n            environmentUri\n            environmentLabel\n            pipelineUri\n            pipelineLabel\n            stage\n            order\n            region\n            AwsAccountId\n            samlGroupName\n          }\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n      }\n    }"}, {"type": "mutation", "name": "CreatePost($input: CreatePostInput!)", "content": "{\n  editDevice(id: $id, device: $device) {\n    id,\n    name,\n    payload,\n    createdAt,\n    updatedAt,\n    status,\n    lat,\n    lon,\n    jsonSchema,\n    version,\n    lastUpdate,\n    snapshot\n  }\n}"}, {"type": "query", "name": "getDiscussionProposalById($onchainProposalId: Int!)", "content": "{\n  verifyEmail(token: $token) {\n    message\n    token\n  }\n}"}, {"type": "mutation", "name": "addNewItem ($name: String!, $desc: String, $ownerId: ID!)", "content": "{\n  plans(where: $where) {\n    id\n    name\n    isFree\n    price\n  }\n}"}, {"type": "mutation", "name": "logout", "content": "{\n  user(userId: $userId) {\n    id,\n    username,\n    first_name,\n    last_name,\n    userId\n  }\n}"}, {"type": "mutation", "name": "", "content": "{\n      getPostSecretFieldIAM(id: $id) {\n        id\n        title\n      }\n    }"}, {"type": "mutation", "name": "ChangePassword(\n    $currentPassword: String!\n    $newPassword: String!\n    $confirmPassword: String!\n  )", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n    userPublicPosts(pagination: $pagination, user: $user) {\n      page\n      total\n      total_pages\n      data {\n        id\n        postId\n        slug\n        content\n        cover\n        likes\n        user {\n          id\n          fullName\n          photo\n          totalLikes\n        }\n        createdAt\n      }\n    }\n  }"}, {"type": "query", "name": "($limit: Int, $offset: Int, $order: String, $username: String, $userId: String)", "content": "{\n        updateDataset(datasetUri: $datasetUri, input: $input) {\n          datasetUri\n          label\n          tags\n          userRoleForDataset\n        }\n      }"}, {"type": "mutation", "name": "CREATE_GRAPH(\n    $name: String!\n    $traceFilters: [TraceFilter]\n    $to: DateTime\n    $from: DateTime\n  )", "content": "{\n    marketplace {\n      totalEvents\n      events(offset: $offset, limit: $limit) {\n        id\n        event\n        blockNumber\n        block {\n          id\n          timestamp\n        }\n        returnValues {\n          ipfsHash\n          party\n          offerID\n          listingID\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "DeleteShareObject($shareUri: String!)", "content": "{\n    token {\n        token\n    }\n}"}, {"type": "query", "name": "remoteAppGetUsersCustom($where: users_bool_exp!, $limit: Int!, $offset: Int!)", "content": "{\n  posts(\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_tip_id: {_in: $onchainTipIds}}}\n    order_by: {onchain_link: {id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_tip_id\n      onchain_tip(where: {}) {\n        id\n        reason\n        tipStatus(last: 1) {\n          id\n          status\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "subscription", "name": "OnCreatePost", "content": "{\n    msaByProposal(proposalId: $proposalId) {\n      ...MSA_ATTRIBUTES\n    }\n  }\n  ${MSA_ATTRIBUTES}"}, {"type": "query", "name": "GetGlossaryTree(\n      $nodeUri: String!\n      $filter: GlossaryNodeSearchFilter\n    )", "content": "{\n    updateSecret(name: $name, namespace: $namespace, secret: $secret) {\n      name\n    }\n  }"}, {"type": "query", "name": "activeEvents($communityInput: CommunityQueryInput!)", "content": "{\n\t\t\t\tcreateBackupSite(name: $siteName, url: $siteUrl) {\n\t\t\t\t\tid\n\t\t\t\t\tuuid\n\t\t\t\t\tpassword\n\t\t\t  }\n\t\t\t}"}, {"type": "mutation", "name": "changePasswordWithToken($data: ChangePasswordWithTokenInput!)", "content": "{\n  taxes {\n    _id\n    taxationCharges\n    enabled\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n          profile{\n            _id\n            name\n            phone\n            phoneIsVerified\n            email\n            emailIsVerified\n            notificationToken\n            isOrderNotification\n            isOfferNotification\n            addresses{\n              _id\n              label\n              deliveryAddress\n              details\n              location{coordinates}\n              selected\n            }\n            favourite\n          }\n        }"}, {"type": "mutation", "name": "CreateTodo($input: CreateTodoInput!)", "content": "{\n    markConversationRead(id: $id) {\n      success\n      messagesRead\n    }\n  }"}, {"type": "mutation", "name": "setNewDefaultPaymentMethod($workspaceId: uuid!, $paymentMethodId: uuid!)", "content": "{\n      deleteCategory(nodeUri: $nodeUri)\n    }"}, {"type": "mutation", "name": "FinalizeOffer($offerID: String!, $from: String)", "content": "{\n  posts(\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_referendum_id: {_in: $onchainReferendumIds}}}\n    order_by: {onchain_link: {onchain_referendum_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_referendum_id\n      onchain_referendum(where: {}) {\n        id\n        end\n        referendumStatus(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "query", "name": "AllBountyPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5)", "content": "{\n    disableApplication(namespace: $namespace, application: $application) {\n      namespace\n      application\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    secret(namespace: $namespace, name: $name) {\n      data\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    withdrawDust(amount: $amount, from: $from, currency: $currency) {\n      id\n    }\n  }"}, {"type": "query", "name": "GrowthCampaigns($id: String = \"active\")", "content": "{\n    editCommunity(input: $input) {\n      ...communityInfo\n    }\n  }\n  ${communityInfoFragment}"}, {"type": "mutation", "name": "CreateReviewForEpisode($episode: Episode!, $review: ReviewInput!)", "content": "{\n  login(email:$email,password:$password,type:$type,appleId:$appleId,name:$name,notificationToken:$notificationToken){\n   userId\n   token\n   tokenExpiration\n   name\n   email\n   phone\n }\n}"}, {"type": "query", "name": "GetOrganizationLocations($id: ID!)", "content": "{\n      deleteMember(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n      }\n    }"}, {"type": "query", "name": "getPivotRoleExternalId($organizationUri: String!)", "content": "{\n    campaigns(first: $first, after: $after) {\n      totalCount\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        endCursor\n      }\n      nodes {\n        ...basicCampaignFields\n      }\n    }\n  }\n  ${fragments.GrowthCampaign.basic}"}, {"type": "query", "name": "operationHeader(\n    $graphId: ID!\n    $operationId: ID!\n    $to: DateTime\n    $from: DateTime\n    $traceFilters: [TraceFilter]\n  )", "content": "{\n      approveTermAssociation(linkUri: $linkUri)\n    }"}, {"type": "subscription", "name": "OnCreatePost", "content": "{\n    events {\n      event(findBy: { id: $eventId }) {\n        get {\n          id\n          slug\n          notifications {\n            id\n            shouldFeature\n            title\n            message\n            startDate\n            endDate\n            link\n            linkText\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "EditComment($id: uuid!, $content: String!)", "content": "{\n  updateApp(pk_columns: {id: $appId}, _set: $app) {\n    name\n    id\n    slug\n  }\n}"}, {"type": "mutation", "name": "importIdentities(\n    $backend: String!\n    $interval: Int\n    $params: JSONString\n    $url: String\n  )", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "mutation", "name": "($thread: String!, $id: ID!, $tagId: ID!, $communityId: ID!)", "content": "{\n    deleteTrigger(namespace: $namespace, triggerName: $triggerName) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "EditPoll ($id: Int!,  $blockEnd: Int!)", "content": "{\n  selectAddress(id:$id){\n    _id\n    addresses{\n      _id\n      label\n      deliveryAddress\n      details\n      location{coordinates}\n      selected\n    }\n  }\n}"}, {"type": "query", "name": "getNoticeCount", "content": "{\n    deathCertificates {\n      certificates(ids: $ids) {\n        id\n        firstName\n        lastName\n        deathYear\n        deathDate\n        pending\n        age\n        birthDate\n      }\n    }\n  }"}, {"type": "query", "name": "GetListOfRepos", "content": "{\n    identity(id: $id) {\n      id\n      firstName\n      lastName\n      fullName\n      description\n      avatarUrl\n      avatarUrlExpanded\n      strength\n      attestations\n      verifiedAttestations {\n        id\n        rawData\n        properties {\n          type\n          value\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "DeleteDatasetQualityRule($ruleUri: String!)", "content": "{\n    delete_Follow(\n      where: {\n        follower_id: { _eq: $userId }\n        following_id: { _eq: $followingId }\n      }\n    ) {\n      affected_rows\n    }\n  }"}, {"type": "mutation", "name": "VerifyPhoneCode(\n    $identity: String!\n    $prefix: String!\n    $phone: String!\n    $code: String!\n  )", "content": "{\n  interactionEvent_Create(\n    event: {channel: \"VOICE\", sentTo: [{contactID: $contactId}], sentBy: [{email: $sentBy}], appSource: \"Openline\", content: $content, contentType: $contentType}\n  ) {\n    ...InteractionEventFragment\n  }\n}\n    ${InteractionEventFragmentFragmentDoc}"}, {"type": "subscription", "name": "", "content": "{\n      countReadNotifications\n    }"}, {"type": "query", "name": "LatestMotionPosts($postType: Int!, $limit: Int! = 5 )", "content": "{ getAllShorts{ archived, user{  name  },shortTag{ tag },userId,id, thumbnail}}"}, {"type": "query", "name": "clusterRoles", "content": "{\n  uninstallPlugin(plugin: $plugin, chatbotId: $chatbotId) {\n    id\n  }\n}"}, {"type": "query", "name": "TrackerDemocracyTreasuryProposalPosts($postType: Int!, $onchainTreasuryProposalIds: [Int!]! )", "content": "{\n    communities(filter: $filter) {\n      entries {\n        id\n        title\n        desc\n        raw\n        logo\n        subscribersCount\n        insertedAt\n        updatedAt\n      }\n      pageNumber\n      pageSize\n      totalCount\n      totalPages\n    }\n  }"}, {"type": "query", "name": "getPartnerBySlug($slug: Slug!)", "content": "{\n            users(\n                where: $where\n                domain: $domain\n                currentAddress: $currentAddress\n            ) {\n                accounts {\n                    ${requestedFields}\n                }\n                error {\n                    type\n                    key\n                    message\n                    response\n                }\n            }\n        }"}, {"type": "query", "name": "DiscussionPostsIdDesc($limit: Int! = 20)", "content": "{\n      updateWorksheetShare(\n        worksheetShareUri: $worksheetShareUri\n        canEdit: $canEdit\n      ) {\n        worksheetShareUri\n        canEdit\n      }\n    }"}, {"type": "mutation", "name": "AddData(\n    $data: String!\n    $from: String!\n    $listingID: String\n    $offerID: String\n  )", "content": "{\n        dices {\n            _id\n            did,\n            name,\n            userId,\n            actionIds,\n            coverImg,\n            createdAt\n        }\n    }"}, {"type": "query", "name": "getMonitoringVPCConnectionId", "content": "{\n    deathCertificates {\n      order(id: $id, contactEmail: $contactEmail) {\n        id\n        date\n        contactName\n        contactEmail\n        contactPhone\n        shippingName\n        shippingCompanyName\n        shippingAddress1\n        shippingAddress2\n        shippingCity\n        shippingState\n        shippingZip\n        items {\n          certificate {\n            id\n            firstName\n            lastName\n          }\n          quantity\n          cost\n        }\n        certificateCost\n        subtotal\n        serviceFee\n        total\n      }\n    }\n  }"}, {"type": "mutation", "name": "startConfirmPhoneAction($data: StartConfirmPhoneActionInput!)", "content": "{\n    countStatus {\n      communitiesCount\n      postsCount\n      jobsCount\n      videosCount\n      reposCount\n      categoriesCount\n      tagsCount\n      threadsCount\n    }\n  }"}, {"type": "mutation", "name": "LockIndividual($uuid: String!)", "content": "{\n  insertDeployment(object: $object) {\n    ...DeploymentRow\n  }\n}\n    ${DeploymentRowFragmentDoc}"}, {"type": "query", "name": "AllMotionPosts($postType: Int!, $limit: Int! = 5 )", "content": "{\n    createChats(data: { chats: $chats, time: $time, user: $user }) {\n      data {\n        id\n      }\n    }\n  }"}, {"type": "mutation", "name": "logout", "content": "{\n    createListing(\n      from: $from\n      deposit: $deposit\n      depositManager: $depositManager\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeleteCoupon($id:String!)", "content": "{\n        searchPosts {\n          items {\n            id\n            content\n          }\n          nextToken\n        }\n      }"}, {"type": "query", "name": "TipPostAndComments($hash: String!)", "content": "{\n        createNote1(input: $input) {\n            noteId\n            noteType\n            owner\n        }\n      }"}, {"type": "query", "name": "Orders", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "mutation", "name": "updateDatasetStack($datasetUri: String!)", "content": "{\n      removeSavedQuery(savedQueryUri: $queryUri)\n    }"}, {"type": "query", "name": "", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_motion_id: {\n                    _is_null: false\n                },\n                onchain_referendum_id: {\n                    _is_null: true\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_motion_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_motion_id\n                onchain_motion(where: {NOT: {motionStatus_some: {OR: [{status: \"Executed\"}, {status: \"Disapproved\"}]}}}) {\n                    id\n                    motionStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "subscription", "name": "CallScreenSub($id: String!)", "content": "{\n      updateDatasetQualityRule(ruleUri: $ruleUri, input: $input) {\n        ruleUri\n        name\n        label\n        description\n        created\n        query\n      }\n    }"}, {"type": "mutation", "name": "SaveEmailConfiguration($configurationInput:EmailConfigurationInput!)", "content": "{\n  createCategory(category: $category) {\n    id,\n    name\n  }\n}"}, {"type": "mutation", "name": "UpdateTodo($input: UpdateTodoInput!)", "content": "{\n    currentUser {\n      login\n    }\n    feed(type: $type, offset: $offset, limit: $limit) {\n      ...FeedEntry\n    }\n  }\n  ${FeedEntryFragmentDoc}"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n    applicationTemplates {\n      data {\n        id\n        name\n        applicationInput\n        placeholders {\n          name\n          description\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetDatasetSummary($datasetUri: String!)", "content": "{\n    socialMediaLoginGoogle(input: $input) {\n      token\n      user {\n        id\n        userId\n        fullName\n        email\n        bio\n        photo\n        socialIdtoken\n        totalLikes\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }"}, {"type": "query", "name": "getBackupReposBySiteID($siteID: Int)", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "query", "name": "TipPostAndComments ($hash:String!)", "content": "{\n    individuals(page: $page, pageSize: $pageSize) {\n      entities {\n        mk\n        isLocked\n        identities {\n          name\n          source\n          uuid\n        }\n        profile {\n          id\n          name\n        }\n      }\n      pageInfo {\n        page\n        pageSize\n        numPages\n        hasNext\n        hasPrev\n        startIndex\n        endIndex\n        totalResults\n      }\n    }\n  }"}, {"type": "query", "name": "ListDatasetQualityRules(\n      $datasetUri: String!\n      $filter: DatasetQualityRuleFilter\n    )", "content": "{\n    makeOffer(\n      listingID: $listingID\n      value: $value\n      from: $from\n      quantity: $quantity\n      currency: $currency\n      fractionalData: $fractionalData\n      shippingAddress: $shippingAddress\n      autoswap: $autoswap\n      commission: $commission\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "Conversations($id: String)", "content": "{\n  categories(namespace: $namespace) {\n    id,\n    name\n  }\n}"}, {"type": "mutation", "name": "VerifyOAuthAttestation(\n    $provider: String!\n    $identity: String!\n    $authUrl: String\n    $redirect: String\n    $code: String\n  )", "content": "{\n    deployIdentityContract(from: $from, contract: $contract) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AddressLogin($address: String!, $signature: String!)", "content": "{\n    deployIdentityEvents(from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "getDices", "content": "{\n  sendOtpToPhoneNumber(phone: $phone, otp: $otp) {\n    result\n  }\n}"}, {"type": "query", "name": "Configuration", "content": "{\n    createCategory(title: $title, raw: $raw) {\n      id\n    }\n  }"}, {"type": "query", "name": "selectSource ($value: String, $organizationId: ID)", "content": "{\n  deleteContent(id: $id) {\n    id\n  }\n}"}, {"type": "mutation", "name": "DeployIdentity(\n    $from: String!\n    $profile: ProfileInput\n    $attestations: [String]\n  )", "content": "{\n  celoSystemHistory {\n    BlockNumber\n    SnapshotDate\n    GoldTokenSupply\n    TotalLockedGoldBalance\n    NonVotingLockedGoldBalance\n    TotalCeloUSDValue\n  }\n}"}, {"type": "mutation", "name": "approveDashboardShare($shareUri: String!)", "content": "{\n    me {\n      _id\n      name\n      email\n    }\n    chat(_id: $id) {\n      _id\n      users {\n        _id\n        name\n        email\n      }\n      messages {\n        _id\n        user {\n          _id\n          name\n          email\n        }\n        message\n        createdAt\n      }\n    }\n  }"}, {"type": "mutation", "name": "cartLinesAdd($lines: [CartLineInput!]!, $cartId: ID!)", "content": "{\n    service(name: $name, namespace: $namespace) {\n      name\n      json\n      labels\n      clusterIP\n      UID\n    }\n  }"}, {"type": "query", "name": "selectTicketsCount ($where: TicketWhereInput, $whereWithoutStatuses: TicketWhereInput)", "content": "{\n        searchComments {\n          items {\n            id\n            content\n            owner\n          }\n          nextToken\n        }\n      }"}, {"type": "query", "name": "Notifications", "content": "{\n  ridersByZone(id:$id){\n    _id\n    name\n    username\n    password\n    phone\n    available\n    zone{\n      _id\n      title\n    }\n  }\n}"}, {"type": "query", "name": "getDiscussionProposalById($onchainProposalId: Int!)", "content": "{\n    checkTelegramStatus(identity: $identity, maxTries: $maxTries) {\n      success\n      reason\n      data {\n        attestation\n        verified\n      }\n    }\n  }"}, {"type": "query", "name": "SearchDeathCertificates(\n    $query: String!\n    $page: Int!\n    $startYear: String\n    $endYear: String\n  )", "content": "{\n  config(appID: $appId, resolve: true) {\n    id: __typename\n    __typename\n    storage {\n      version\n    }\n  }\n}"}, {"type": "mutation", "name": "AcceptOffer($offerID: String!, $from: String)", "content": "{\n    getPostVote(post: $post) {\n      vote\n      voted\n    }\n  }"}, {"type": "mutation", "name": "deleteCurrentUser", "content": "{\n        createCreditCard(input: { userID:\"${USERNAME1}\", number:\"10000\", expMonth: \"07\", expYear: \"2027\", name: \"platimum\", issuer: \"amex\" }) {\n            userID\n        }\n      }"}, {"type": "mutation", "name": "updateDatasetStorageLocation(\n      $locationUri: String!\n      $input: ModifyDatasetStorageLocationInput!\n    )", "content": "{\n    rfps {\n      ...RFP_ATTRIBUTES\n    }\n  }\n  ${RFP_ATTRIBUTES}"}, {"type": "mutation", "name": "deleteAirflowCluster($clusterUri: String!)", "content": "{\n    createOAuth2Client(name: $name, namespace: $namespace, params: $params) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "UpdateWithdrawRequest($id:ID!, $status:String!)", "content": "{\n  forgotPassword(email:$email){\n    result\n  }\n}"}, {"type": "mutation", "name": "addReferendumIdToMotionMutation($motionId: Int!, $referendumId: Int!)", "content": "{\n    logout(wallet: $wallet) {\n      success\n      reason\n    }\n  }"}, {"type": "query", "name": "Coupons", "content": "{\n  updateRiderLocation(latitude:$latitude,longitude:$longitude){\n    _id\n  }\n}"}, {"type": "query", "name": "LatestBountyPosts($postType: Int!, $limit: Int! = 5 )", "content": "{\n  delete_option_poll_votes(\n    where: {_and: [{option_poll_id: {_eq: $optionPollId}}, {user_id: {_eq: $userId}}]}\n  ) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "getAppointmentQuery(\n    $date: String\n    $startTime: String\n    $morningOrEvening: String\n    $endTime: String\n    $duration: Int\n    $price: Int\n    $firstName: String\n    $lastName: String\n    $email: String\n    $phoneNumber: String\n    $bookedWithCardSquareID: String\n  )", "content": "{\n      createEnvironment(input: $input) {\n        environmentUri\n        label\n        userRoleInEnvironment\n        SamlGroupName\n        AwsAccountId\n        created\n        dashboardsEnabled\n        notebooksEnabled\n        mlStudiosEnabled\n        pipelinesEnabled\n        warehousesEnabled\n      }\n    }"}, {"type": "mutation", "name": "DeleteMember($input: DeleteMemberInput!)", "content": "{\n    finalizeOffer(\n      offerID: $offerID\n      from: $from\n      rating: $rating\n      review: $review\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "Orders", "content": "{\n    refetch\n  }"}, {"type": "query", "name": "", "content": "{\n  organizations(pagination: $pagination) {\n    content {\n      id\n      name\n    }\n  }\n}"}, {"type": "query", "name": "($id: ID!)", "content": "{\n        deleteCoupon(id:$id)\n      }"}, {"type": "mutation", "name": "addConsumptionRoleToEnvironment($input: AddConsumptionRoleToEnvironmentInput!)", "content": "{\n    marketplace {\n      users(first: $first, after: $after, sort: $sort) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          endCursor\n        }\n        nodes {\n          id\n          firstEvent {\n            id\n            timestamp\n          }\n          lastEvent {\n            id\n            timestamp\n          }\n          offers {\n            totalCount\n          }\n          listings {\n            totalCount\n          }\n          account {\n            id\n            owner {\n              id\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "createBackupSnapshot($repoID: Int!, $metaData: Mixed)", "content": "{\n      restaurant(id:$id){\n      _id\n      orderId\n      orderPrefix\n      slug\n      name\n      image\n      address\n      location{coordinates}\n      deliveryTime\n      minimumOrder\n      tax\n      categories{\n        _id\n        title\n        foods{\n          _id\n          title\n          description\n          variations{\n            _id\n            title\n            price\n            discounted\n            addons\n          }\n          image\n          isActive\n        }\n      }\n      options{\n        _id\n        title\n        description\n        price\n      }\n      addons{\n        _id\n        options\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n      \n    }\n}"}, {"type": "mutation", "name": "UpdateMember($input: UpdateMemberInput!)", "content": "{\n            updateBlogArchived(blogId: \"${this.currentBlog.id}\", archived : false)\n            {\n              id\n            }\n          }"}, {"type": "mutation", "name": "AddTablePermission(\n      $tableUri: String!\n      $userName: String!\n      $role: DatasetRole!\n    )", "content": "{\n  assignOrder(id:$id){\n    _id\n    orderStatus\n    rider{\n      _id\n      name\n      username\n    }\n  }\n}"}, {"type": "subscription", "name": "", "content": "{\n      createPostIAMWithKeys(input: { title: \"Hello, World!\", type: \"Post\", date: \"2019-01-01T00:00:00Z\" }) {\n        id\n        title\n        type\n        date\n      }\n    }"}, {"type": "subscription", "name": "SubscriptionNewMessage($order:ID!)", "content": "{\n      searchAirflowClusters(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          clusterUri\n          environmentUri\n          name\n          label\n          description\n          tags\n          owner\n          created\n          updated\n          AwsAccountId\n          region\n          clusterArn\n          clusterName\n          created\n          kmsAlias\n          status\n          CFNStackName\n          CFNStackStatus\n          CFNStackArn\n          IAMRoleArn\n          subnetIds\n          securityGroupIds\n          userRoleForCluster\n          userRoleInEnvironment\n          imported\n          dagS3Path\n          webServerUrl\n          vpc\n          organization {\n            organizationUri\n            label\n            name\n          }\n          environment {\n            environmentUri\n            label\n            name\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "SendOtpToEmail($email: String!, $otp: String!)", "content": "{\n  getActiveOrders(restaurantId:$restaurantId){\n    _id\n    zone{\n      _id\n    }\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      address\n      location{coordinates}\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n      details\n      label\n    }\n    items{\n      _id\n      title\n      description\n      image\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        description\n        title\n        quantityMinimum\n        quantityMaximum\n      }\n      specialInstructions\n      isActive\n      createdAt\n      updatedAt\n    }\n    user{\n      _id\n      name\n      phone\n      email\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    isPickedUp\n    status\n    paymentStatus\n    reason\n    isActive\n    createdAt\n    deliveryCharges\n    rider{\n      _id\n      name\n      username\n      available\n    }\n  }\n}"}, {"type": "mutation", "name": "sendNotification(\n    $title: String!\n    $content: String!\n    $color: String!\n    $icon: String!\n    $instanceName: String!\n  )", "content": "{\n    updateUser (input: { username: $username, fullName: $fullName, email: $email, website: $website }) {\n      user {\n        username\n        fullName\n        email\n        website\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n      members {\n        me {\n          id\n          bio\n          city\n          company\n          firstName\n          interests\n          jobTitle\n          lastName\n          lifeHack\n          profileImage\n          profileSlug\n          profileLinks {\n            linkType\n            url\n          }\n          state\n        }\n      }\n    }"}, {"type": "query", "name": "MarketFollows ($userId: ID!)", "content": "{\n  oasisTransaction(hash: $hash) {\n    hash\n    fee\n    gas\n    gas_price\n    height\n    method\n    date\n    sender\n    data {\n      ... on OasisBurnEvent {\n        type\n        owner\n        tokens\n      }\n      ... on OasisTransferEvent {\n        type\n        from\n        to\n        tokens\n      }\n      ... on OasisEscrowAddEvent {\n        type\n        to\n        tokens\n      }\n      ... on OasisEscrowTakeEvent {\n        type\n        from\n        to\n        tokens\n      }\n      ... on OasisEscrowReclaimEvent {\n        type\n        from\n        shares\n      }\n      ... on OasisRegisterEntityEvent {\n        type\n        id\n        nodes\n        allow_entity_signed_nodes\n      }\n      ... on OasisRegisterNodeEvent {\n        type\n        id\n        entity_id\n        expiration\n      }\n      ... on OasisUnfreezeNodeEvent {\n        type\n        id\n      }\n      ... on OasisRegisterRuntimeEvent {\n        type\n        id\n        version\n      }\n      ... on OasisRateEvent {\n        type\n        start\n        rate\n      }\n      ... on OasisBoundEvent {\n        type\n        start\n        rate_min\n        rate_max\n      }\n      ... on OasisAmendCommissionScheduleEvent {\n        type\n        rates\n        bounds\n      }\n      ... on OasisUnknownEvent {\n        type\n        method_name\n      }\n    }\n  }\n}"}, {"type": "query", "name": "CheckEnvironment($input: AwsEnvironmentInput!)", "content": "{\n  rider(id:$id){\n    _id\n    location {coordinates}\n  }\n}"}, {"type": "subscription", "name": "onMessageAdded", "content": "{\n    addPartner(input: $input) {\n      partner {\n        name\n        address\n        role\n        identity\n      }\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    marketFollows (first: 100, filter: { user: { value: $userId } }) {\n      nodes {\n        id\n        market {\n          id\n          ...SideMenuMarketList\n        }\n      }\n    }\n  }\n  ${SideMenuMarketList.fragments.marketList}"}, {"type": "mutation", "name": "ExecuteRulingMutation(\n    $offerID: String!\n    $ruling: String!\n    $commission: String!\n    $message: String\n    $refund: String\n    $from: String\n  )", "content": "{\n    market(symbol: $symbol) {\n      id\n    }\n  }"}, {"type": "query", "name": "getAllMiniApps ($data: AllMiniAppsInput!)", "content": "{\n  user(userId: $userId) {\n    id,\n    username,\n    first_name,\n    last_name,\n    userId\n  }\n}"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n    disputeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "subscription", "name": "OnCreateMember", "content": "{\n  cosmosAccountInformation(address: $address) {\n    type\n    value {\n      account_number\n      address\n      coins {\n        denom\n        amount\n      }\n      public_key {\n        type\n      }\n      sequence\n    }\n  }\n}"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n    isNameDuplicate(name: $name)\n  }"}, {"type": "mutation", "name": "", "content": "{\n    deleteApplicationLabel(applicationID: $id, key: \"scenarios\") {\n      key\n      value\n    }\n  }"}, {"type": "query", "name": "LatestDemocracyTreasuryProposalPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5)", "content": "{\n  jobRole_Create(contactId: $contactId, input: $input) {\n    ...JobRole\n    organization {\n      id\n      name\n    }\n  }\n}\n    ${JobRoleFragmentDoc}"}, {"type": "query", "name": "($id: ID!)", "content": "{\n  __typename\n  insert_poll_votes_one(object: {poll_id: $pollId, user_id: $userId, vote: $vote}) {\n    id\n  }\n}"}, {"type": "subscription", "name": "SubscribeOrderStatus($_id:String!)", "content": "{\n      upVote(input: $input) {\n        voteUri\n        targetUri\n        targetType\n        upvote\n      }\n    }"}, {"type": "mutation", "name": "($thread: String!, $id: ID!, $tagId: ID!, $communityId: ID!)", "content": "{\n        objs: allBillingProperties(where: $where, orderBy: $orderBy, first: $first, skip: $skip) {\n            id\n            address\n        }\n    }"}, {"type": "mutation", "name": "", "content": "{\n      removeGroupFromEnvironment(\n        environmentUri: $environmentUri\n        groupUri: $groupUri\n      ) {\n        environmentUri\n      }\n    }"}, {"type": "query", "name": "Coupons", "content": "{\n        getOrganization(organizationUri: $organizationUri) {\n          organizationUri\n          label\n          userRoleInOrganization\n          users(filter: $filter) {\n            count\n            page\n            pageSize\n            pages\n            hasNext\n            hasPrevious\n            nodes {\n              userName\n              created\n              userRoleInOrganization\n            }\n          }\n        }\n      }"}, {"type": "query", "name": "getUsers", "content": "{\n    vote(repoFullName: $repoFullName, type: $type) {\n      score\n      id\n      vote {\n        vote_value\n      }\n    }\n  }"}, {"type": "mutation", "name": "createNamespace($name: String!, $labels: Labels)", "content": "{\n    service(name: $name, namespace: $namespace) {\n      name\n      json\n      labels\n      clusterIP\n      UID\n    }\n  }"}, {"type": "query", "name": "getDices", "content": "{\n  appSecrets(appID: $appId) {\n    ...Secret\n  }\n}\n    ${SecretFragmentDoc}"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n  restaurant(id:$id){\n  _id\n  orderId\n  orderPrefix\n  name\n  image\n  address\n  location{coordinates}\n  deliveryTime\n  username\n  isAvailable\n  notificationToken\n  enableNotification\n  openingTimes{\n    day\n    times{\n      startTime\n      endTime\n    }\n  }\n}}"}, {"type": "mutation", "name": "addDomain(\n    $domain: String!\n    $isTopDomain: Boolean\n    $organization: String!\n  )", "content": "{\n      login (username: $username, password: $password) {\n        user {\n          id\n          username\n        }\n        tokens {\n          accessToken\n          accessTokenExpiration\n          refreshToken\n        }\n      }\n    }"}, {"type": "query", "name": "($name: String!)", "content": "{\n    serviceBindingUsages(\n      namespace: $namespace\n      resourceKind: $resourceKind\n      resourceName: $resourceName\n    ) {\n      name\n      parameters {\n        envPrefix {\n          name\n        }\n      }\n      serviceBinding {\n        name\n        serviceInstanceName\n        secret {\n          name\n          data\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Orders", "content": "{\n    uniswapInitializeFactory(from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "Orders($page:Int,$rows:Int,$search:String)", "content": "{\n      listDatasetQualityRules(datasetUri: $datasetUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          ruleUri\n          name\n          label\n          description\n          created\n          query\n        }\n      }\n    }"}, {"type": "query", "name": "selectContact ($organizationId: ID, $propertyId: ID, $unitName: String, $unitType: String)", "content": "{\n    importWallet(role: $role, name: $name, privateKey: $privateKey) {\n      ...balanceFields\n    }\n  }\n  ${fragments.Account.balance}"}, {"type": "query", "name": "GetMyTrips", "content": "{\n      deleteMember(input: $input) {\n        id\n        name\n        createdAt\n        updatedAt\n      }\n    }"}, {"type": "query", "name": "getDiscussionTreasurySpendProposalById($onchainTreasuryProposalId: Int!)", "content": "{\n  chatbot: editChatbot(id: $id, chatbot: $chatbot) {\n    id,\n    name,\n    description,\n    guid,\n    chatbotId\n  }\n}"}, {"type": "mutation", "name": "deleteCurrentUser", "content": "{\n\t\tproposal (\n\t\t\twhere: {\n\t\t\t\tnode: {\n\t\t\t\t\tproposalStatus_some: {\n\t\t\t\t\t\tAND: [\n\t\t\t\t\t\t\t{ status: \"Proposed\" }\n\t\t\t\t\t\t\t{ blockNumber: { number_gte: $startBlock } }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t) {\n\t\t\tmutation\n\t\t\tnode {\n\t\t\t\tid\n\t\t\t\tauthor\n\t\t\t\tproposalId\n\t\t\t}\n\t\t}\n\t}"}, {"type": "mutation", "name": "setCredentialsStart($address: String!)", "content": "{query}"}, {"type": "mutation", "name": "addOrRemoveFromCart($launchId: ID!)", "content": "{\n  __typename\n  insert_poll_votes_one(object: {poll_id: $pollId, user_id: $userId, vote: $vote}) {\n    id\n  }\n}"}, {"type": "query", "name": "getRemoteAppRoles", "content": "{\n              onCreateTodo(\n                filter: { name: { eq: \"todo1\" } }\n              ) {\n                id\n                name\n                owner\n              }\n            }"}, {"type": "mutation", "name": "AddOptionPollVote($optionPollId: Int!, $userId: Int!, $option: String!)", "content": "{\n      createOrganization(input: $input) {\n        organizationUri\n        label\n        created\n      }\n    }"}, {"type": "mutation", "name": "setRuntimeLabel($id: ID!, $scenarios: Any!)", "content": "{\n      createSavedQuery(scheduledQueryUri: $scheduledQueryUri, input: $input) {\n        savedQueryUri\n        name\n        label\n        created\n        description\n        tags\n      }\n    }"}, {"type": "query", "name": "SearchEnvironmentDataItems(\n      $filter: EnvironmentDataItemFilter\n      $environmentUri: String\n    )", "content": "{\n      listEnvironmentGroups(environmentUri: $environmentUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          groupUri\n          invitedBy\n          created\n          description\n          environmentIAMRoleArn\n          environmentIAMRoleName\n          environmentAthenaWorkGroup\n          environmentPermissions(environmentUri: $environmentUri) {\n            name\n            permissionUri\n          }\n        }\n      }\n    }"}, {"type": "subscription", "name": "Namespaces($showSystemNamespaces: Boolean)", "content": "{\n    publicTaskMessages(taskId: $taskId) {\n      message\n      user {\n        fullName\n      }\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "deleteWorksheet($worksheetUri: String!)", "content": "{\n    sessions {\n      session(id: $sessionId) {\n        update {\n          update(session: $session) {\n            id\n            type\n            category\n            status\n            title\n            shortDescription\n            longDescription\n            primaryCategory\n            secondaryCategory\n            targetAudience\n            supportingArtifacts {\n              name\n              url\n            }\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "UserTasks(\n    $listIds: [ID!]!\n    $sectionIds: [ID!]!\n    $offset: Int\n    $limit: Int\n  )", "content": "{\n    newTransaction {\n      totalCount\n      node {\n        ...basicTransactionFields\n      }\n    }\n  }\n  ${fragments.Transaction.basic}"}, {"type": "query", "name": "($login: String!)", "content": "{\n  organization(id: $id) {\n    id\n    owner {\n      id\n      firstName\n      lastName\n    }\n  }\n}"}, {"type": "query", "name": "AllOptions($page:Int)", "content": "{\n    deathCertificates {\n      order(id: $id, contactEmail: $contactEmail) {\n        id\n        date\n        contactName\n        contactEmail\n        contactPhone\n        shippingName\n        shippingCompanyName\n        shippingAddress1\n        shippingAddress2\n        shippingCity\n        shippingState\n        shippingZip\n        items {\n          certificate {\n            id\n            firstName\n            lastName\n          }\n          quantity\n          cost\n        }\n        certificateCost\n        subtotal\n        serviceFee\n        total\n      }\n    }\n  }"}, {"type": "query", "name": "($_id: ID, $email: String)", "content": "{\n    currencies(tokens: $tokens) {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        id\n        decimals\n        balance(address: $account)\n        allowance(address: $account, target: $target)\n      }\n    }\n    proxyCurrencies: currencies(tokens: $tokens) @include(if: $useProxy) {\n      __typename\n      ... on Currency {\n        id\n        name\n        code\n        priceInUSD\n      }\n      ... on Token {\n        id\n        decimals\n        balance(address: $proxy)\n        allowance(address: $account, target: $proxy)\n      }\n    }\n  }"}, {"type": "query", "name": "InviteInfo($code: String!)", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "query", "name": "($_id: ID, $email: String)", "content": "{\n    namespaces(\n      withSystemNamespaces: $showSystemNamespaces\n      withInactiveStatus: false\n    ) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "($device: NewDevice!)", "content": "{\n    serviceBrokers(namespace: $namespace) {\n      name\n      namespace\n      creationTimestamp\n      url\n      labels\n      status {\n        ready\n        reason\n        message\n      }\n    }\n  }"}, {"type": "mutation", "name": "submitShareObject($shareUri: String!)", "content": "{\n    user: currentUser {\n      ...userInfo\n      communityConnection {\n        edges {\n          node {\n            id\n            name\n            slug\n            profilePhoto\n            communityPermissions {\n              isMember\n              isBlocked\n              isOwner\n              isModerator\n            }\n          }\n        }\n      }\n      channelConnection {\n        edges {\n          node {\n            id\n            name\n            slug\n            isDefault\n            isPrivate\n            isArchived\n            community {\n              id\n            }\n            channelPermissions {\n              isMember\n              isPending\n              isBlocked\n              isOwner\n              isModerator\n            }\n          }\n        }\n      }\n    }\n  }\n  ${userInfoFragment}"}, {"type": "subscription", "name": "getUpdatedEmployee($_id: ID)", "content": "{\n  getDashboardSales(starting_date: $startingDate, ending_date: $endingDate){\n    orders{\n      day\n      amount\n    }\n  }\n}"}, {"type": "query", "name": "Offer($offerId: ID!)", "content": "{\n      deleteRedshiftCluster(\n        clusterUri: $clusterUri\n        deleteFromAWS: $deleteFromAWS\n      )\n    }"}, {"type": "query", "name": "GetOrganization($organizationUri: String!)", "content": "{\n    updateTokenAllowance(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "query", "name": "ListOrg($filter: OrganizationFilter)", "content": "{\n    toggleAvailablity(id:$id){\n      _id\n    }\n}"}, {"type": "query", "name": "AllDemocracyProposalPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5 )", "content": "{\n        result: startPasswordRecovery(data: $data) { status }\n    }"}, {"type": "mutation", "name": "WithdrawListing(\n    $listingID: String!\n    $target: String!\n    $reason: String\n    $from: String\n  )", "content": "{\n            stats {\n              users_count\n              servers_count\n              groups_count\n            }\n          }"}, {"type": "query", "name": "GetRedshiftCluster($clusterUri: String!)", "content": "{\n  editCoupon(couponInput:$couponInput){\n    _id\n    code\n    discount\n    enabled\n        }\n      }"}, {"type": "mutation", "name": "resendVerifyEmailToken", "content": "{\n    logout(wallet: $wallet) {\n      success\n      reason\n    }\n  }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n    labelDefinitions {\n      key\n      schema\n    }\n  }"}, {"type": "subscription", "name": "SubscriptionOrder($id:String!)", "content": "{\n    logSocialShare(contentId: $contentId, actionType: $actionType)\n  }"}, {"type": "query", "name": "LatestTechCommitteeProposalPosts($postType: Int!, $limit: Int! = 5 )", "content": "{\n  __typename\n  insert_option_poll(\n    objects: {post_id: $postId, question: $question, options: $options, end_at: $endAt}\n  ) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "", "content": "{\n        coupons {\n          _id\n          code\n          discount\n          enabled\n        }\n      }"}, {"type": "query", "name": "Zones", "content": "{\n      getShareObject(shareUri: $shareUri) {\n        shareUri\n        created\n        owner\n        status\n        userRoleForShareObject\n        consumptionData {\n          s3AccessPointName\n          sharedGlueDatabase\n        }\n        principal {\n          principalId\n          principalType\n          principalName\n          principalIAMRoleName\n          SamlGroupName\n          environmentUri\n          environmentName\n          AwsAccountId\n          region\n          organizationUri\n          organizationName\n        }\n        items(filter: $filter) {\n          count\n          page\n          pages\n          hasNext\n          hasPrevious\n          nodes {\n            itemUri\n            shareItemUri\n            itemType\n            itemName\n            status\n            action\n          }\n        }\n        dataset {\n          datasetUri\n          datasetName\n          SamlAdminGroupName\n          environmentName\n          AwsAccountId\n          region\n          exists\n        }\n      }\n    }"}, {"type": "mutation", "name": "UniswapDeployFactory($from: String!)", "content": "{\n    deleteCommunity(id: $id) {\n      id\n    }\n  }"}, {"type": "query", "name": "SearchComments", "content": "{\n    refetch\n  }"}, {"type": "mutation", "name": "SelectAddress($id:String!)", "content": "{\n      echo(msg: \"Hello\")\n    }"}, {"type": "query", "name": "getUserThreadConnection(\n    $id: ID\n    $after: String\n    $kind: ThreadConnectionType\n  )", "content": "{\n        postSubscribe(post_id: $postId) {\n            message\n        }\n    }"}, {"type": "query", "name": "clusterRole($name: String!)", "content": "{\n    sendFromNode(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "createProposal($input: inputProposal!)", "content": "{\n  deployments(\n    where: {deploymentStatus: {_in: [\"SCHEDULED\"]}, appId: {_eq: $appId}}\n  ) {\n    ...DeploymentRow\n  }\n}\n    ${DeploymentRowFragmentDoc}"}, {"type": "query", "name": "GetPersonalAccessTokens", "content": "{\n  message: createMessage(message: $message) {\n    id,\n    chatId\n  }\n}"}, {"type": "query", "name": "userPublicComments($pagination: PaginationInputType!, $user: String!)", "content": "{\n      createTerm(parentUri: $parentUri, input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "query", "name": "apiDefinition(\n    $applicationId: ID!\n    $apiPackageId: ID!\n    $apiDefinitionId: ID!\n  )", "content": "{\n    deleteServiceBinding(\n      serviceBindingName: $serviceBindingName\n      namespace: $namespace\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "(\n  $offset: Int,\n  $limit: Int,\n  $order: String,\n  $categoryId: Int,\n  $slug: String,\n  $language: String,\n  $namespace: String,\n  $search: String,\n  $chatbotId: String\n)", "content": "{\n    createThread(title: $title, raw: $raw) {\n      title\n    }\n  }"}, {"type": "subscription", "name": "tipSubscription($startBlock: Int!)", "content": "{\n        authenticatedUser {\n            ${userFragment}\n        }\n    }"}, {"type": "query", "name": "Runtime($id: ID!)", "content": "{\n  configuration{\n    _id\n    currency\n    currencySymbol\n    deliveryRate\n  }\n}"}, {"type": "mutation", "name": "deleteTask ($id:ID!)", "content": "{\n\t\tposts(\n\t\t\torder_by: {id: desc},\n\t\t\tlimit: 20,\n\t\t\twhere: {\n\t\t\t\t_or: [\n\t\t\t\t\t{title: {_ilike: $term}},\n\t\t\t\t\t{content: {_ilike: $term}}\n\t\t\t\t]\n\t\t\t}\n\t\t) {\n\t\t\t...searchPostFields\n\t\t}\n\t}\n\t${searchPostFields}"}, {"type": "mutation", "name": "SignMessage($address: ID!, $message: String!)", "content": "{\n      getCommentConnection(id: $commentId) {\n        id\n        content\n        post {\n          id\n          title\n        }\n      }\n    }"}, {"type": "mutation", "name": "ApproveTermAssociation($linkUri: String!)", "content": "{\n    identityEvents {\n      getAuthUrl(provider: $provider, redirect: $redirect)\n    }\n  }"}, {"type": "query", "name": "Network", "content": "{\n    bindableResources(namespace: $namespace) {\n      kind\n      displayName\n      resources {\n        name\n        namespace\n      }\n    }\n  }"}, {"type": "mutation", "name": "UpdateStudent($input: UpdateStudentInput!)", "content": "{\n  insertSecret(appID: $appId, secret: $secret) {\n    name\n  }\n}"}, {"type": "mutation", "name": "deleteDatasetTable($tableUri: String!)", "content": "{\n  rider(id:$id){\n    _id\n    location {coordinates}\n  }\n}"}, {"type": "mutation", "name": "createMSA($input: inputMSA!)", "content": "{\n      restaurant(id:$id){\n      _id\n      orderId\n      orderPrefix\n      slug\n      name\n      image\n      address\n      location{coordinates}\n      deliveryTime\n      minimumOrder\n      tax\n      categories{\n        _id\n        title\n        foods{\n          _id\n          title\n          description\n          variations{\n            _id\n            title\n            price\n            discounted\n            addons\n          }\n          image\n          isActive\n        }\n      }\n      options{\n        _id\n        title\n        description\n        price\n      }\n      addons{\n        _id\n        options\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n      \n    }\n}"}, {"type": "query", "name": "Configuration", "content": "{\n    secret(namespace: $namespace, name: $name) {\n      name\n      namespace\n      data\n      labels\n      annotations\n      json\n    }\n  }"}, {"type": "mutation", "name": "removeEmailFromContact($contactId: ID!, $id: ID!)", "content": "{\n    sendFromNode(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "mutation", "name": "", "content": "{\n        onCreateStudent(owner: $owner) {\n          id\n          name\n          email\n          ssn\n          owner\n        }\n      }"}, {"type": "mutation", "name": "UpdateSecret($appId: uuid!, $secret: ConfigEnvironmentVariableInsertInput!)", "content": "{\n\tuser(login: $login) {\n    name\n    avatarUrl\n    login\n    pullRequests(last: 10, states: [OPEN], before: $startCursor) {\n      totalCount\n      pageInfo {\n        hasPreviousPage\n        startCursor\n      }\n      nodes {\n        ...prFields\n        ...statusFields\n        ...lastCommentFields\n        reviews(last: 10) {\n          totalCount\n          nodes {\n            ...reviewFields\n          }\n        }\n        reviewRequests(last: 2) {\n          totalCount\n          nodes {\n            requestedReviewer {\n              ... on User {\n                login\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  rateLimit {\n    cost\n    limit\n    remaining\n    resetAt\n    nodeCount\n  }\n}\n\n${prFragment}\n${reviewFragment}\n${lastCommentFragment}\n\nfragment commitFields on Commit {\n  status {\n    contexts {\n      id\n      context\n      state\n      createdAt\n    }\n    state\n  }\n  pushedDate\n}\n\nfragment statusFields on PullRequest {\n\tcommits(last: 1) {\n    nodes {\n      commit {\n        ...commitFields\n      }\n    }\n  }\n}"}, {"type": "query", "name": "AllTemplates", "content": "{\n    zones{\n    _id\n    title\n    description\n    location{coordinates}\n    isActive\n    }\n}"}, {"type": "mutation", "name": "updateUserPushToken($token: String!)", "content": "{\n    socialMediaLoginGoogle(input: $input) {\n      token\n      user {\n        id\n        userId\n        fullName\n        email\n        bio\n        photo\n        socialIdtoken\n        totalLikes\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }"}, {"type": "mutation", "name": "DeployIdentityViaProxy($from: String!, $owner: String!)", "content": "{\n    deleteUpload(\n      type: BC\n      attachmentKey: $attachmentKey\n      uploadSessionID: $uploadSessionId\n    ) {\n      message\n      success\n    }\n  }"}, {"type": "query", "name": "Web3", "content": "{\n      countReadNotifications\n    }"}, {"type": "mutation", "name": "submitRepository($repoFullName: String!)", "content": "{\n  cosmosAccountHistory(address: $address, fiat: $fiat) {\n    balanceHistory {\n      address\n      denom\n      balance\n      height\n      timestamp\n      chain\n    }\n    delegations {\n      balance\n      address\n      timestamp\n    }\n    unbondings {\n      balance\n      address\n      timestamp\n    }\n    delegatorRewards {\n      balance\n      height\n      address\n      timestamp\n      denom\n    }\n    validatorCommissions {\n      balance\n      height\n      validator\n      timestamp\n      denom\n    }\n    fiatPriceHistory {\n      price\n      timestamp\n    }\n  }\n}"}, {"type": "query", "name": "Users($page: Int!, $first: Int!)", "content": "{\n        objs: allProperties(where: $where, orderBy: $orderBy, first: $first, skip: $skip) {\n            id\n            address\n        }\n    }"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n  repository(owner: $owner, name: $repo) {\n    labels(first: 20, after: $cursor) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        name\n        description\n        issues(states: OPEN) {\n          totalCount\n        }\n      }\n    }\n  }\n}"}, {"type": "query", "name": "", "content": "{\n        onCreatePost(postOwner: \"${USERNAME2}\") {\n          id\n          title\n          postOwner\n        }\n      }"}, {"type": "query", "name": "", "content": "{\n  meeting_UnlinkAttendedBy(meetingId: $meetingId, participant: $participant) {\n    id\n    attendedBy {\n      ... on ContactParticipant {\n        contactParticipant {\n          id\n          name\n          firstName\n          lastName\n        }\n      }\n      ... on UserParticipant {\n        userParticipant {\n          id\n          lastName\n          firstName\n        }\n      }\n    }\n  }\n}"}, {"type": "query", "name": "Restaurant($id:String)", "content": "{\n    updateTokenAllowance(token: $token, from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "query", "name": "synthesizeText($text: String!, $voice: String!)", "content": "{\n  setCredentialsConfirm(\n    address: $address\n    email: $email\n    signature: $signature\n    username: $username\n    password: $password\n  ) {\n    message\n    token\n  }\n}"}, {"type": "mutation", "name": "SendMessage($to: String!, $content: String, $media: [MediaInput])", "content": "{\n    createList(\n      name: $name\n      description: $description\n      requesterId: $requesterId\n      responderId: $responderId\n      tasks: $tasks\n    ) {\n      list {\n        id\n        name\n      }\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n    moloches(orderBy: summoningTime, first: 100, skip: $skip) {\n      id\n      title\n      version\n      totalShares\n      guildBankAddress\n      summoningTime\n      guildBankBalanceV1\n      guildBankValue @client\n      apiData @client\n      members(where: { exists: true }) {\n        id\n      }\n      proposals {\n        id\n      }\n      approvedTokens {\n        id\n      }\n      depositToken {\n        tokenAddress\n        symbol\n        decimals\n      }\n      tokenBalances(where: { guildBank: true }) {\n        id\n        tokenBalance\n        guildBank\n        token {\n          decimals\n          tokenAddress\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "FindUser($page: Int, $pageSize: Int, $userName: String)", "content": "{\n    addAddonsConfigurationURLs(\n      name: $name\n      namespace: $namespace\n      urls: $urls\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "cosmosStakingParameters($network: String!)", "content": "{\n    addOrganization(name: $name) {\n      organization {\n        name\n      }\n    }\n  }"}, {"type": "mutation", "name": "GenerateEmailCode($email: String!)", "content": "{\n      getNetwork(vpcUri: $vpcUri) {\n        vpcUri\n        VpcId\n        label\n        description\n        tags\n        owner\n        SamlGroupName\n        privateSubnetIds\n        privateSubnetIds\n      }\n    }"}, {"type": "query", "name": "GetMetrics($filter: MetricFilter)", "content": "{\n        undoEmailChange(token: $token){\n            message,\n            token,\n            email\n        }\n    }"}, {"type": "mutation", "name": "toggleCommunityRedirect($communityId: ID!)", "content": "{\n        result: _allPaymentsSum(where: $where) { sum }\n    }"}, {"type": "query", "name": "MyRepos($login:String!)", "content": "{\n    vendors{\n      _id\n      email\n      userType\n      restaurants{\n        _id\n        orderId\n        orderPrefix\n        slug\n        name\n        image\n        address\n        location{coordinates}\n        zone{\n          _id\n          title\n        }\n      }\n    }\n}"}, {"type": "query", "name": "moloches($skip: Int)", "content": "{\n    web3 {\n      networkId\n      networkName\n    }\n  }"}, {"type": "mutation", "name": "Test($foo: String!)", "content": "{\n  user(userId: $userId, chatbotId: $chatbotId) {\n    id,\n    userId,\n    payload\n  }\n}"}, {"type": "query", "name": "MyFeed", "content": "{\n    sessions {\n      me {\n        session(id: $sessionId) {\n          id\n          type\n          category\n          status\n          title\n          shortDescription\n          longDescription\n          primaryCategory\n          secondaryCategory\n          targetAudience\n          supportingArtifacts {\n            name\n            url\n          }\n          prerequisites\n          agenda\n          takeaways\n          canRecord\n          mentorship\n          whyAreYou\n          otherComments\n          status\n        }\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnDeleteMember", "content": "{\n    newBlock {\n      id\n      number\n    }\n  }"}, {"type": "mutation", "name": "AddPostReaction ($postId: Int!, $userId: Int!, $reaction: bpchar!)", "content": "{\n    createComment(thread: $thread, id: $id, body: $body) {\n      id\n      body\n    }\n  }"}, {"type": "mutation", "name": "submitComment($repoFullName: String!, $commentContent: String!)", "content": "{\n          searchPosts(aggregates: [{ name: \"Terms\", type: terms, field: secret }]) {\n            aggregateItems {\n              name\n              result {\n                ... on SearchableAggregateBucketResult {\n                  buckets {\n                    doc_count\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }"}, {"type": "query", "name": "VerifyRepo($owner: String!, $repo: String!)", "content": "{\n    createListing(\n      from: $from\n      deposit: $deposit\n      depositManager: $depositManager\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "getThreadByMatch($id: ID!)", "content": "{\n        updateUser(updateUserInput:{name:$name,phone:$phone,phoneIsVerified:$phoneIsVerified,emailIsVerified:$emailIsVerified}){\n          _id\n          name\n          phone\n          phoneIsVerified\n          emailIsVerified\n        }\n      }"}, {"type": "query", "name": "GetOrganizationDetails($id: ID!)", "content": "{\n  workspaceMemberInvites(where: {userByEmail: {id: {_eq: $userId}}}) {\n    id\n    email\n    userByEmail {\n      id\n    }\n    workspace {\n      id\n      name\n      slug\n    }\n  }\n}"}, {"type": "query", "name": "SearchPosts", "content": "{\n  users(pagination: $pagination, where: $where) {\n    content {\n      id\n      firstName\n      lastName\n    }\n    totalElements\n  }\n}"}, {"type": "mutation", "name": "revokeItemsShareObject($input: RevokeItemsInput)", "content": "{\n        undoEmailChange(token: $token){\n            message,\n            token,\n            email\n        }\n    }"}, {"type": "mutation", "name": "($id: Int!, $user: InputUser!)", "content": "{\n        getPostPublicIAM(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "mutation", "name": "CreateDatasetQualityRule(\n      $datasetUri: String!\n      $input: NewDatasetQualityRuleInput\n    )", "content": "{\n    deleteRuntimeLabel(runtimeID: $id, key: \"scenarios\") {\n      key\n      value\n    }\n  }"}, {"type": "query", "name": "ShopCountries", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_referendum_id: {\n                    _is_null: false\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_referendum_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_referendum_id\n                onchain_referendum(where: {}) {\n                    id\n                    end\n                    referendumStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "mutation", "name": "CreateStudent($input: CreateStudentInput!)", "content": "{\n    configuration{\n      _id\n      currency\n      currencySymbol\n    }\n  }"}, {"type": "query", "name": "($id: Int!)", "content": "{\n  update_onchain_links(where: {onchain_treasury_proposal_id: {_eq: $treasuryProposalId}}, _set: {onchain_motion_id: $motionId}) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "", "content": "{\n    commentAdded(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      content\n    }\n  }"}, {"type": "mutation", "name": "SignMessage($address: ID!, $message: String!)", "content": "{\n        posts(where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            onchain_link: {\n                onchain_motion_id: {\n                    _in: $onchainMotionIds\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_motion_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_motion_id\n                onchain_motion(where: {}) {\n                    id\n                    motionStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "query", "name": "($id: ID!)", "content": "{\n  paymentMethods(\n    where: {workspaceId: {_eq: $workspaceId}}\n    order_by: {createdAt: desc}\n  ) {\n    ...getPaymentMethods\n  }\n}\n    ${GetPaymentMethodsFragmentDoc}"}, {"type": "query", "name": "SearchCompanies($text: String!, $companyId: ID)", "content": "{\n  posts(where: {onchain_link: {onchain_tip_id: {_eq: $hash}}}) {\n    ...tipPost\n  }\n}\n    ${TipPostFragmentDoc}"}, {"type": "mutation", "name": "DisableDataSubscriptions($environmentUri: String!)", "content": "{\n  chatbots {\n    id,\n    name,\n    chatbotId\n  }\n}"}, {"type": "query", "name": "getExecutedMotionsWithPreimageHash($preimageHash: String!, $blockNumber: Int!)", "content": "{\n    web3 {\n      primaryAccount {\n        id\n        balance {\n          eth\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "GetSmtpSettings($appId: uuid!)", "content": "{\n  __typename\n  insert_option_poll_votes_one(\n    object: {option_poll_id: $optionPollId, user_id: $userId, option: $option}\n  ) {\n    id\n  }\n}"}, {"type": "mutation", "name": "AddFavourite($id:String!)", "content": "{\n    updateTeamMember(\n      id: $id\n      fullName: $fullName\n      companyId: $companyId\n      role: $role\n    ) {\n      success\n      errors {\n        path\n        message\n      }\n      user {\n        id\n        fullName\n        profileUrl\n        roles {\n          id\n          name\n          companyId\n        }\n        teams {\n          id\n          name\n          companyId\n        }\n        companies {\n          id\n          name\n          logoUrl\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n            onDeleteTaskGroup(filter: $filter) {\n              id\n              title\n              description\n              priority\n              severity\n            }\n          }"}, {"type": "mutation", "name": "deleteOrganization($name: String!)", "content": "{\n    deletePost(post: $post)\n  }"}, {"type": "query", "name": "Tips", "content": "{\n      getSagemakerNotebookPresignedUrl(notebookUri: $notebookUri)\n    }"}, {"type": "query", "name": "filteredServiceClassesCounts", "content": "{\n    userComments(pagination: $pagination) {\n      page\n      per_page\n      total\n      data {\n        id\n        post {\n          postId\n        }\n        commentId\n        message\n        isReply\n        cover\n        likes\n        user {\n          id\n          fullName\n          photo\n          totalLikes\n          createdAt\n        }\n        createdAt\n      }\n    }\n  }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n    subscribeOrderStatus(_id:$_id){\n        _id\n        orderId\n        orderStatus\n        rider{\n            name\n        }\n    }\n}"}, {"type": "query", "name": "OrderStripe($id:String!)", "content": "{\n    synthesizeMarkdown(markdown: $markdown, voice: $voice) {\n      url\n    }\n  }"}, {"type": "mutation", "name": "updateDataPipelineEnvironment($input: NewDataPipelineEnvironmentInput)", "content": "{\n                blogByUserId(userId: \"${this.loggedInUser}\") {\n                  id\n                  title\n                  content\n                  userId\n                }\n              }"}, {"type": "query", "name": "", "content": "{\n  deleteTask(id:$id){\n    id\n  }\n}"}, {"type": "query", "name": "GetOrganizationContacts($id: ID!)", "content": "{\n        getPostPrivate(id: $id) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n    marketplace {\n      listings(first: $first, after: $after, sort: $sort, search: $search) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          endCursor\n        }\n        nodes {\n          ...basicListingFields\n        }\n      }\n    }\n  }\n  ${fragments.Listing.basic}"}, {"type": "query", "name": "celoAccountBalances($address: String!)", "content": "{\n    communitySubscribers(id: $id, filter: $filter) {\n      entries {\n        ${F.user}\n      }\n      ${F.pagedCounts}\n    }\n  }"}, {"type": "mutation", "name": "AddData(\n    $data: String!\n    $from: String!\n    $listingID: String\n    $offerID: String\n  )", "content": "{\n  \t\t\t\tbackupRepos(provider_id: $providerID) {\n    \t\t\t\tid\n    \t\t\t\tsite_id\n    \t\t\t\tprovider_id\n    \t\t\t\thash\n  \t\t\t\t}\n\t\t\t}"}, {"type": "query", "name": "listKeyValueTags($targetUri: String!, $targetType: String!)", "content": "{\n        objs: allTicketSources(where: {name_contains: $value, organization: { id: $organizationId }}) {\n            id\n            name\n        }\n    }"}, {"type": "mutation", "name": "UpdateDatasetTable(\n      $tableUri: String!\n      $input: ModifyDatasetTableInput!\n    )", "content": "{\n    createVendor(vendorInput:$vendorInput){\n      _id\n      email\n      userType\n    }\n}"}, {"type": "query", "name": "AllReferendaPosts($postType: Int!, $limit: Int! = 5)", "content": "{\n    joinNetwork(agentId: $agentId)\n  }"}, {"type": "query", "name": "TransactionReceipt($id: ID!)", "content": "{\n    generatePhoneCode(prefix: $prefix, method: $method, phone: $phone) {\n      success\n      reason\n    }\n  }"}, {"type": "query", "name": "userQuery(\n            $id: String!\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n        comment_reactions(where: {comment_id: {_eq: $commentId}}) {\n            ...commentReactionFields\n        }\n    }\n    ${commentReactionFields}"}, {"type": "mutation", "name": "createLabelDefinition($in: LabelDefinitionInput!)", "content": "{\n  orderCount\n}"}, {"type": "query", "name": "GetGlossary($nodeUri: String!)", "content": "{\n  tenant\n}"}, {"type": "query", "name": "", "content": "{\n  organization(id: $id) {\n    ...OrganizationContacts\n  }\n}\n    ${OrganizationContactsFragmentDoc}"}, {"type": "mutation", "name": "AddData($offerID: String!, $from: String, $data: String)", "content": "{\n        ${operation}${modelName} (${getInput}) {\n          lastName\n          firstName\n        }\n      }"}, {"type": "query", "name": "getDirectMessageThreadMessages($id: ID!, $after: String)", "content": "{\n    moveIdentity(fromUuid: $fromUuid, toUuid: $toUuid) {\n      uuid\n      individual {\n        ...individual\n      }\n    }\n  }\n  ${FULL_INDIVIDUAL}"}, {"type": "query", "name": "SearchComments", "content": "{\n  posts(\n    limit: $limit\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_referendum_id: {_is_null: false}}}\n    order_by: {onchain_link: {onchain_referendum_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_referendum_id\n      onchain_referendum(\n        where: {NOT: {referendumStatus_some: {OR: [{status: \"Passed\"}, {status: \"Executed\"}, {status: \"NotPassed\"}, {status: \"Cancelled\"}, {status: \"Vetoed\"}]}}}\n      ) {\n        id\n        end\n        referendumStatus(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "mutation", "name": "startDatasetProfilingRun($input: StartDatasetProfilingRunInput!)", "content": "{\n  __typename\n  insert_posts(\n    objects: {author_id: $userId, content: $content, title: $title, topic_id: $topicId}\n  ) {\n    affected_rows\n    returning {\n      id\n    }\n  }\n}"}, {"type": "mutation", "name": "acceptOrRejectOrganizationInviteByCode($inviteCode: String!, $data: AcceptOrRejectOrganizationInviteInput!)", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n      walletType\n      mobileWalletAccount {\n        id\n      }\n      primaryAccount {\n        id\n        proxy {\n          id\n        }\n        predictedProxy {\n          id\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "TechCommitteeProposalPostAndComments ($id:Int!)", "content": "{\n    submitRepository(repoFullName: $repoFullName) {\n      createdAt\n    }\n  }"}, {"type": "query", "name": "latencyDistribution(\n    $graphId: ID!\n    $operationId: ID\n    $traceFilters: [TraceFilter]\n    $to: DateTime\n    $from: DateTime\n  )", "content": "{\n    currentUser {\n      login\n    }\n    feed(type: $type, offset: $offset, limit: $limit) {\n      ...FeedEntry\n    }\n  }\n  ${FeedEntryFragmentDoc}"}, {"type": "mutation", "name": "GenerateDatasetAccessToken($datasetUri: String!)", "content": "{\n  logs(appID: $appID, service: $service, from: $from) {\n    log\n    service\n    timestamp\n  }\n}"}, {"type": "mutation", "name": "CreateTodo($input: CreateTodoInput!)", "content": "{\n        authenticatedUser ${OWN_USER_FIELDS}\n    }"}, {"type": "mutation", "name": "updateSchema($input: UpdateSchemaInput!)", "content": "{\n    addPackage(applicationID: $applicationId, in: $in) {\n      name\n    }\n  }"}, {"type": "query", "name": "SearchCompanies($text: String!, $companyId: ID)", "content": "{\n    messageReceived(yourUser: $id) {\n      username\n      notificationMessage\n      chat {\n        _id\n        users {\n          _id\n          name\n          email\n        }\n        messages {\n          _id\n          user {\n            _id\n            name\n            email\n          }\n          message\n          createdAt\n        }\n      }\n    }\n  }"}, {"type": "subscription", "name": "OnUpdateStudent", "content": "{\n    currentUser {\n      login\n      avatar_url\n    }\n  }"}, {"type": "mutation", "name": "importBankTransactions ($data: ImportBankTransactionsInput!)", "content": "{\n    secret(namespace: $namespace, name: $name) {\n      name\n      namespace\n      data\n      labels\n      annotations\n      json\n    }\n  }"}, {"type": "mutation", "name": "toggleCommunityNoindex($communityId: ID!)", "content": "{\n        requestResetPassword(email: $email){\n            message\n        }\n    }"}, {"type": "mutation", "name": "Coupon($coupon:String!)", "content": "{\n        result: generatePaymentLink(data: $data) { dv, paymentUrl }\n    }"}, {"type": "query", "name": "applications($filter: [LabelFilter!])", "content": "{\n    subscribe(email: $email) {\n      email\n    }\n  }"}, {"type": "mutation", "name": "DeleteTodo($input: DeleteTodoInput!)", "content": "{\n  contact_RemoveTagById(input: $input) {\n    id\n  }\n}"}, {"type": "mutation", "name": "login($email: String!, $password: String!)", "content": "{\n    createLabelDefinition(in: $in) {\n      key\n      schema\n    }\n  }"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n    web3 {\n      account(id: $account) {\n        id\n        identity {\n          id\n          firstName\n          lastName\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "AddAffiliate($from: String!, $affiliate: String!)", "content": "{\n    deployIdentity(\n      from: $from\n      attestations: $attestations\n      profile: $profile\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "($id: ID, $profilePicture: String)", "content": "{\n    a\n  }"}, {"type": "mutation", "name": "", "content": "{\n    updateRefund(offerID: $offerID, amount: $amount, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n      listApiKeys {\n        count\n        nodes {\n          ApiKeyId\n          expires\n        }\n      }\n    }"}, {"type": "mutation", "name": "($username: String!, $fullName: String!, $email: String!, $website: String!)", "content": "{\n  chatIds(chatId: $chatId, transport: $transport) {\n    transport,\n    user {\n      id,\n      username,\n      userId,\n      first_name,\n      last_name,\n      username,\n      language,\n      payload,\n      createdAt,\n      email,\n      chatIds {\n        chatId,\n        transport\n      }\n    }\n  }\n}"}, {"type": "query", "name": "OptionPollVotes($optionPollId: Int!)", "content": "{\n    isNameDuplicate(name: $name)\n  }"}, {"type": "query", "name": "RiderOrders", "content": "{\n    gravatars(first: 100, where: $where, orderBy: $orderBy, orderDirection: asc) {\n      id\n      owner\n      displayName\n      imageUrl\n    }\n  }"}, {"type": "query", "name": "Restaurant($id:String)", "content": "{\n    updateImportIdentitiesTask(data: $data, taskId: $taskId) {\n      task {\n        id\n        lastModified\n      }\n    }\n  }"}, {"type": "mutation", "name": "($input: UserCreateInput!)", "content": "{\n  login(password: $password, username: $username) {\n    token\n  }\n}"}, {"type": "query", "name": "Reviews($restaurant:String!)", "content": "{\n    updateClientProfilePicture(id: $id, profilePicture: $profilePicture) {\n      _id\n      firstName\n      lastName\n      email\n      phoneNumber\n      profilePicture\n    }\n  }"}, {"type": "query", "name": "SearchEnvironmentDataItems(\n      $filter: EnvironmentDataItemFilter\n      $environmentUri: String\n    )", "content": "{\n  createZone(zone:$zone){\n    _id\n    title\n    description\n    location{coordinates}\n    isActive\n  }\n}"}, {"type": "mutation", "name": "UpdateRiderLocation($latitude:String!,$longitude:String!)", "content": "{\n          profile{\n            _id\n            name\n            phone\n            phoneIsVerified\n            email\n            emailIsVerified\n            notificationToken\n            isOrderNotification\n            isOfferNotification\n            addresses{\n              _id\n              label\n              deliveryAddress\n              details\n              location{coordinates}\n              selected\n            }\n            favourite\n          }\n        }"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n      getEnvironment(environmentUri: $environmentUri) {\n        environmentUri\n        created\n        userRoleInEnvironment\n        description\n        name\n        label\n        AwsAccountId\n        dashboardsEnabled\n        notebooksEnabled\n        mlStudiosEnabled\n        pipelinesEnabled\n        warehousesEnabled\n        region\n        owner\n        tags\n        SamlGroupName\n        EnvironmentDefaultBucketName\n        EnvironmentDefaultIAMRoleArn\n        EnvironmentDefaultIAMRoleName\n        EnvironmentDefaultIAMRoleImported\n        resourcePrefix\n        subscriptionsEnabled\n        subscriptionsProducersTopicImported\n        subscriptionsConsumersTopicImported\n        subscriptionsConsumersTopicName\n        subscriptionsProducersTopicName\n        organization {\n          organizationUri\n          label\n          name\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n        dashboardsEnabled\n        notebooksEnabled\n        mlStudiosEnabled\n        pipelinesEnabled\n        warehousesEnabled\n        networks {\n          VpcId\n          privateSubnetIds\n          publicSubnetIds\n        }\n      }\n    }"}, {"type": "query", "name": "post($id: ID!, $userHasLogin: Boolean!)", "content": "{\n  orders(offset:$offset){\n    _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    cancelledAt\n    assignedAt\n    deliveredAt\n    acceptedAt\n    pickedAt\n    preparationTime\n  }\n}"}, {"type": "mutation", "name": "DeleteTodo($id: ID!)", "content": "{\n      listDatasetTableColumns(tableUri: $tableUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          columnUri\n          name\n          label\n          description\n          typeName\n          columnType\n          terms {\n            count\n            page\n            pages\n            nodes {\n              linkUri\n              term {\n                label\n                created\n                path\n                nodeUri\n              }\n            }\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "MotionPostAndComments ($id:Int!)", "content": "{\n    sessions {\n      me {\n        session(id: $sessionId) {\n          id\n          type\n          category\n          status\n          title\n          shortDescription\n          longDescription\n          primaryCategory\n          secondaryCategory\n          targetAudience\n          supportingArtifacts {\n            name\n            url\n          }\n          prerequisites\n          agenda\n          takeaways\n          canRecord\n          mentorship\n          whyAreYou\n          otherComments\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "editOption($optionInput:OptionInput)", "content": "{\n      getSavedQuery(queryUri: $queryUri) {\n        savedQueryUri\n        name\n        label\n        description\n        owner\n        description\n        sqlBody\n        label\n        created\n        tags\n      }\n    }"}, {"type": "query", "name": "GetTemplates", "content": "{\n      createTopic(organizationUri: $organizationUri, input: $input) {\n        topicUri\n        label\n        description\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "createBackupSite($siteName: String!, $siteUrl: String!)", "content": "{\n    functions(namespace: $namespace) {\n      name\n      namespace\n      labels\n      runtime\n      sourceType\n      status {\n        phase\n        reason\n        message\n      }\n    }\n    gitRepositories(namespace: $namespace) {\n      name\n      namespace\n      spec {\n        url\n        auth {\n          type\n          secretName\n        }\n      }\n    }\n  }"}, {"type": "subscription", "name": "onNewMSA", "content": "{\n        tip (\n            where: {\n\t\t\t\tnode: {\n\t\t\t\t\ttipStatus_some: {\n\t\t\t\t\t\tAND: [\n\t\t\t\t\t\t\t{ status: \"TipOpened\" },\n\t\t\t\t\t\t\t{ blockNumber: { number_gte: $startBlock } }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n        ){\n            mutation\n            node {\n                id\n                hash\n                finder\n                tipStatus(orderBy: id_DESC) {\n                    blockNumber {\n                        number\n                    }\n                    status\n                }\n            }\n        }\n    }"}, {"type": "query", "name": "GetTerm($nodeUri: String!)", "content": "{\n    addPost(input: $input) {\n      id\n      postId\n      slug\n      content\n      cover\n      likes\n      comments\n      user {\n        id\n        fullName\n        photo\n        totalLikes\n      }\n      tags {\n        id\n        tagName\n      }\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "AddPostReaction ($postId: Int!, $userId: Int!, $reaction: bpchar!)", "content": "{\n    finalizeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AddTodo($todoItem: String!)", "content": "{\n      createPost(input: $input) {\n        id\n        content\n      }\n    }"}, {"type": "query", "name": "AllEvents($offset: Int, $limit: Int)", "content": "{\n      getPostConnection(id: $postId) {\n        id\n        title\n      }\n    }"}, {"type": "mutation", "name": "DeleteCommentReaction ($commentId: uuid!, $userId: Int!, $reaction: bpchar!)", "content": "{\n    currentUser {\n      login\n    }\n    feed(type: $type, offset: $offset, limit: $limit) {\n      ...FeedEntry\n    }\n  }\n  ${FeedEntryFragmentDoc}"}, {"type": "mutation", "name": "CreateDataset($input: NewDatasetInput)", "content": "{\n    channel(id: $id) {\n      ...channelInfo\n      ...channelThreadConnection\n    }\n  }\n  ${channelInfoFragment}\n  ${channelThreadConnectionFragment}"}, {"type": "query", "name": "Configuration", "content": "{\n      updateStudent(input: $input) {\n        id\n        name\n        email\n        ssn\n        owner\n      }\n    }"}, {"type": "mutation", "name": "addComment($name: String!, $message: String!)", "content": "{\n    oAuth2Clients(namespace: $namespace) {\n      name\n      error {\n        code\n        description\n      }\n      spec {\n        secretName\n      }\n    }\n  }"}, {"type": "query", "name": "celoGovernanceTransactions($address: String!)", "content": "{\n    deleteApplicationLabel(applicationID: $id, key: \"scenarios\") {\n      key\n      value\n    }\n  }"}, {"type": "mutation", "name": "removeStageFromOrganizationRelationship($organizationId: ID!, $relationship: OrganizationRelationship!)", "content": "{\n  requestResetPassword(email: $email) {\n    message\n  }\n}"}, {"type": "mutation", "name": "resumeRedshiftCluster($clusterUri: String!)", "content": "{\n  posts(\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_motion_id: {_in: $onchainMotionIds}}}\n    order_by: {onchain_link: {onchain_motion_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_motion_id\n      onchain_motion(where: {}) {\n        id\n        motionStatus(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "mutation", "name": "UpdateTokenAllowance(\n    $token: String!\n    $from: String!\n    $to: String!\n    $value: String!\n  )", "content": "{\n        createPost(input: { id: \"P1\", type: \"Post\", category: \"T1\", content: \"Content #1\", slug: \"content-1\", rating: 4 }) {\n          id\n        }\n      }"}, {"type": "query", "name": "AllAccounts", "content": "{\n    setRuntimeLabel(runtimeID: $id, key: \"scenarios\", value: $scenarios) {\n      key\n      value\n    }\n  }"}, {"type": "query", "name": "TechCommitteeProposalPostAndComments ($id:Int!)", "content": "{\n      shareWorksheet(worksheetUri: $worksheetUri, input: $input) {\n        worksheetShareUri\n      }\n    }"}, {"type": "query", "name": "Config", "content": "{\n            getCrawlerStatus(datasetUri:$datasetUri,name:$name){\n                Name\n                AwsAccountId\n                region\n                status\n            }\n        }"}, {"type": "subscription", "name": "SubscriptionAssignRider($riderId:String!)", "content": "{\n      createNote(input: $input) {\n        id\n        content\n        secretNote\n        taskNotesId\n        task {\n          description\n        }\n      }\n    }"}, {"type": "mutation", "name": "disconnectUserFromRemoteClient ($data: DisconnectUserFromRemoteClientInput!)", "content": "{\n      removeConsumptionRoleFromEnvironment(\n        environmentUri: $environmentUri\n        consumptionRoleUri: $consumptionRoleUri\n      )\n    }"}, {"type": "subscription", "name": "onNewRFP", "content": "{\n    createGitRepository(namespace: $namespace, name: $name, spec: $spec) {\n      name\n    }\n  }"}, {"type": "mutation", "name": "addPostAndBountyMutation($onchainBountyId: Int!, $authorId: Int!, $proposerAddress: String!, $content: String!, $topicId: Int!, $typeId: Int!)", "content": "{\n          feed @client {\n            id\n          }\n        }"}, {"type": "query", "name": "GetContactMentionSuggestions($pagination: Pagination!, $where: Filter, $sort: [SortBy!])", "content": "{\n    topCommunities(pagination: $pagination, cat: $cat) {\n      data {\n        id\n        name\n        slug\n        logo\n        category {\n          id\n          name\n          catId\n          createdAt\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "DeployMarketplace(\n    $from: String\n    $token: String!\n    $version: String!\n    $autoWhitelist: Boolean\n  )", "content": "{\n      getAirflowClusterConsoleAccess(clusterUri: $clusterUri)\n    }"}, {"type": "query", "name": "getGithubRepositories", "content": "{\n    rpm(\n      graphId: $graphId\n      operationId: $operationId\n      to: $to\n      from: $from\n      traceFilters: $traceFilters\n    ) {\n      nodes {\n        startTime\n        count\n        errorCount\n      }\n      cursor\n    }\n  }"}, {"type": "query", "name": "getPaymentMethods($workspaceId: uuid!)", "content": "{\n    tokens(first: 100, skip: $skip) {\n      tokenAddress\n      symbol\n    }\n  }"}, {"type": "query", "name": "GetDataPipelineCredsLinux($DataPipelineUri: String!)", "content": "{\n      createUser(userInput:{\n          facebookId:$facebookId,\n          phone:$phone,\n          email:$email,\n          password:$password,\n          name:$name,\n          notificationToken:$notificationToken,\n          appleId:$appleId\n      }){\n          userId\n          token\n          tokenExpiration\n          name\n          email\n          phone\n          notificationToken\n      }\n    }"}, {"type": "subscription", "name": "addonsConfigurationEvent($namespace: String!)", "content": "{\n  toggleAvailability{\n    _id\n    isAvailable\n  }\n}"}, {"type": "mutation", "name": "RemoveUserFromEnvironment(\n      $environmentUri: String!\n      $userName: String!\n    )", "content": "{\n    pagedPosts(filter: $filter) {\n      totalCount\n    }\n  }"}, {"type": "query", "name": "Orders($page:Int,$rows:Int,$search:String)", "content": "{\n    applications {\n      data {\n        id\n        providerName\n        name\n        description\n        labels\n        status {\n          condition\n        }\n        packages {\n          totalCount\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "AllListings(\n    $first: Int\n    $after: String\n    $sort: String\n    $order: String\n    $search: String\n    $filters: [ListingFilterInput!]\n    $listingIds: [String]\n  )", "content": "{\n      listRedshiftClusterAvailableDatasetTables(\n        clusterUri: $clusterUri\n        filter: $filter\n      ) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        count\n        nodes {\n          datasetUri\n          tableUri\n          name\n          label\n          GlueDatabaseName\n          GlueTableName\n          S3Prefix\n          dataset {\n            S3BucketName\n          }\n        }\n      }\n    }"}, {"type": "mutation", "name": "CreateAddress($addressInput:AddressInput!)", "content": "{\n      updatePipelineStack(DataPipelineUri: $DataPipelineUri)\n    }"}, {"type": "mutation", "name": "LogSocialFollow($actionType: GrowthActionType!)", "content": "{MODELS}($data: [${inputName}]) {\n             objs: ${mutationName}(data: $data) ${fields}\n         }"}, {"type": "mutation", "name": "FinalizeOffer($offerID: String!, $from: String)", "content": "{\n    deleteCategory(id: $id) {\n      id\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n              createComment(blogId: \"${this.blogId}\", userId:\"${this.loggedInUser}\", content: \"${this.comment}\"){\n                content\n              }\n            }"}, {"type": "mutation", "name": "SignMessage($address: ID!, $message: String!)", "content": "{\n  configuration{\n    _id\n    currency\n    currency_symbol\n    delivery_charges\n  }\n}"}, {"type": "mutation", "name": "DeleteDatasetStorageLocation($locationUri: String)", "content": "{\n      updateGroupEnvironmentPermissions(input: $input) {\n        environmentUri\n      }\n    }"}, {"type": "query", "name": "C", "content": "{\n  selectAddress(id:$id){\n    _id\n    addresses{\n      _id\n      label\n      deliveryAddress\n      details\n      location{coordinates}\n      selected\n    }\n  }\n}"}, {"type": "query", "name": "GetOrganizationNotes($id: ID!, $pagination: Pagination)", "content": "{\n    addRoll(device: $device, dice: $dice) {\n      _id\n    }\n  }"}, {"type": "query", "name": "CurrentUserForProfile", "content": "{\n              onCreateTodo(\n                owner: \"${USERNAME1}\",\n              ) {\n                id\n                name\n                owner\n              }\n            }"}, {"type": "subscription", "name": "SubscriptionRiderLocation($riderId:String!)", "content": "{\n    communities(filter: $filter) {\n      entries {\n        id\n        title\n        desc\n        raw\n        logo\n        subscribersCount\n        insertedAt\n        updatedAt\n      }\n      pageNumber\n      pageSize\n      totalCount\n      totalPages\n    }\n  }"}, {"type": "query", "name": "getExpandE($id: ID!, $class: String!, $io: String!, $rid: String!, $page: Int = 1, $size: Int = 20)", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "query", "name": "Feed($type: FeedType!, $offset: Int, $limit: Int)", "content": "{\n    finalizeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "DeleteFood($id:String!)", "content": "{\n      getEnvironment(environmentUri: $environmentUri) {\n        environmentUri\n        created\n        userRoleInEnvironment\n        description\n        name\n        label\n        AwsAccountId\n        dashboardsEnabled\n        notebooksEnabled\n        mlStudiosEnabled\n        pipelinesEnabled\n        warehousesEnabled\n        region\n        owner\n        tags\n        SamlGroupName\n        EnvironmentDefaultBucketName\n        EnvironmentDefaultIAMRoleArn\n        EnvironmentDefaultIAMRoleName\n        EnvironmentDefaultIAMRoleImported\n        resourcePrefix\n        subscriptionsEnabled\n        subscriptionsProducersTopicImported\n        subscriptionsConsumersTopicImported\n        subscriptionsConsumersTopicName\n        subscriptionsProducersTopicName\n        organization {\n          organizationUri\n          label\n          name\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n        dashboardsEnabled\n        notebooksEnabled\n        mlStudiosEnabled\n        pipelinesEnabled\n        warehousesEnabled\n        networks {\n          VpcId\n          privateSubnetIds\n          publicSubnetIds\n        }\n      }\n    }"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n      createTodo(input: $input) {\n        id\n        groups\n        content\n      }\n    }"}, {"type": "query", "name": "Vendors", "content": "{\n  posts(\n    limit: $limit\n    where: {type: {id: {_eq: $postType}}, onchain_link: {onchain_motion_id: {_is_null: false}}}\n    order_by: {onchain_link: {onchain_motion_id: desc}}\n  ) {\n    id\n    title\n    author {\n      ...authorFields\n    }\n    created_at\n    updated_at\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n    type {\n      name\n      id\n    }\n    topic {\n      id\n      name\n    }\n    onchain_link {\n      id\n      onchain_motion_id\n      onchain_motion(where: {}) {\n        id\n        motionStatus(last: 1) {\n          id\n          status\n        }\n        preimage {\n          id\n          method\n        }\n      }\n      proposer_address\n    }\n  }\n}\n    ${AuthorFieldsFragmentDoc}"}, {"type": "mutation", "name": "EnableMessaging", "content": "{\n    currentUser {\n      login\n    }\n    feed(type: $type, offset: $offset, limit: $limit) {\n      ...FeedEntry\n    }\n  }\n  ${FeedEntryFragmentDoc}"}, {"type": "mutation", "name": "EditPoll($id: Int!, $blockEnd: Int!)", "content": "{\n  cosmosDistributionParameters(network: $network) {\n    base_proposer_reward\n    bonus_proposer_reward\n    community_tax\n  }\n}"}, {"type": "query", "name": "getCurrentUser", "content": "{\n    updateRefund(offerID: $offerID, amount: $amount, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "functions($namespace: String!)", "content": "{\n  files(where: $where, limit: $limit, offset: $offset, order_by: $order_by) {\n    id\n    bucketId\n    createdAt\n    updatedAt\n    name\n    size\n    mimeType\n    etag\n    isUploaded\n    uploadedByUserId\n  }\n}"}, {"type": "mutation", "name": "DeleteAddress($id:ID!)", "content": "{\n      listWorksheets(filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          worksheetUri\n          label\n          description\n          tags\n          owner\n          created\n          userRoleForWorksheet\n          SamlAdminGroupName\n        }\n      }\n    }"}, {"type": "subscription", "name": "referendumSubscription($startBlock: Int!)", "content": "{\n      updatePipelineStack(DataPipelineUri: $DataPipelineUri)\n    }"}, {"type": "query", "name": "getPlatformReaderSession($dashboardId: String)", "content": "{\n  orderStatusChanged(userId:$userId){\n    userId\n    origin\n    order{\n      _id\n    orderId\n    restaurant{\n      _id\n      name\n      image\n      slug\n      address\n      location {\n        coordinates\n      }\n    }\n    deliveryAddress{\n      location{coordinates}\n      deliveryAddress\n    }\n    items{\n      _id\n      title\n      food\n      description\n      quantity\n      variation{\n        _id\n        title\n        price\n        discounted\n      }\n      addons{\n        _id\n        options{\n          _id\n          title\n          description\n          price\n        }\n        title\n        description\n        quantityMinimum\n        quantityMaximum\n      }\n    }\n    user{\n      _id\n      name\n      phone\n    }\n    rider{\n      _id\n      name\n    }\n    review{\n      _id\n    }\n    paymentMethod\n    paidAmount\n    orderAmount\n    orderStatus\n    deliveryCharges\n    tipping\n    taxationAmount\n    orderDate\n    expectedTime\n    isPickedUp\n    createdAt\n    completionTime\n    preparationTime\n    }\n  }\n}"}, {"type": "mutation", "name": "addressUnlink($address: String!)", "content": "{\n    deleteComment (input: { id: $commentId }) {\n      result\n    }\n  }"}, {"type": "query", "name": "Comments ($postId: ID!)", "content": "{\n    updateTeamMember(\n      id: $id\n      fullName: $fullName\n      companyId: $companyId\n      role: $role\n    ) {\n      success\n      errors {\n        path\n        message\n      }\n      user {\n        id\n        fullName\n        profileUrl\n        roles {\n          id\n          name\n          companyId\n        }\n        teams {\n          id\n          name\n          companyId\n        }\n        companies {\n          id\n          name\n          logoUrl\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "editCommunity($input: EditCommunityInput!)", "content": "{\n    synthesizeSsml(ssml: $ssml, voice: $voice) {\n      url\n    }\n  }"}, {"type": "query", "name": "usersQuery(\n            $where: User_filter!\n            $domain: String!\n            $currentAddress: String!\n        )", "content": "{\n      updateTerm(nodeUri: $nodeUri, input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "mutation", "name": "GenerateAirbnbCode($identity: String!, $airbnbUserId: String!)", "content": "{\n    signup(email: $email, password: $password, name: $name) {\n      token\n      user {\n        id\n      }\n    }\n  }"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n    me {\n      user {\n        id\n        userId\n        fullName\n        email\n        bio\n        photo\n        socialIdtoken\n        totalLikes\n        createdAt\n      }\n      notificationsCount\n    }\n  }"}, {"type": "mutation", "name": "updateOrganizationById($id: ID!, $data: OrganizationUpdateInput!)", "content": "{\n        onUpdateMember {\n          id\n          name\n          createdAt\n          updatedAt\n        }\n      }"}, {"type": "mutation", "name": "UpdateDataset($datasetUri: String, $input: ModifyDatasetInput)", "content": "{\n  ridersByZone(id:$id){\n    _id\n    name\n    username\n    password\n    phone\n    available\n    zone{\n      _id\n      title\n    }\n  }\n}"}, {"type": "mutation", "name": "deleteCurrentUser", "content": "{\n  record(id: $id) {\n    id,\n    title,\n    type,\n    createdAt,\n    payload,\n    userId,\n    status,\n    transport,\n    latitude,\n    longitude,\n    user {\n      id,\n      username,\n      first_name,\n      last_name,\n      language,\n      email,\n      chatIds {\n        chatId,\n        transport\n      }\n    }\n  }\n}"}, {"type": "query", "name": "getOnchainMotions($startBlock: Int!)", "content": "{\n    createServiceBindingUsage(\n      createServiceBindingUsageInput: $createServiceBindingUsageInput\n      namespace: $namespace\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "selectSource ($value: String)", "content": "{\n        posts(where: {onchain_link: {onchain_treasury_proposal_id: {_eq: $id}}}) {\n            ...treasuryProposalPost\n        }\n    }\n    ${treasuryProposalPost}"}, {"type": "query", "name": "", "content": "{\n    marketplace {\n      offer(id: $offerId) {\n        listing {\n          ...basicListingFields\n        }\n        ...basicOfferFields\n      }\n    }\n  }\n  ${fragments.Listing.basic}\n  ${fragments.Offer.basic}"}, {"type": "mutation", "name": "updateTask ($id: ID!, $status: String, $title: String)", "content": "{\n    recommendMatches(\n      criteria: $criteria\n      exclude: $exclude\n      sourceUuids: $sourceUuids\n    ) {\n      jobId\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n    addAffiliate(affiliate: $affiliate, from: $from) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "createOrganizationNote($organizationId: ID!, $input: NoteInput!)", "content": "{\n    pagedTags(filter: $filter) {\n      entries {\n        id\n        title\n        color\n        thread\n        community {\n          id\n          title\n          logo\n        }\n      }\n      pageNumber\n      pageSize\n      totalCount\n      totalPages\n    }\n  }"}, {"type": "query", "name": "get$", "content": "{MODELS}($where: ${whereName}, $first: Int = ${DEFAULT_PAGE_SIZE}, $skip: Int, $sortBy: [${sortName}!]) {\n             objs: ${queryName}(where: $where, first: $first, skip: $skip, sortBy: $sortBy) ${fields}\n             meta: ${metaQueryName}(where: $where) { count }\n         }"}, {"type": "mutation", "name": "createBackupSite($siteName: String!, $siteUrl: String!)", "content": "{\n    secrets(namespace: $namespace) {\n      name\n      type\n      labels\n      creationTime\n      json\n    }\n  }"}, {"type": "query", "name": "Posts ($marketId: ID!, $minVotes: Int!)", "content": "{\n    updateEmployeeInvalidateTokens {\n      _id\n      firstName\n      lastName\n      email\n      phoneNumber\n      password\n      createdAt\n      tokenCount\n    }\n  }"}, {"type": "mutation", "name": "Login($email:String,$password:String,$type:String!,$appleId:String,$name:String,$notificationToken:String)", "content": "{\n    deleteApplicationLabel(applicationID: $id, key: \"scenarios\") {\n      key\n      value\n    }\n  }"}, {"type": "query", "name": "SearchPosts", "content": "{\n        poll(where: {post_id: {_eq: $postId}}) {\n            ...pollFields\n        }\n    }\n    ${pollFields}"}, {"type": "mutation", "name": "CREATE_GRAPH(\n    $name: String!\n    $traceFilters: [TraceFilter]\n    $to: DateTime\n    $from: DateTime\n  )", "content": "{\n    userPosts(pagination: $pagination) {\n      page\n      total\n      total_pages\n      data {\n        id\n        postId\n        slug\n        content\n        cover\n        likes\n        user {\n          id\n          fullName\n          photo\n          totalLikes\n        }\n        createdAt\n      }\n    }\n  }"}, {"type": "query", "name": "($filter: PagedFilter!)", "content": "{\n    updatePackage(id: $id, in: $in) {\n      name\n    }\n  }"}, {"type": "query", "name": "getSchema($id: String!)", "content": "{\n    updateClientSquareID(\n      squareCustomerId: $squareCustomerId\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n    ) {\n      squareCustomerId\n      firstName\n      lastName\n      email\n    }\n  }"}, {"type": "mutation", "name": "addReferendumIdToMotionMutation($motionId: Int!, $referendumId: Int!)", "content": "{\n    deployProxyFactory(from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "GetTransactions($addr: String!, $page: Int)", "content": "{\n              onCreateTodo {\n                id\n                name\n                owner\n              }\n            }"}, {"type": "query", "name": "FetchAccountAndApps", "content": "{\n      deleteDatasetTable(tableUri: $tableUri)\n    }"}, {"type": "mutation", "name": "CreateActiveUser($activeUsers: String!)", "content": "{\n    currentUser {\n      login\n      html_url\n    }\n    entry(repoFullName: $repoFullName) {\n      id\n      postedBy {\n        login\n        html_url\n      }\n      createdAt\n      comments(limit: $limit, offset: $offset) {\n        ...CommentsPageComment\n      }\n      commentCount\n      repository {\n        full_name\n        html_url\n        ... on Repository {\n          description\n          open_issues_count\n          stargazers_count\n        }\n      }\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "query", "name": "HeroParentTypeDependentField($episode: Episode)", "content": "{\n      restaurant(id:$id)\n      {\n      _id\n      orderId\n      orderPrefix\n      slug\n      name\n      image\n      address\n      location{coordinates}\n      deliveryBounds{\n        coordinates\n      }\n      username\n      password\n      deliveryTime\n      minimumOrder\n      tax\n      isAvailable\n      stripeDetailsSubmitted\n      openingTimes{\n        day\n        times{\n          startTime\n          endTime\n        }\n      }\n      owner{\n        _id\n        email\n      }\n    }\n}"}, {"type": "query", "name": "oasisTransactions($address: String!, $startingPage: Float, $pageSize: Float)", "content": "{\n        createPost(\n          input: { id: \"P1\", type: \"Post\", category: \"T1\", content: \"Content #1\", slug: \"content-1\", rating: 4 }\n          condition: { category: { eq: \"T\" } }\n        ) {\n          id\n        }\n      }"}, {"type": "mutation", "name": "DeleteOption($id:String!,$restaurant:String!)", "content": "{\n        onDeleteMember {\n          id\n          name\n          createdAt\n          updatedAt\n        }\n      }"}, {"type": "mutation", "name": "changeEmail($email: String!, $password: String!)", "content": "{\n      sendResetPasswordEmail(username: $username) {\n        result\n      }\n    }"}, {"type": "query", "name": "GRAPH_LIST(\n    $traceFilters: [TraceFilter]\n    $to: DateTime\n    $from: DateTime\n  )", "content": "{\n      inviteUser(input: $input) {\n        userName\n        userRoleInOrganization\n        created\n      }\n    }"}, {"type": "query", "name": "recommendedMerge($page: Int, $pageSize: Int)", "content": "{\n      importRedshiftCluster(\n        environmentUri: $environmentUri\n        clusterInput: $clusterInput\n      ) {\n        clusterUri\n        name\n        label\n        created\n      }\n    }"}, {"type": "subscription", "name": "OnUpdateMember", "content": "{\n  updatePlugin(\n    plugin: $plugin,\n    url: $url,\n    version: $version,\n    initialConfiguration: $initialConfiguration,\n    chatbotId: $chatbotId\n  ) {\n    id,\n    plugin,\n    filename,\n    version\n  }\n}"}, {"type": "subscription", "name": "OrderStatusChanged($userId:String!)", "content": "{\n                session {\n                  id\n                  user {\n                    id\n                    minecraftId\n                  }\n                }\n              }"}, {"type": "mutation", "name": "DeployIdentityEventsContract($from: String!)", "content": "{\n    tags(filter: $filter) {\n      totalCount\n    }\n  }"}, {"type": "query", "name": "aggSearch", "content": "{\n    finalizeOffer(offerID: $offerID, from: $from) {\n      id\n    }\n  }"}, {"type": "query", "name": "AccountTokenBalance($account: ID!, $token: String!)", "content": "{\n      createGlossary(input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "query", "name": "GetDashboardTotal($startingDate: String, $endingDate: String)", "content": "{\n    submitComment(repoFullName: $repoFullName, commentContent: $commentContent) {\n      ...CommentsPageComment\n    }\n  }\n  ${CommentsPageCommentFragmentDoc}"}, {"type": "query", "name": "OptionPoll ($postId: Int!)", "content": "{\n      getRedshiftCluster(clusterUri: $clusterUri) {\n        clusterUri\n        environmentUri\n        name\n        label\n        description\n        tags\n        owner\n        created\n        updated\n        AwsAccountId\n        region\n        clusterArn\n        clusterName\n        created\n        databaseName\n        databaseUser\n        datahubSecret\n        masterUsername\n        masterSecret\n        masterDatabaseName\n        nodeType\n        numberOfNodes\n        kmsAlias\n        status\n        subnetGroupName\n        CFNStackName\n        CFNStackStatus\n        CFNStackArn\n        port\n        endpoint\n        IAMRoles\n        subnetIds\n        vpc\n        securityGroupIds\n        userRoleForCluster\n        userRoleInEnvironment\n        imported\n        SamlGroupName\n        organization {\n          organizationUri\n          label\n          name\n        }\n        environment {\n          environmentUri\n          label\n          name\n        }\n        stack {\n          stack\n          status\n          stackUri\n          targetUri\n          accountid\n          region\n          stackid\n          link\n          outputs\n          resources\n        }\n      }\n    }"}, {"type": "mutation", "name": "CreateGlossary($input: CreateGlossaryInput)", "content": "{\n    keyCreate(graphId: $graphId) {\n      id\n      secret\n      prefix\n      createdAt\n    }\n  }"}, {"type": "mutation", "name": "UniswapExchangeTemplate($from: String!)", "content": "{\n  organization_Update(input: $input) {\n    id\n    description\n  }\n}"}, {"type": "query", "name": "listRedshiftClusterAvailableDatasetTables(\n      $clusterUri: String!\n      $filter: DatasetTableFilter\n    )", "content": "{\n    identity(id: $id) {\n      id\n      firstName\n      lastName\n      fullName\n      description\n      avatarUrl\n      avatarUrlExpanded\n      strength\n      attestations\n\n      verifiedAttestations {\n        id\n        rawData\n        properties {\n          type\n          value\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "PreviewTable($tableUri: String!, $queryExecutionId: String)", "content": "{\n    role(name: $name, namespace: $namespace) {\n      name\n      rules {\n        apiGroups\n        resources\n        verbs\n      }\n    }\n  }"}, {"type": "query", "name": "HumanWithNullHeight", "content": "{\n        user: authenticatedUser { ${USER_FIELDS} }\n    }"}, {"type": "mutation", "name": "", "content": "{\n  updateSecret(appID: $appId, secret: $secret) {\n    name\n  }\n}"}, {"type": "mutation", "name": "resetUser ($data: ResetUserInput!)", "content": "{\n          feed {\n            ...FeedWithRepository\n          }\n        }\n\n        ${feedWithRepository}"}, {"type": "query", "name": "Stats", "content": "{\n  jobRole_Create(contactId: $contactId, input: $input) {\n    ...JobRole\n    organization {\n      id\n      name\n    }\n  }\n}\n    ${JobRoleFragmentDoc}"}, {"type": "mutation", "name": "TransitionToArrangingPayment", "content": "{\n    joinNetwork(agentId: $agentId)\n  }"}, {"type": "query", "name": "pos", "content": "{\n  __typename\n  insert_onchain_links(objects: {onchain_bounty_id: $onchainBountyId, proposer_address: $proposerAddress, post: {data: {author_id: $authorId, content: $content, topic_id: $topicId, type_id: $typeId}}}) {\n    returning {\n      id\n    }\n  }\n}"}, {"type": "subscription", "name": "Deployments($namespace: String!)", "content": "{\n  subscriptionZoneOrders(zoneId:$zoneId){\n        zoneId\n        origin\n        order{\n          _id\n          createdAt\n          acceptedAt\n          expectedTime\n          pickedAt\n          assignedAt\n          isPickedUp\n          deliveredAt\n          deliveryCharges\n          orderId\n          restaurant{\n            _id\n            name\n            address\n            location{coordinates}\n          }\n          deliveryAddress{\n            location{coordinates}\n            deliveryAddress\n            label\n            details\n          }\n          items{\n            _id\n            title\n            food\n            description\n            quantity\n            variation{\n              _id\n              title\n              price\n            }\n            addons{\n              _id\n              options{\n                _id\n                title\n                price\n              }\n              title\n              description\n              quantityMinimum\n              quantityMaximum\n            }\n            isActive\n            createdAt\n          }\n          user{\n            _id\n            name\n            phone\n          }\n          paymentMethod\n          paidAmount\n          orderAmount\n          paymentStatus\n          orderStatus\n          tipping\n          taxationAmount\n          reason\n          isRiderRinged\n          preparationTime\n          rider{\n            _id\n            name\n            username\n          }\n        }\n      }\n    }"}, {"type": "query", "name": "Coupons", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            topic: {\n                id: {\n                    _eq: $postTopic\n                }\n            },\n            onchain_link: {\n                onchain_proposal_id: {\n                    _is_null: false\n                },\n                onchain_referendum_id: {\n                    _is_null: true\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                onchain_proposal_id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_proposal_id\n                onchain_proposal(where: {NOT: {proposalStatus_some: {OR: [{status: \"Tabled\"}, {status: \"Cleared\"}]}}}) {\n                    id\n                    proposalStatus(last: 1) {\n                        id\n                        status\n                    }\n                    preimage {\n                        id\n                        method\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n    ${authorFields}"}, {"type": "query", "name": "ChatListQuery($first: Int = 10)", "content": "{\n    function(name: $name, namespace: $namespace) {\n      name\n      namespace\n      UID\n      labels\n      source\n      dependencies\n      runtime\n      sourceType\n      baseDir\n      reference\n      replicas {\n        min\n        max\n      }\n      resources {\n        requests {\n          memory\n          cpu\n        }\n        limits {\n          memory\n          cpu\n        }\n      }\n      buildResources {\n        requests {\n          memory\n          cpu\n        }\n        limits {\n          memory\n          cpu\n        }\n      }\n      env {\n        name\n        value\n        valueFrom {\n          type\n          name\n          key\n          optional\n        }\n      }\n      status {\n        phase\n        reason\n        message\n      }\n    }\n  }"}, {"type": "query", "name": "Orders", "content": "{\n    post (slug: $slug) {\n      id\n      title\n      slug\n      body\n      lgImageUrl\n      ...PostVotes\n      ...PostActions\n      ...PostHeader\n      market {\n        ...MarketHeader\n      }\n    }\n  }\n  ${PostVotes.fragments.post}\n  ${PostActions.fragments.post}\n  ${PostHeader.fragments.post}\n  ${MarketHeader.fragments.market}"}, {"type": "mutation", "name": "deleteBackupSnapshotRecord($snapshotID: Int!)", "content": "{\n      requestDashboardShare(\n        dashboardUri: $dashboardUri\n        principalId: $principalId\n      ) {\n        shareUri\n        status\n      }\n    }"}, {"type": "query", "name": "", "content": "{\n  subscriptionOrder(id:$id){\n      _id\n      orderStatus\n      rider{\n          _id\n      }\n      completionTime\n  }\n}"}, {"type": "query", "name": "ListDatasetShareObjects(\n      $datasetUri: String!\n      $filter: ShareObjectFilter\n    )", "content": "{\n    sessionState {\n      isValid\n      user {\n        id\n        geoCity\n        nickname\n        avatar\n        editableCommunities {\n          entries {\n            ${F.community}\n          }\n          totalCount\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "AllMotionPosts($postType: Int!, $limit: Int! = 5 )", "content": "{\n        obj: authenticateUserWithPhoneAndPassword(data: { phone: $phone, password: $password }) {\n            item {\n                id\n            }\n            token\n        }\n    }"}, {"type": "subscription", "name": "onCommentAdded($repoFullName: String!)", "content": "{\n  nodes(ids: $prIds) {\n    ...on PullRequest {\n      id\n      state\n    }\n  }\n}"}, {"type": "query", "name": "secret($namespace: String!, $name: String!)", "content": "{\n  viewer {\n    login\n    avatarUrl\n    name\n  }\n}"}, {"type": "mutation", "name": "importAirflowCluster(\n      $environmentUri: String!\n      $clusterInput: ImportClusterInput!\n    )", "content": "{\n        objs: allBillingProperties(where: $where, orderBy: $orderBy, first: $first, skip: $skip) {\n            id\n            address\n        }\n    }"}, {"type": "query", "name": "Comment($repoFullName: String!, $limit: Int, $offset: Int)", "content": "{\n        rolls {\n            _id,\n            device,\n            dice,\n            results {\n                coverImg,\n                name,\n                result,\n                calculation,\n                equation\n            },\n            createdAt\n        }\n    }"}, {"type": "query", "name": "cosmosStakingParameters($network: String!)", "content": "{\n  tags {\n    id\n    name\n  }\n}"}, {"type": "query", "name": "Auth($wallet: String!)", "content": "{\n  paymentMethods(\n    where: {workspaceId: {_eq: $workspaceId}}\n    order_by: {createdAt: desc}\n  ) {\n    ...getPaymentMethods\n  }\n}\n    ${GetPaymentMethodsFragmentDoc}"}, {"type": "query", "name": "AllAccounts", "content": "{\n    restaurantOrders{\n      _id\n      orderId\n      restaurant{\n        _id\n        name\n        image\n        address\n        location{coordinates}\n      }\n      deliveryAddress{\n        location{coordinates}\n        deliveryAddress\n        details\n        label\n      }\n      items{\n        _id\n        title\n        description\n        image\n        quantity\n        variation{\n          _id\n          title\n          price\n          discounted\n        }\n        addons{\n          _id\n          options{\n            _id\n            title\n            description\n            price\n          }\n          description\n          title\n          quantityMinimum\n          quantityMaximum\n        }\n        specialInstructions\n        isActive\n        createdAt\n        updatedAt\n      }\n      user{\n        _id\n        name\n        phone\n        email\n      }\n      paymentMethod\n      paidAmount\n      orderAmount\n      orderStatus\n      tipping\n      taxationAmount\n      status\n      paymentStatus\n      reason\n      isActive\n      createdAt\n      orderDate\n      deliveryCharges\n      isPickedUp\n      preparationTime\n      acceptedAt\n      isRinged\n      rider{\n        _id\n        name\n        username\n        available\n      }\n    }\n}"}, {"type": "subscription", "name": "tipSubscription($startBlock: Int!)", "content": "{\n    updateComment (input: { id: $commentId, body: $body }) {\n      comment {\n        ...CommentForm\n      }\n    }\n  }\n  ${CommentForm.fragments.comment}"}, {"type": "mutation", "name": "EditAddress($addressInput:AddressInput!)", "content": "{\n        auth: authenticateUserWithPassword(email: $identity, password: $secret) {\n            user: item {\n                id\n            }\n        }\n    }"}, {"type": "mutation", "name": "deleteDomain($domain: String!)", "content": "{\n    a\n  }"}, {"type": "subscription", "name": "OnCreateTask", "content": "{\n    me {\n      _id\n      email\n      name\n    }\n    chats(first: $first) {\n      count\n      edges {\n        updatedAt\n        _id\n        lastMessage\n        users {\n          _id\n          email\n          name\n        }\n        messages {\n          message\n          createdAt\n          user {\n            _id\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "TreasuryProposalPostAndComments ($id:Int!)", "content": "{\n    directMessageThread(id: $id) {\n      ...directMessageThreadInfo\n      ...directMessageThreadMessageConnection\n    }\n  }\n  ${directMessageThreadInfoFragment}\n  ${directMessageThreadMessageConnectionFragment}"}, {"type": "query", "name": "HeroAndFriendsNames($episode: Episode)", "content": "{\n      updateTodo(input: $input) {\n        id\n        name\n        description\n        level\n        owner\n        sharedOwners\n        status\n      }\n    }"}, {"type": "mutation", "name": "", "content": "{\n    labelDefinition(key: $key) {\n      key\n      schema\n    }\n  }"}, {"type": "query", "name": "Configuration", "content": "{\n      getNetwork(vpcUri: $vpcUri) {\n        vpcUri\n        VpcId\n        label\n        description\n        tags\n        owner\n        SamlGroupName\n        privateSubnetIds\n        privateSubnetIds\n      }\n    }"}, {"type": "query", "name": "Functions($namespace: String!)", "content": "{\n    community(id: $id) {\n      ...communityInfo\n      ...communityChannelConnection\n    }\n  }\n  ${communityInfoFragment}\n  ${communityChannelConnectionFragment}"}, {"type": "mutation", "name": "saveRestaurantToken($token:String, $isEnabled:Boolean)", "content": "{\n    deployIdentity(\n      from: $from\n      attestations: $attestations\n      profile: $profile\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "Login($facebookId:String,$email:String,$password:String,$type:String!,$appleId:String,$name:String,$notificationToken:String)", "content": "{\n    hero(episode: $episode) {\n      name @skip(if: $skipName)\n    }\n  }"}, {"type": "mutation", "name": "addPhoneToContact($contactId: ID!, $input: PhoneNumberInput!)", "content": "{\n      getPostSecretFieldIAM(id: $id) {\n        id\n        title\n      }\n    }"}, {"type": "query", "name": "PollVotes ($pollId: Int!)", "content": "{\n    withdrawListing(\n      listingID: $listingID\n      target: $target\n      reason: $reason\n      from: $from\n    ) {\n      id\n    }\n  }"}, {"type": "mutation", "name": "AddData(\n    $data: String!\n    $from: String!\n    $listingID: String\n    $offerID: String\n  )", "content": "{\n  deleteAuthUserRoles(\n    where: {_and: [{userId: {_eq: $userId}}, {role: {_in: $roles}}]}\n  ) {\n    affected_rows\n  }\n}"}, {"type": "query", "name": "getWorkspaceMembers($workspaceId: uuid!)", "content": "{\n        onCreateTodo {\n          id\n          description\n          name\n        }\n      }"}, {"type": "mutation", "name": "RemoveUserFromEnvironment(\n      $environmentUri: String!\n      $userName: String!\n    )", "content": "{\n            result: signinAsUser(data: $data) { user { id } token }\n        }"}, {"type": "query", "name": "PERSON($id: ID!)", "content": "{\n      updateTodo(input: $input) {\n        id\n        description\n        name\n      }\n    }"}, {"type": "mutation", "name": "", "content": "{\n    deleteServiceInstance(name: $name, namespace: $namespace) {\n      name\n    }\n  }"}, {"type": "query", "name": "Configuration", "content": "{\n    messaging(id: \"currentAccount\") {\n      id\n      enabled\n      synced\n      syncProgress\n      pubKey\n      pubSig\n    }\n  }"}, {"type": "mutation", "name": "RemoveUserFromEnvironment(\n      $environmentUri: String!\n      $userName: String!\n    )", "content": "{\n        devices {\n            _id\n            mac,\n            name,\n            ownerId,\n            followerIds\n        }\n    }"}, {"type": "query", "name": "GetWorksheet($worksheetUri: String!)", "content": "{query}"}, {"type": "mutation", "name": "CreateDataset($input: NewDatasetInput)", "content": "{\n    rpm(\n      graphId: $graphId\n      operationId: $operationId\n      to: $to\n      from: $from\n      traceFilters: $traceFilters\n    ) {\n      nodes {\n        startTime\n        count\n        errorCount\n      }\n      cursor\n    }\n  }"}, {"type": "query", "name": "GetStorageSettings($appId: uuid!)", "content": "{\n    createTask(listId: $listId, tasks: $tasks) {\n      errors {\n        path\n        message\n      }\n      success\n    }\n  }"}, {"type": "query", "name": "RidersByZone($id:String!)", "content": "{\n      getSavedQuery(queryUri: $queryUri) {\n        savedQueryUri\n        name\n        label\n        description\n        owner\n        description\n        sqlBody\n        label\n        created\n        tags\n      }\n    }"}, {"type": "mutation", "name": "DeleteAddon($id:String!,$restaurant:String!)", "content": "{\n    addMfaDevice(phoneNumber: $phoneNumber, email: $email, type: $type) {\n      sessionId\n      error\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n      getSagemakerNotebookPresignedUrl(notebookUri: $notebookUri)\n    }"}, {"type": "query", "name": "Foods($page:Int)", "content": "{\n  resetPassword(password:$password,email:$email){\n    result\n  }\n}"}, {"type": "query", "name": "GetTenantName", "content": "{\n  emailRemoveFromOrganizationById(organizationId: $organizationId, id: $id) {\n    result\n  }\n}"}, {"type": "subscription", "name": "OnCreateTodo", "content": "{\n    foods(page:$page){\n      _id\n      title\n      description\n      stock\n      tag\n      img_url\n      variations{\n        _id\n        title\n        price\n        discounted\n        addons{\n          _id\n          title\n          description\n          quantity_minimum\n          quantity_maximum\n          options{\n            _id\n            title\n            price\n          }\n        }\n      }\n      category{\n          _id\n          title\n      }\n    }\n  }"}, {"type": "mutation", "name": "CreateAddress($addressInput:AddressInput!)", "content": "{\n  rider(id:$id){\n    _id\n    location {coordinates}\n  }\n}"}, {"type": "query", "name": "RestaurantByOwner($id:String)", "content": "{\n        posts(limit: $limit, where: {\n            type: {\n                id: {\n                    _eq: $postType\n                }\n            },\n            topic: {\n                id: {\n                    _eq: $postTopic\n                }\n            },\n            onchain_link: {\n                onchain_tip_id: {\n                    _is_null: false\n                }\n            }\n        }, order_by: {\n            onchain_link: {\n                id: desc\n            }\n        }) {\n            id\n            title\n            author {\n                ...authorFields\n            }\n            created_at\n            updated_at\n            comments_aggregate {\n                aggregate {\n                    count\n                }\n            }\n            type {\n                name\n                id\n            }\n            topic {\n                id\n                name\n            }\n            onchain_link {\n                id\n                onchain_tip_id\n                onchain_tip(where: {NOT: {tipStatus_some: {OR: [{status: \"TipClosed\"}, {status: \"TipClosing\"}, {status: \"TipRetracted\"}]}}}) {\n                    id\n                    reason\n                    tipStatus(last: 1) {\n                        id\n                        status\n                    }\n                }\n                proposer_address\n            }\n        }\n    }\n${authorFields}"}, {"type": "mutation", "name": "SaveStripeConfiguration($configurationInput:StripeConfigurationInput!)", "content": "{\n  regions(order_by: {city: asc}) {\n    ...PrefetchNewAppRegions\n  }\n  plans(order_by: {sort: asc}) {\n    ...PrefetchNewAppPlans\n  }\n  workspaces {\n    ...PrefetchNewAppWorkspace\n  }\n}\n    ${PrefetchNewAppRegionsFragmentDoc}\n${PrefetchNewAppPlansFragmentDoc}\n${PrefetchNewAppWorkspaceFragmentDoc}"}, {"type": "query", "name": "Application($applicationId: ID!, $apiPackageId: ID!)", "content": "{\n                  result: deleteCompanies(query: \"name BEGINSWITH 'deleteMe'\")\n                }"}, {"type": "mutation", "name": "VerifyAirbnbCode($identity: String!, $airbnbUserId: String!)", "content": "{\n  countries(order_by: {name: asc}) {\n    code\n    name\n  }\n}"}, {"type": "query", "name": "bindableResources($namespace: String!)", "content": "{\n    serviceBindingUsageEvent(\n      namespace: $namespace\n      resourceKind: $resourceKind\n      resourceName: $resourceName\n    ) {\n      type\n      serviceBindingUsage {\n        name\n        parameters {\n          envPrefix {\n            name\n          }\n        }\n        serviceBinding {\n          name\n          serviceInstanceName\n          secret {\n            name\n            data\n          }\n        }\n      }\n    }\n  }"}, {"type": "query", "name": "", "content": "{\n    createListing(\n      from: $from\n      deposit: $deposit\n      depositManager: $depositManager\n      autoApprove: $autoApprove\n      data: $data\n      unitData: $unitData\n      fractionalData: $fractionalData\n      version: $version\n    ) {\n      id\n    }\n  }"}, {"type": "query", "name": "applications($filter: [LabelFilter!])", "content": "{\n      deleteTerm(nodeUri: $nodeUri)\n    }"}, {"type": "mutation", "name": "(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $phoneNumber: String\n  )", "content": "{\n    updateClientProfilePicture(id: $id, profilePicture: $profilePicture) {\n      _id\n      firstName\n      lastName\n      email\n      phoneNumber\n      profilePicture\n    }\n  }"}, {"type": "query", "name": "Rider($id:String)", "content": "{\n  oasisValidators {\n    address\n    name\n    commission\n    website\n    iconUrl\n    keybase\n    email\n    twitter\n    active\n  }\n}"}, {"type": "mutation", "name": "UpdateListing(\n    $listingID: String!\n    $additionalDeposit: String\n    $from: String\n    $data: NewListingInput\n    $autoApprove: Boolean\n  )", "content": "{\n    posts (first: ${POSTS_PER_PAGE}, filter: { votes: { comparator: GREATER_THAN, value: 0 } }, after: $after, orderBy: [{ createdAt: DESC }]) {\n      ...PostList\n    }\n  }\n  ${PostList.fragments.postList}"}, {"type": "mutation", "name": "AdjustItemQuantity($id: ID!, $quantity: Int!)", "content": "{\n        obj: authenticateUserWithPhoneAndPassword(data: { phone: $phone, password: $password }) {\n            item {\n                id\n            }\n        }\n    }"}, {"type": "query", "name": "ListOrg($filter: OrganizationFilter)", "content": "{\n      listEnvironmentGroups(environmentUri: $environmentUri, filter: $filter) {\n        count\n        page\n        pages\n        hasNext\n        hasPrevious\n        nodes {\n          groupUri\n          invitedBy\n          created\n          description\n        }\n      }\n    }"}, {"type": "query", "name": "FetchAccountAndApps", "content": "{\n      createPostIAMWithKeys(input: { title: \"Hello, World!\", type: \"Post\", date: \"2019-01-01T00:00:00Z\" }) {\n        id\n        title\n        type\n        date\n      }\n    }"}, {"type": "query", "name": "getBackupSite ($repoID: String)", "content": "{\n        result: exportPaymentsToExcel(data: $data) { status, linkToFile }\n    }"}, {"type": "query", "name": "", "content": "{\n    removeAddonsConfigurationURLs(\n      name: $name\n      namespace: $namespace\n      urls: $urls\n    ) {\n      name\n    }\n  }"}, {"type": "query", "name": "getcomments", "content": "{\n    updateCategory(id: $id, title: $title) {\n      id\n    }\n  }"}, {"type": "subscription", "name": "OnCreatePost", "content": "{\n        devices {\n            _id\n            mac,\n            name,\n            ownerId,\n            followerIds\n        }\n    }"}, {"type": "query", "name": "($id: ID!)", "content": "{\n      archiveDataset(datasetUri: $datasetUri)\n    }"}, {"type": "mutation", "name": "removeContactJobRole($contactId: ID!, $roleId: ID!)", "content": "{\n      updateTodo(input: $input) {\n        id\n        name\n        description\n        level\n        owner\n        sharedOwners\n        status\n      }\n    }"}, {"type": "query", "name": "serviceClassFilters", "content": "{\n      removeGroupFromEnvironment(\n        environmentUri: $environmentUri\n        groupUri: $groupUri\n      ) {\n        environmentUri\n      }\n    }"}, {"type": "query", "name": "Orders($offset:Int)", "content": "{\n  addressUnlink(address: $address) {\n    message\n    token\n  }\n}"}, {"type": "query", "name": "AllTipPosts($postType: Int!, $postTopic: Int!, $limit: Int! = 5 )", "content": "{\n      updateDataPipeline(DataPipelineUri: $DataPipelineUri, input: $input) {\n        DataPipelineUri\n        name\n        label\n        created\n        tags\n      }\n    }"}, {"type": "query", "name": "GetFreeAndActiveProjects($userId: uuid!)", "content": "{\n  editTipping(tippingInput:$tippingInput){\n            _id\n            tipVariations\n            enabled\n              }\n            }"}, {"type": "query", "name": "OptionPollVotes ($optionPollId: Int!)", "content": "{\n        __typename\n        insert_comment_reactions(objects: {comment_id: $commentId, user_id: $userId, reaction: $reaction}) {\n            affected_rows\n        }\n    }"}, {"type": "subscription", "name": "subscriptionSubscription(\n    $ownerName: String!\n    $namespace: String!\n  )", "content": "{\n  deleteTasks(ids: $ids, all: $all, queue: $queue)\n}"}, {"type": "query", "name": "TechCommitteeProposalPostAndComments ($id:Int!)", "content": "{\n    namespace(name: $name) {\n      name\n      labels\n      applications\n      pods {\n        name\n        status\n      }\n      deployments {\n        name\n        status {\n          replicas\n          readyReplicas\n        }\n      }\n    }\n\n    resourceQuotas(namespace: $name) {\n      name\n      json\n      spec {\n        hard {\n          limits {\n            memory\n          }\n          requests {\n            memory\n          }\n          pods\n        }\n      }\n    }\n\n    limitRanges(namespace: $name) {\n      name\n      json\n      spec {\n        limits {\n          type\n          max {\n            memory\n            cpu\n          }\n          default {\n            memory\n            cpu\n          }\n          defaultRequest {\n            memory\n            cpu\n          }\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "archiveContact($id: ID!)", "content": "{\n        result: exportPaymentsToExcel(data: $data) { status, linkToFile }\n    }"}, {"type": "mutation", "name": "update$", "content": "{\n    pagedUsers(filter: $filter) {\n      totalCount\n    }\n  }"}, {"type": "query", "name": "PrefetchNewApp", "content": "{\n    sendOtpToEmail(email: $email, otp: $otp) {\n      result\n    }\n  }"}, {"type": "query", "name": "($chatbotId: String)", "content": "{\n        result: signinAsUser(data: $data) { user { id } token }\n    }"}, {"type": "query", "name": "GetDatasetETLCredentials($datasetUri: String!)", "content": "{\n      browseDataPipelineRepository(input: $input)\n    }"}, {"type": "query", "name": "MyFeed", "content": "{\n          searchBlogs(aggregates: [{ name: \"Terms\", type: terms, field: secret }]) {\n            aggregateItems {\n              name\n              result {\n                ... on SearchableAggregateBucketResult {\n                  buckets {\n                    doc_count\n                    key\n                  }\n                }\n              }\n            }\n          }\n        }"}, {"type": "subscription", "name": "proposalSubscription($startBlock: Int!)", "content": "{\n  phoneNumberMergeToContact(contactId: $contactId, input: $input) {\n    ...PhoneNumber\n    label\n  }\n}\n    ${PhoneNumberFragmentDoc}"}, {"type": "mutation", "name": "removeOrganizationRelationship($organizationId: ID!, $relationship: OrganizationRelationship!)", "content": "{\n        deleteCategory(id:$id,restaurant:$restaurant){\n                _id\n                categories{\n                  _id\n                  title\n                  foods{\n                    _id\n                    title\n                    description\n                    variations{\n                      _id\n                      title\n                      price\n                      discounted\n                      addons\n                    }\n                    image\n                    isActive\n                    createdAt\n                    updatedAt\n                  }\n                  createdAt\n                  updatedAt\n                }\n        }\n      }"}, {"type": "mutation", "name": "SendMessage($to: String!, $content: String, $media: [MediaInput])", "content": "{\n        posts(where: {onchain_link: {onchain_motion_id: {_eq: $id}}}) {\n            ...motionPost\n        }\n    }\n    ${motionPost}"}, {"type": "query", "name": "celoSystemBalances", "content": "{\n      createGlossary(input: $input) {\n        nodeUri\n        label\n        path\n        readme\n        created\n        owner\n      }\n    }"}, {"type": "query", "name": "getDatasetTableProfilingReport($jobUri: String!)", "content": "{\n    sendFromWallet(from: $from, to: $to, value: $value) {\n      id\n    }\n  }"}, {"type": "query", "name": "getUserThreadConnection(\n    $id: ID\n    $after: String\n    $kind: ThreadConnectionType\n  )", "content": "{\n      createPostIAMWithKeys(input: { title: \"Hello, World!\", type: \"Post\", date: \"2019-01-01T00:00:00Z\" }) {\n        id\n        title\n        type\n        date\n      }\n    }"}, {"type": "query", "name": "GetAuthenticationSettings($appId: uuid!)", "content": "{\n    web3 {\n      metaMaskAccount {\n        id\n      }\n    }\n    messaging(id: \"defaultAccount\") {\n      id\n      pubKey\n      pubSig\n      enabled\n      isKeysLoading\n      synced\n      syncProgress\n    }\n  }"}, {"type": "query", "name": "($id: ID!, $filter: PagedFilter!)", "content": "{\n    userLists {\n      id\n      lists {\n        id\n        name\n        sections {\n          id\n          name\n        }\n      }\n    }\n  }"}, {"type": "mutation", "name": "AcceptOrder($_id:String!, $time:String)", "content": "{\n  restaurant(id:$id,slug:$slug){\n    _id\n    orderId\n    orderPrefix\n    name\n    image\n    slug\n    address\n    location{coordinates}\n    deliveryTime\n    minimumOrder\n    tax\n    reviewData{\n      total\n      ratings\n      reviews{\n        _id\n        order{\n          user{\n            _id\n            name\n            email\n          }\n        }\n        rating\n        description\n        createdAt\n      }\n    }\n    categories{\n      _id\n      title\n      foods{\n        _id\n        title\n        image\n        description\n        variations{\n          _id\n          title\n          price\n          discounted\n          addons\n        }\n      }\n    }\n    options{\n      _id\n      title\n      description\n      price\n    }\n    addons{\n      _id\n      options\n      title\n      description\n      quantityMinimum\n      quantityMaximum\n    }\n    zone{\n      _id\n      title\n      tax\n    }\n    rating\n    isAvailable\n    openingTimes{\n      day\n      times{\n        startTime\n        endTime\n      }\n    }\n  }\n}"}, {"type": "mutation", "name": "unmerge($uuids: [String!])", "content": "{\n  phoneNumberRemoveFromContactById(contactId: $contactId, id: $id) {\n    result\n  }\n}"}, {"type": "mutation", "name": "FinalizeOffer($offerID: String!, $from: String)", "content": "{\n        createPostPublicIAM(input: { title: \"Hello, World!\" }) {\n          id\n          title\n        }\n      }"}, {"type": "query", "name": "", "content": "{\n      deleteSagemakerStudioUserProfile(\n        sagemakerStudioUserProfileUri: $sagemakerStudioUserProfileUri\n        deleteFromAWS: $deleteFromAWS\n      )\n    }"}]